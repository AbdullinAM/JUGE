"ncss","ccn","method"
"6","5","spoon.reflect.visitor.CtInheritanceScannerTest.data()"
"25","12","spoon.reflect.visitor.CtInheritanceScannerTest.getMethodToInvoke(Class)"
"13","6","spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner()"
"8","6","spoon.processing.AbstractProcessor.AbstractProcessor()"
"8","5","spoon.processing.ProcessorPropertiesImpl.get(T,String)"
"14","10","spoon.processing.AbstractAnnotationProcessor.AbstractAnnotationProcessor()"
"6","6","spoon.processing.AbstractAnnotationProcessor.isToBeProcessed(E)"
"8","5","spoon.processing.AbstractAnnotationProcessor.process(E)"
"19","12","spoon.MavenLauncher.init(String,String[])"
"12","9","spoon.reflect.path.impl.CtRolePathElement.getFromSet(Collection,String)"
"52","18","spoon.reflect.path.impl.CtRolePathElement.getElements(CtElement)"
"8","5","spoon.reflect.path.impl.CtNamedPathElement.CtNamedPathElement(String,boolean)"
"12","9","spoon.reflect.path.impl.CtNamedPathElement.NameScanner.scanCtElement(CtElement)"
"10","5","spoon.reflect.path.impl.AbstractPathElement.getParamString()"
"8","8","spoon.reflect.path.CtPathStringBuilder.load(String)"
"35","17","spoon.reflect.path.CtPathStringBuilder.fromString(String)"
"23","14","spoon.reflect.path.CtPathStringBuilder.parseArgumentValue(Tokenizer,String,CtPathElement)"
"8","6","spoon.reflect.path.CtPathStringBuilder.Tokenizer.getNextToken(String)"
"73","28","spoon.reflect.path.CtElementPathBuilder.fromElement(CtElement,CtElement)"
"8","5","spoon.reflect.meta.impl.SingleHandler.AbstractList$1.remove(int)"
"10","6","spoon.reflect.meta.impl.SingleHandler.AbstractList$1.remove(Object)"
"6","5","spoon.reflect.meta.impl.SingleHandler.AbstractList$1.equals(Object,Object)"
"22","6","spoon.reflect.visitor.PrinterHelper.write(char)"
"15","9","spoon.reflect.visitor.PrinterHelper.removeLine()"
"8","6","spoon.reflect.visitor.PrinterHelper.adjustStartPosition(CtElement)"
"7","5","spoon.reflect.visitor.PrintingContext.getCurrentTypeReference()"
"34","15","spoon.reflect.visitor.LiteralHelper.getLiteralToken(T)"
"43","15","spoon.reflect.visitor.LiteralHelper.appendCharLiteral(StringBuilder,Character,boolean)"
"10","10","spoon.reflect.visitor.ModelConsistencyChecker.enter(CtElement)"
"12","8","spoon.reflect.visitor.MinimalImportScanner.addFieldImport(CtFieldReference)"
"16","11","spoon.reflect.visitor.MinimalImportScanner.addMethodImport(CtExecutableReference)"
"7","7","spoon.reflect.visitor.JavaIdentifiers.isJavaIdentifier(String)"
"9","6","spoon.reflect.visitor.JavaIdentifiers.isLegalJavaPackageIdentifier(String)"
"6","5","spoon.reflect.visitor.JavaIdentifiers.isLegalJavaExecutableIdentifier(String)"
"20","18","spoon.reflect.visitor.OperatorHelper.getOperatorText(UnaryOperatorKind)"
"44","42","spoon.reflect.visitor.OperatorHelper.getOperatorText(BinaryOperatorKind)"
"13","5","spoon.reflect.visitor.ListPrinter.ListPrinter(TokenWriter,boolean,String,boolean,boolean,String,boolean,boolean,String)"
"10","6","spoon.reflect.visitor.ListPrinter.printSeparatorIfAppropriate()"
"7","6","spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,CtElement)"
"7","6","spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,CtElement)"
"10","6","spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtElement)"
"14","9","spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,Object)"
"8","6","spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtStatementList(CtStatementList)"
"19","9","spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.scanCtType(T)"
"9","7","spoon.reflect.visitor.AstParentConsistencyChecker.scan(CtElement)"
"10","8","spoon.reflect.visitor.filter.ParentFunction.apply(CtElement,Object)"
"21","16","spoon.reflect.visitor.filter.LineFilter.matches(CtStatement)"
"62","20","spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.apply(CtExecutable,Object)"
"7","5","spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.CtConsumer$1.accept(CtMethod)"
"6","5","spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.getTargetMethodOfHierarchy(CtMethod,ClassTypingContext)"
"23","20","spoon.reflect.visitor.filter.CompositeFilter.matches(T)"
"10","5","spoon.reflect.visitor.filter.ExecutableReferenceFilter.addExecutable(CtExecutable)"
"9","8","spoon.reflect.visitor.filter.ExecutableReferenceFilter.matches(CtExecutableReference)"
"17","10","spoon.reflect.visitor.filter.AllTypeMembersFunction.CtConsumer$1.accept(CtType)"
"8","6","spoon.reflect.visitor.filter.LocalVariableReferenceFunction.Filter$1.matches(CtElement)"
"31","7","spoon.reflect.visitor.filter.LocalVariableReferenceFunction.apply(CtElement,Object)"
"8","7","spoon.reflect.visitor.filter.SiblingsFunction.CtScanner$1.scan(CtElement)"
"14","7","spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(T)"
"13","7","spoon.reflect.visitor.ImportScannerImpl.visitCtJavaDoc(CtJavaDoc)"
"21","11","spoon.reflect.visitor.ImportScannerImpl.matchesTypeName(String,CtTypeReference)"
"7","6","spoon.reflect.visitor.ImportScannerImpl.isTypeMatching(String,CtTypeReference)"
"12","6","spoon.reflect.visitor.ImportScannerImpl.getAllImports()"
"11","7","spoon.reflect.visitor.ImportScannerImpl.isImported(CtReference)"
"5","5","spoon.reflect.visitor.ImportScannerImpl.isThereAnotherClassWithSameNameInAnotherPackage(CtTypeReference)"
"61","43","spoon.reflect.visitor.ImportScannerImpl.addClassImport(CtTypeReference)"
"54","29","spoon.reflect.visitor.ImportScannerImpl.isAlreadyInUsedImport(CtReference)"
"15","15","spoon.reflect.visitor.ImportScannerImpl.isImportedInClassImports(CtTypeReference)"
"16","11","spoon.reflect.visitor.ImportScannerImpl.declaringTypeIsLocalOrImported(CtTypeReference)"
"8","5","spoon.reflect.visitor.ImportScannerImpl.isInCollisionWithLocalMethod(CtExecutableReference)"
"15","12","spoon.reflect.visitor.ImportScannerImpl.addMethodImport(CtExecutableReference)"
"7","6","spoon.reflect.visitor.ImportScannerImpl.isImportedInMethodImports(CtExecutableReference)"
"9","7","spoon.reflect.visitor.ImportScannerImpl.addFieldImport(CtFieldReference)"
"10","10","spoon.reflect.visitor.ImportScannerImpl.isImportedInFieldImports(CtFieldReference)"
"12","5","spoon.reflect.visitor.ImportScannerImpl.classNamePresentInJavaLang(CtTypeReference)"
"22","14","spoon.reflect.visitor.ImportScannerImpl.lookForLocalVariables(CtElement)"
"66","41","spoon.reflect.visitor.ImportScannerImpl.isTypeInCollision(CtReference,boolean)"
"14","5","spoon.reflect.factory.PackageFactory.getOrCreate(String,CtModule)"
"10","6","spoon.reflect.factory.PackageFactory.get(String)"
"8","5","spoon.reflect.factory.MethodFactory.getMainMethods()"
"17","9","spoon.reflect.factory.ExecutableFactory.createReferenceInternal(T)"
"14","7","spoon.reflect.factory.ExecutableFactory.getMethodParameterType(CtTypeReference)"
"17","7","spoon.reflect.factory.CompilationUnitFactory.getOrCreate(CtPackage)"
"21","11","spoon.reflect.factory.CompilationUnitFactory.getOrCreate(CtType)"
"12","6","spoon.reflect.factory.CompilationUnitFactory.getOrCreate(CtModule)"
"12","5","spoon.reflect.factory.CompilationUnitFactory.getOrCreate(String)"
"6","5","spoon.reflect.factory.ModuleFactory.CtUnnamedModule.setSimpleName(String)"
"9","5","spoon.reflect.factory.ModuleFactory.getOrCreate(String)"
"13","6","spoon.reflect.factory.CodeFactory.createLiteralArray(T[])"
"6","5","spoon.reflect.factory.CodeFactory.getOrCreateCtBlock(T)"
"10","7","spoon.reflect.factory.CodeFactory.createCtTypeReference(Class)"
"15","7","spoon.reflect.factory.CodeFactory.createJavaDocTag(String,CtJavaDocTag.TagType)"
"20","7","spoon.reflect.factory.AnnotationFactory.annotate(CtElement,A,String,Object)"
"7","7","spoon.template.AbstractTemplate.isValid()"
"20","10","spoon.testing.utils.ProcessorUtils.initProperties(Processor,ProcessorProperties)"
"7","7","spoon.testing.utils.Check.assertCtElementEquals(CtElement,CtElement)"
"30","9","spoon.testing.AbstractCtPackageAssert.isEqualTo(CtPackage)"
"12","9","spoon.support.comparator.CtLineElementComparator.compare(CtElement,CtElement)"
"10","8","spoon.support.comparator.DeepRepresentationComparator.compare(CtElement,CtElement)"
"12","15","spoon.support.comparator.QualifiedNameComparator.compare(CtElement,CtElement)"
"21","7","spoon.support.QueueProcessingManager.process(CtElement)"
"8","5","spoon.support.util.ModelSet.remove(Object)"
"5","6","spoon.support.util.ModelList.linkToParent(CtElement,CtElement)"
"13","8","spoon.support.util.ModelList.remove(Object)"
"25","12","spoon.support.util.RtHelper.getModifiers(int)"
"8","6","spoon.support.util.RtHelper.getMethod(Class,String,int)"
"12","6","spoon.support.reflect.cu.CompilationUnitImpl.getTabCount(int)"
"23","11","spoon.support.reflect.cu.position.SourcePositionImpl.searchLineNumber(int)"
"22","14","spoon.support.reflect.cu.position.SourcePositionImpl.searchColumnNumber(int)"
"9","5","spoon.support.reflect.cu.position.SourcePositionImpl.SourcePositionImpl(CompilationUnit,int,int,int[])"
"7","8","spoon.support.reflect.cu.position.SourcePositionImpl.equals(Object)"
"8","6","spoon.support.reflect.cu.position.SourcePositionImpl.checkArgsAreAscending(int)"
"8","6","spoon.support.reflect.code.CtBreakImpl.getLabelledStatement()"
"8","5","spoon.support.reflect.code.CtFieldAccessImpl.getVariable()"
"9","8","spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatement,CtStatementList)"
"17","6","spoon.support.reflect.code.CtStatementImpl.InsertVisitor.visitCtIf(CtIf)"
"8","6","spoon.support.reflect.code.CtContinueImpl.getLabelledStatement()"
"9","5","spoon.support.reflect.code.CtTryImpl.setCatchers(CtCatch)"
"11","6","spoon.support.reflect.code.CtExpressionImpl.setTypeCasts(CtTypeReference)"
"7","8","spoon.support.reflect.code.CtBlockImpl.shouldInsertAfterSuper()"
"9","5","spoon.support.reflect.code.CtNewArrayImpl.setDimensionExpressions(Integer)"
"9","5","spoon.support.reflect.code.CtNewArrayImpl.setElements(CtExpression)"
"9","5","spoon.support.reflect.code.CtStatementListImpl.setStatements(CtStatement)"
"11","6","spoon.support.reflect.code.CtConstructorCallImpl.setArguments(CtExpression)"
"9","8","spoon.support.reflect.code.CtCommentImpl.equals(Object)"
"9","5","spoon.support.reflect.code.CtForImpl.setForInit(CtStatement)"
"9","5","spoon.support.reflect.code.CtForImpl.setForUpdate(CtStatement)"
"11","6","spoon.support.reflect.code.CtInvocationImpl.setArguments(CtExpression)"
"9","5","spoon.support.reflect.code.CtTryWithResourceImpl.setResources(CtLocalVariable)"
"9","5","spoon.support.reflect.code.CtCaseImpl.setStatements(CtStatement)"
"18","11","spoon.support.reflect.code.CtCatchVariableImpl.getType()"
"11","6","spoon.support.reflect.code.CtCatchVariableImpl.setMultiTypes(CtTypeReference)"
"8","7","spoon.support.reflect.code.CtCatchVariableImpl.getVisibility()"
"8","7","spoon.support.reflect.code.CtLocalVariableImpl.getVisibility()"
"11","6","spoon.support.reflect.code.CtAssignmentImpl.setTypeCasts(CtTypeReference)"
"9","5","spoon.support.reflect.code.CtSwitchImpl.setCases(S)"
"7","7","spoon.support.reflect.CtExtendedModifier.equals(Object)"
"12","16","spoon.support.reflect.eval.VisitorPartialEvaluator.convert(CtTypeReference,Number)"
"11","6","spoon.support.reflect.eval.VisitorPartialEvaluator.evaluate(R)"
"107","40","spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtBinaryOperator(T)"
"12","5","spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtBlock(R)"
"25","12","spoon.support.reflect.eval.VisitorPartialEvaluator.visitFieldAccess(T)"
"13","5","spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtFor(CtFor)"
"28","9","spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtIf(CtIf)"
"38","19","spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtInvocation(T)"
"10","9","spoon.support.reflect.eval.VisitorPartialEvaluator.isLiteralType(Object)"
"14","5","spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtUnaryOperator(T)"
"34","17","spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getDeclaration()"
"16","11","spoon.support.reflect.reference.CtLocalVariableReferenceImpl.getDeclaration()"
"9","6","spoon.support.reflect.reference.CtExecutableReferenceImpl.getExecutableDeclaration()"
"18","13","spoon.support.reflect.reference.CtExecutableReferenceImpl.getCtExecutable(CtType)"
"11","6","spoon.support.reflect.reference.CtExecutableReferenceImpl.setParameters(CtTypeReference)"
"5","5","spoon.support.reflect.reference.CtExecutableReferenceImpl.checkMethodParameterTypeRef(CtTypeReference)"
"13","11","spoon.support.reflect.reference.CtExecutableReferenceImpl.getOverridingExecutable(CtTypeReference)"
"12","12","spoon.support.reflect.reference.CtExecutableReferenceImpl.isOverriding(CtExecutableReference)"
"11","6","spoon.support.reflect.reference.CtExecutableReferenceImpl.setActualTypeArguments(CtTypeReference)"
"20","11","spoon.support.reflect.reference.CtExecutableReferenceImpl.getActualMethod()"
"14","8","spoon.support.reflect.reference.CtExecutableReferenceImpl.getActualConstructor()"
"11","8","spoon.support.reflect.reference.CtExecutableReferenceImpl.isFinal()"
"16","11","spoon.support.reflect.reference.CtExecutableReferenceImpl.getModifiers()"
"9","5","spoon.support.reflect.reference.CtExecutableReferenceImpl.getOverridingExecutable()"
"12","10","spoon.support.reflect.reference.CtExecutableReferenceImpl.getOverloadedExecutable(CtTypeReference,Object)"
"13","6","spoon.support.reflect.reference.CtCatchVariableReferenceImpl.getDeclaration()"
"15","8","spoon.support.reflect.reference.CtParameterReferenceImpl.lookupDynamically()"
"17","12","spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField()"
"7","5","spoon.support.reflect.reference.CtFieldReferenceImpl.fromDeclaringType()"
"10","8","spoon.support.reflect.reference.CtFieldReferenceImpl.getFieldDeclaration()"
"10","9","spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers()"
"11","6","spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.setBounds(CtTypeReference)"
"10","5","spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.addBound(CtTypeReference)"
"7","5","spoon.support.reflect.reference.CtReferenceImpl.equals(Object)"
"8","5","spoon.support.reflect.declaration.CtClassImpl.getConstructor(CtTypeReference)"
"9","5","spoon.support.reflect.declaration.CtClassImpl.setAnonymousExecutables(CtAnonymousExecutable)"
"10","5","spoon.support.reflect.declaration.CtClassImpl.setConstructors(T)"
"10","5","spoon.support.reflect.declaration.CtEnumImpl.addEnumValue(CtEnumValue)"
"12","6","spoon.support.reflect.declaration.CtEnumImpl.setEnumValues(CtEnumValue)"
"8","8","spoon.support.reflect.declaration.CtEnumImpl.getMethod(String,CtTypeReference)"
"8","10","spoon.support.reflect.declaration.CtEnumImpl.getMethod(R,String,CtTypeReference)"
"44","11","spoon.support.reflect.declaration.CtAnnotationImpl.convertValueToExpression(Object)"
"2","9","spoon.support.reflect.declaration.CtAnnotationImpl.isPrimitive(Class)"
"22","5","spoon.support.reflect.declaration.CtAnnotationImpl.addValueExpression(String,CtExpression)"
"39","25","spoon.support.reflect.declaration.CtAnnotationImpl.convertElementToRuntimeObject(CtElement)"
"10","6","spoon.support.reflect.declaration.CtAnnotationImpl.getElementType(String)"
"26","26","spoon.support.reflect.declaration.CtAnnotationImpl.forceObjectToType(Object,Class)"
"11","7","spoon.support.reflect.declaration.CtAnnotationImpl.getValueAsExpression(String)"
"16","6","spoon.support.reflect.declaration.CtAnnotationImpl.getWrappedValue(String)"
"8","5","spoon.support.reflect.declaration.CtAnnotationImpl.AnnotationInvocationHandler.invoke(Object,Method,Object[])"
"11","6","spoon.support.reflect.declaration.CtPackageExportImpl.setTargetExport(CtModuleReference)"
"11","6","spoon.support.reflect.declaration.CtModuleImpl.setModuleDirectives(CtModuleDirective)"
"11","5","spoon.support.reflect.declaration.CtModuleImpl.addModuleDirective(CtModuleDirective)"
"11","5","spoon.support.reflect.declaration.CtModuleImpl.addModuleDirectiveAt(int,CtModuleDirective)"
"10","6","spoon.support.reflect.declaration.CtModuleImpl.removeModuleDirective(CtModuleDirective)"
"9","5","spoon.support.reflect.declaration.CtModuleImpl.getUsedServices()"
"9","5","spoon.support.reflect.declaration.CtModuleImpl.setUsedServices(CtUsedService)"
"11","6","spoon.support.reflect.declaration.CtModuleImpl.getExportedPackages()"
"10","5","spoon.support.reflect.declaration.CtModuleImpl.setExportedPackages(CtPackageExport)"
"11","6","spoon.support.reflect.declaration.CtModuleImpl.getOpenedPackages()"
"10","5","spoon.support.reflect.declaration.CtModuleImpl.setOpenedPackages(CtPackageExport)"
"9","5","spoon.support.reflect.declaration.CtModuleImpl.getRequiredModules()"
"9","5","spoon.support.reflect.declaration.CtModuleImpl.setRequiredModules(CtModuleRequirement)"
"9","5","spoon.support.reflect.declaration.CtModuleImpl.getProvidedServices()"
"9","5","spoon.support.reflect.declaration.CtModuleImpl.setProvidedServices(CtProvidedService)"
"11","6","spoon.support.reflect.declaration.CtProvidedServiceImpl.setImplementationTypes(CtTypeReference)"
"8","7","spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getVisibility()"
"11","6","spoon.support.reflect.declaration.CtConstructorImpl.setFormalCtTypeParameters(CtTypeParameter)"
"13","8","spoon.support.reflect.declaration.CtPackageImpl.ModelSet$1.add(CtPackage)"
"6","6","spoon.support.reflect.declaration.CtPackageImpl.addAllTypes(CtPackage,CtPackage)"
"12","8","spoon.support.reflect.declaration.CtTypeParameterImpl.isSubtypeOf(GenericTypeAdapter,CtTypeParameter,CtTypeParameter)"
"11","6","spoon.support.reflect.declaration.CtExecutableImpl.setParameters(CtParameter)"
"11","6","spoon.support.reflect.declaration.CtExecutableImpl.setThrownTypes(Throwable)"
"12","6","spoon.support.reflect.declaration.CtModuleRequirementImpl.setRequiresModifiers(RequiresModifier)"
"19","14","spoon.support.reflect.declaration.CtImportImpl.getImportKind()"
"19","7","spoon.support.reflect.declaration.CtImportImpl.accept(CtImportVisitor)"
"13","8","spoon.support.template.Parameters.getValue(Template,String,Integer)"
"12","10","spoon.support.template.Parameters.getValue(Template,String,Field)"
"13","8","spoon.support.template.Parameters.getParameterField(Template,String)"
"20","12","spoon.support.template.Parameters.setValue(Template,String,Integer,Object)"
"8","5","spoon.support.template.Parameters.getNames(Template)"
"9","5","spoon.support.template.Parameters.getNamesToValues(Template,Template)"
"19","9","spoon.support.template.Parameters.getTemplateParametersAsMap(Factory,CtType,Template)"
"11","9","spoon.support.template.Parameters.isParameterSource(CtFieldReference)"
"8","5","spoon.support.template.Parameters.getAllTemplateParameterFields(Template)"
"17","6","spoon.support.StandardEnvironment.report(Processor,Level,CtElement,String)"
"12","5","spoon.support.StandardEnvironment.print(String,Level)"
"16","7","spoon.support.StandardEnvironment.reportEnd()"
"17","10","spoon.support.StandardEnvironment.setInputClassLoader(ClassLoader)"
"9","5","spoon.support.StandardEnvironment.urlClasspath()"
"14","8","spoon.support.StandardEnvironment.verifySourceClasspath(String[])"
"9","7","spoon.support.StandardEnvironment.setSourceOutputDirectory(File)"
"7","6","spoon.support.JavaOutputProcessor.init()"
"20","7","spoon.support.JavaOutputProcessor.createJavaFile(CtType)"
"2","5","spoon.support.JavaOutputProcessor.isToBeProcessed(CtNamedElement)"
"9","5","spoon.support.JavaOutputProcessor.process(CtNamedElement)"
"8","5","spoon.support.JavaOutputProcessor.createModuleFile(CtModule)"
"13","5","spoon.support.modelobs.ActionBasedChangeListenerImpl.propagateModelChange(Action)"
"10","6","spoon.support.modelobs.ChangeCollector.CtScannerListener$1.enter(CtElement)"
"23","8","spoon.support.SerializationModelStreamer.load(InputStream)"
"15","7","spoon.support.visitor.SubInheritanceHierarchyResolver.CtScannerListener$1.enter(CtElement)"
"4","5","spoon.support.visitor.java.reflect.RtParameter.isVarArgs()"
"7","7","spoon.support.visitor.java.reflect.RtParameter.equals(Object)"
"21","7","spoon.support.visitor.java.reflect.RtParameter.parametersOf(Constructor)"
"13","12","spoon.support.visitor.java.reflect.RtMethod.equals(Object)"
"8","8","spoon.support.visitor.java.reflect.RtMethod._java8_isDefault(Method)"
"8","5","spoon.support.visitor.java.reflect.RtMethod.sameMethodsWithDifferentTypeOf(T,RtMethod)"
"8","8","spoon.support.visitor.java.reflect.RtMethod.isLightEquals(RtMethod)"
"16","9","spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)"
"7","6","spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.equals(Object)"
"10","7","spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)"
"9","5","spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)"
"28","10","spoon.support.visitor.java.JavaReflectionTreeBuilder.scan(T)"
"18","6","spoon.support.visitor.java.JavaReflectionTreeBuilder.visitTypeParameterReference(CtRole,T)"
"19","8","spoon.support.visitor.java.JavaReflectionTreeBuilder.getTypeName(Type)"
"36","20","spoon.support.visitor.java.JavaReflectionTreeBuilder.setModifier(CtModifiable,int,Class)"
"33","22","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitClass(T)"
"26","16","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitInterface(T)"
"37","26","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitEnum(T)"
"20","12","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitAnnotationClass(T)"
"13","6","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitConstructor(T)"
"12","8","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitMethod(RtMethod,Annotation)"
"21","14","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,Type)"
"11","6","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,ParameterizedType)"
"6","6","spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,WildcardType)"
"29","10","spoon.support.visitor.MethodTypingContext.setMethod(CtMethod)"
"17","8","spoon.support.visitor.MethodTypingContext.setExecutableReference(CtExecutableReference)"
"17","12","spoon.support.visitor.MethodTypingContext.adaptTypeParameter(CtTypeParameter)"
"14","8","spoon.support.visitor.MethodTypingContext.hasSameMethodFormalTypeParameters(CtFormalTypeDeclarer)"
"9","5","spoon.support.visitor.MethodTypingContext.isSameMethodFormalTypeParameter(CtTypeParameter,CtTypeParameter)"
"7","5","spoon.support.visitor.MethodTypingContext.getIndexOfTypeParam(CtFormalTypeDeclarer,CtTypeReference)"
"11","8","spoon.support.visitor.MethodTypingContext.adaptTypeForNewMethod(CtTypeReference)"
"7","7","spoon.support.visitor.MethodTypingContext.checkSameTypingContext(ClassTypingContext,CtFormalTypeDeclarer)"
"16","7","spoon.support.visitor.SignaturePrinter.writeNameAndParameters(T)"
"12","9","spoon.support.visitor.ClassTypingContext.isSubtypeOf(CtTypeReference)"
"21","8","spoon.support.visitor.ClassTypingContext.CtConsumer$1.accept(CtTypeReference)"
"40","11","spoon.support.visitor.ClassTypingContext.resolveActualTypeArgumentsOf(CtTypeReference)"
"9","6","spoon.support.visitor.ClassTypingContext.isOverriding(CtMethod,CtMethod)"
"9","7","spoon.support.visitor.ClassTypingContext.getEnclosingType(CtType)"
"11","8","spoon.support.visitor.ClassTypingContext.getEnclosingType(CtTypeReference)"
"12","9","spoon.support.visitor.ClassTypingContext.adaptTypeParameter(CtTypeParameter)"
"9","6","spoon.support.visitor.ClassTypingContext.HierarchyListener.enter(CtTypeReference,boolean)"
"12","5","spoon.support.visitor.ClassTypingContext.resolveTypeParameters(CtTypeReference)"
"13","8","spoon.support.visitor.ClassTypingContext.resolveTypeParameter(CtFormalTypeDeclarer,CtTypeParameterReference,CtTypeParameter,CtTypeReference)"
"7","5","spoon.support.visitor.ClassTypingContext.getActualTypeArguments(String)"
"8","5","spoon.support.visitor.ClassTypingContext.substituteBy(CtTypeParameter,CtFormalTypeDeclarer,U)"
"15","10","spoon.support.visitor.ClassTypingContext.isSubTypeByActualTypeArguments(CtTypeReference,CtTypeReference)"
"21","15","spoon.support.visitor.ClassTypingContext.isSubTypeArg(CtTypeReference,CtTypeReference)"
"19","10","spoon.support.visitor.ClassTypingContext.isSameSignature(CtExecutable,CtExecutable,boolean)"
"41","23","spoon.support.visitor.ClassTypingContext.ExecutableContext.isSameSignatureLikeScopeMethod(CtExecutable,boolean)"
"15","10","spoon.support.visitor.equals.EqualsVisitor.biScan(CtRole,CtElement,CtElement)"
"20","12","spoon.support.visitor.equals.EqualsVisitor.biScan(CtRole,CtElement,CtElement)"
"7","5","spoon.support.visitor.equals.CloneHelper.clone(T)"
"9","7","spoon.support.visitor.equals.CloneHelper.clone(T)"
"9","7","spoon.support.visitor.equals.CloneHelper.clone(T)"
"7","5","spoon.support.visitor.equals.CloneHelper.clone(T)"
"10","6","spoon.support.visitor.equals.EqualsChecker.scanCtStatement(CtStatement)"
"16","7","spoon.support.visitor.equals.EqualsChecker.scanCtModifiable(CtModifiable)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtOperatorAssignment(A)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtBinaryOperator(T)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtUnaryOperator(T)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtBreak(CtBreak)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtContinue(CtContinue)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtLiteral(T)"
"12","5","spoon.support.visitor.equals.EqualsChecker.visitCtImport(CtImport)"
"25","10","spoon.support.visitor.AbstractTypingContext.adaptType(CtTypeInformation)"
"22","8","spoon.support.visitor.replace.ReplacementVisitor.replaceInMapIfExist(V,spoon.support.visitor.replace.ReplaceMapListener)"
"14","6","spoon.support.visitor.replace.ReplacementVisitor.replaceInSetIfExist(T,spoon.support.visitor.replace.ReplaceSetListener)"
"19","7","spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(T,spoon.support.visitor.replace.ReplaceListListener)"
"10","6","spoon.support.visitor.replace.ReplacementVisitor.replaceElementIfExist(spoon.reflect.declaration.CtElement,spoon.support.visitor.replace.ReplaceListener)"
"7","7","spoon.support.visitor.ProcessingVisitor.canBeProcessed(CtElement)"
"11","9","spoon.support.visitor.ProcessingVisitor.scan(CtElement)"
"19","12","spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.getValueAt(int,int)"
"11","5","spoon.support.gui.SpoonModelTree.keyTyped(KeyEvent)"
"8","6","spoon.support.gui.SpoonModelTree.next()"
"13","5","spoon.support.gui.SpoonModelTree.Runnable$1.run()"
"168","168","spoon.support.DefaultCoreFactory.create(CtElement)"
"6","5","spoon.support.sniper.internal.TokenPrinterEvent.getRole()"
"14","8","spoon.support.sniper.internal.CollectionSourceFragment.isOrdered()"
"18","15","spoon.support.sniper.internal.AbstractSourceFragmentContextCollection.matchesPrinterEvent(PrinterEvent)"
"15","5","spoon.support.compiler.ZipFolder.getFiles()"
"16","5","spoon.support.compiler.ZipFolder.extract(File)"
"6","5","spoon.support.compiler.FileSystemFolder.FileSystemFolder(File)"
"9","5","spoon.support.compiler.FileSystemFolder.getSubFolders()"
"8","8","spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchTypeBinding(ReferenceBinding,String)"
"12","11","spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchTypeBinding(String,CompilationUnitDeclaration[])"
"8","7","spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchType(String,ImportReference[])"
"17","8","spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchPackage(ImportReference[][],CompilationUnitDeclaration[])"
"20","16","spoon.support.compiler.jdt.JDTTreeBuilderQuery.hasAnnotationWithType(Annotation,CtAnnotatedElementType)"
"11","9","spoon.support.compiler.jdt.JDTTreeBuilderQuery.getUnaryOperator(int)"
"47","45","spoon.support.compiler.jdt.JDTTreeBuilderQuery.getBinaryOperatorKind(int)"
"25","13","spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(int,boolean,boolean)"
"35","12","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createVariableAccessNoClasspath(SingleNameReference)"
"44","14","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createVariableAccess(QualifiedNameReference)"
"15","6","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createFieldAccess(SingleNameReference)"
"24","5","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createTypeAccessNoClasspath(QualifiedNameReference)"
"11","5","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createTargetFieldAccess(QualifiedNameReference,Object)"
"11","5","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createParameter(Argument)"
"28","11","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createType(TypeDeclaration)"
"31","16","spoon.support.compiler.jdt.JDTTreeBuilderHelper.createModule(ModuleDeclaration)"
"16","5","spoon.support.compiler.jdt.JDTSnippetCompiler.build(JDTBuilder)"
"18","5","spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(LabeledStatement,BlockScope)"
"24","9","spoon.support.compiler.jdt.JDTTreeBuilder.visit(CompilationUnitDeclaration,CompilationUnitScope)"
"16","6","spoon.support.compiler.jdt.JDTTreeBuilder.visit(MethodDeclaration,ClassScope)"
"18","8","spoon.support.compiler.jdt.JDTTreeBuilder.visit(FieldDeclaration,MethodScope)"
"10","5","spoon.support.compiler.jdt.JDTTreeBuilder.visit(MessageSend,BlockScope)"
"18","10","spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedNameReference,BlockScope)"
"12","7","spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedTypeReference,BlockScope)"
"22","9","spoon.support.compiler.jdt.JDTTreeBuilder.visit(SingleNameReference,BlockScope)"
"18","8","spoon.support.compiler.jdt.JDTTreeBuilder.visit(SingleTypeReference,BlockScope)"
"18","9","spoon.support.compiler.jdt.JDTTreeBuilder.visit(TypeDeclaration,CompilationUnitScope)"
"30","12","spoon.support.compiler.jdt.JDTImportBuilder.build()"
"15","9","spoon.support.compiler.jdt.JDTImportBuilder.getOrLoadClass(String)"
"38","27","spoon.support.compiler.jdt.ReferenceBuilder.buildTypeReferenceInternal(T,TypeReference,Scope,boolean)"
"9","6","spoon.support.compiler.jdt.ReferenceBuilder.isTypeArgumentExplicit(TypeReference[][])"
"23","12","spoon.support.compiler.jdt.ReferenceBuilder.getQualifiedTypeReference(T[][],TypeBinding,ReferenceBinding,JDTTreeBuilder.OnAccessListener)"
"41","20","spoon.support.compiler.jdt.ReferenceBuilder.getDeclaringReferenceFromImports(CtReference[])"
"43","17","spoon.support.compiler.jdt.ReferenceBuilder.getExecutableReference(MethodBinding)"
"20","8","spoon.support.compiler.jdt.ReferenceBuilder.getExecutableReference(MessageSend)"
"12","5","spoon.support.compiler.jdt.ReferenceBuilder.getTypeParameterReference(TypeBinding,TypeReference)"
"10","8","spoon.support.compiler.jdt.ReferenceBuilder.isCorrectTypeReference(TypeReference)"
"6","6","spoon.support.compiler.jdt.ReferenceBuilder.insertGenericTypesInNoClasspathFromJDTInSpoon(TypeReference,T)"
"27","12","spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(TypeReference)"
"29","9","spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(String)"
"24","9","spoon.support.compiler.jdt.ReferenceBuilder.getTypeParameterReference(String)"
"183","67","spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(TypeBinding,boolean)"
"13","5","spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(FieldBinding)"
"26","10","spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(VariableBinding)"
"16","6","spoon.support.compiler.jdt.ReferenceBuilder.setPackageOrDeclaringType(CtTypeReference,CtReference)"
"21","10","spoon.support.compiler.jdt.ReferenceBuilder.getLambdaExecutableReference(SingleNameReference)"
"208","106","spoon.support.compiler.jdt.PositionBuilder.buildPositionCtElement(CtElement,ASTNode)"
"10","5","spoon.support.compiler.jdt.PositionBuilder.getParentsSourceStart()"
"10","7","spoon.support.compiler.jdt.PositionBuilder.getNrOfDimensions(int[],int,int)"
"17","5","spoon.support.compiler.jdt.PositionBuilder.setModifiersPosition(CtModifiable,int,int)"
"13","8","spoon.support.compiler.jdt.PositionBuilder.getSourceEndOfTypeReference(int[],TypeReference,int)"
"11","7","spoon.support.compiler.jdt.PositionBuilder.findNextNonWhitespace(boolean,boolean[],int,int)"
"8","6","spoon.support.compiler.jdt.PositionBuilder.findNextWhitespace(int[],int,int)"
"12","5","spoon.support.compiler.jdt.PositionBuilder.findPrevNonWhitespace(int[],int,int)"
"8","5","spoon.support.compiler.jdt.PositionBuilder.findPrevWhitespace(int[],int,int)"
"21","18","spoon.support.compiler.jdt.PositionBuilder.getEndOfComment(int[],int,int)"
"14","11","spoon.support.compiler.jdt.PositionBuilder.getStartOfComment(int[],int,int)"
"25","9","spoon.support.compiler.jdt.JDTBatchCompiler.getCompilationUnits()"
"8","5","spoon.support.compiler.jdt.JDTBatchCompiler.ICompilerRequestor$1.acceptResult(CompilationResult)"
"68","11","spoon.support.compiler.jdt.JDTBatchCompiler.getUnits()"
"22","11","spoon.support.compiler.jdt.JDTCommentBuilder.addCommentToNear(CtComment,CtElement)"
"15","9","spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.scan(CtElement)"
"12","8","spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtClass(T)"
"9","5","spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtInterface(T)"
"25","14","spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtSwitch(E)"
"14","11","spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtIf(CtIf)"
"137","8","spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(CtComment)"
"13","11","spoon.support.compiler.jdt.JDTCommentBuilder.FindCommentParentScanner.scan(CtElement)"
"27","14","spoon.support.compiler.jdt.JDTCommentBuilder.cleanComment(Reader)"
"14","11","spoon.support.compiler.jdt.ParentExiter.scanCtElement(CtElement)"
"10","6","spoon.support.compiler.jdt.ParentExiter.substituteAnnotation(CtTypedElement)"
"13","9","spoon.support.compiler.jdt.ParentExiter.scanCtExecutable(R)"
"20","13","spoon.support.compiler.jdt.ParentExiter.scanCtType(T)"
"10","7","spoon.support.compiler.jdt.ParentExiter.scanCtVariable(T)"
"6","7","spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToDefaultValue(T)"
"9","6","spoon.support.compiler.jdt.ParentExiter.visitCtConstructor(T)"
"14","9","spoon.support.compiler.jdt.ParentExiter.visitCtMethod(T)"
"9","5","spoon.support.compiler.jdt.ParentExiter.visitArrayAccess(E)"
"9","5","spoon.support.compiler.jdt.ParentExiter.visitCtAssert(T)"
"10","6","spoon.support.compiler.jdt.ParentExiter.visitCtAssignment(A)"
"28","11","spoon.support.compiler.jdt.ParentExiter.visitCtBinaryOperator(T)"
"10","8","spoon.support.compiler.jdt.ParentExiter.visitCtCase(E)"
"9","5","spoon.support.compiler.jdt.ParentExiter.visitCtCatch(CtCatch)"
"14","6","spoon.support.compiler.jdt.ParentExiter.visitCtTypeParameter(CtTypeParameter)"
"11","5","spoon.support.compiler.jdt.ParentExiter.visitCtConditional(T)"
"5","5","spoon.support.compiler.jdt.ParentExiter.visitCtDo(CtDo)"
"13","10","spoon.support.compiler.jdt.ParentExiter.visitCtFor(CtFor)"
"10","9","spoon.support.compiler.jdt.ParentExiter.isContainedInForInit()"
"10","9","spoon.support.compiler.jdt.ParentExiter.isContainedInForUpdate()"
"9","7","spoon.support.compiler.jdt.ParentExiter.visitCtForEach(CtForEach)"
"22","11","spoon.support.compiler.jdt.ParentExiter.visitCtIf(CtIf)"
"19","12","spoon.support.compiler.jdt.ParentExiter.visitCtInvocation(T)"
"5","5","spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToQualification(T)"
"5","5","spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToReceiver(T)"
"13","8","spoon.support.compiler.jdt.ParentExiter.visitCtNewArray(T)"
"10","9","spoon.support.compiler.jdt.ParentExiter.isContainedInDimensionExpression()"
"15","7","spoon.support.compiler.jdt.ParentExiter.visitCtConstructorCall(T)"
"5","5","spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToEnclosingInstance(T)"
"12","7","spoon.support.compiler.jdt.ParentExiter.visitCtNewClass(T)"
"12","6","spoon.support.compiler.jdt.ParentExiter.visitCtLambda(T)"
"11","5","spoon.support.compiler.jdt.ParentExiter.visitCtPackage(CtPackage)"
"9","6","spoon.support.compiler.jdt.ParentExiter.visitCtSwitch(E)"
"8","7","spoon.support.compiler.jdt.ParentExiter.visitCtSynchronized(CtSynchronized)"
"18","9","spoon.support.compiler.jdt.ParentExiter.visitCtTry(CtTry)"
"6","6","spoon.support.compiler.FileSystemFile.getContent()"
"5","5","spoon.metamodel.MMMethod.getCompatibleMethod(MetamodelConcept)"
"6","6","spoon.refactoring.CtRenameLocalVariableRefactoring.QueryDriver.enter(CtElement)"
"38","23","spoon.refactoring.CtRenameLocalVariableRefactoring.Filter$1.matches(CtElement)"
"53","5","spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts()"
"9","6","spoon.refactoring.Refactoring.CtScanner$1.visitCtExecutableReference(T)"
"8","6","spoon.refactoring.Refactoring.CtScanner$1.visitCtTypeReference(T)"
"9","6","spoon.refactoring.Refactoring.CtScanner$1.visitCtExecutableReference(T)"
"9","7","spoon.refactoring.Refactoring.CtScanner$1.visitCtFieldReference(T)"
"7","5","spoon.refactoring.AbstractRenameRefactoring.refactor()"
"10","5","spoon.pattern.internal.matcher.ChainOfMatchersImpl.createFromList(Matchers,RootNode,int)"
"7","5","spoon.pattern.internal.matcher.ChainOfMatchersImpl.ChainOfMatchersImpl(RootNode,Matchers)"
"10","6","spoon.pattern.internal.matcher.MatchingScanner.scan(CtRole,CtElement)"
"17","6","spoon.pattern.internal.matcher.MatchingScanner.searchMatchInList(CtRole,CtElement,boolean)"
"14","6","spoon.pattern.internal.matcher.MatchingScanner.searchMatchInSet(CtRole,CtElement)"
"11","10","spoon.pattern.internal.matcher.TobeMatched.create(ImmutableMap,ContainerKind,Object)"
"13","9","spoon.pattern.internal.matcher.TobeMatched.getMatchedTargets(TobeMatched)"
"16","10","spoon.pattern.internal.matcher.TobeMatched.matchNext(ImmutableMap)"
"85","70","spoon.pattern.internal.ValueConvertorImpl.getValueAs(Factory,String,Object,T)"
"17","10","spoon.pattern.internal.parameter.SetParameterInfo.addValueAs(Object,Object)"
"22","10","spoon.pattern.internal.parameter.ListParameterInfo.addValueAs(Object,Object)"
"4","5","spoon.pattern.internal.parameter.ListParameterInfo.getExistingValue(Object)"
"7","5","spoon.pattern.internal.parameter.ListParameterInfo.getValue(ImmutableMap)"
"37","23","spoon.pattern.internal.parameter.MapParameterInfo.addValueAs(Object,Object)"
"11","7","spoon.pattern.internal.node.SwitchNode.matchTargets(TobeMatched,Matchers)"
"13","10","spoon.pattern.internal.node.SwitchNode.CaseNode.replaceNode(RootNode,RootNode)"
"11","7","spoon.pattern.internal.node.SwitchNode.CaseNode.matchTargets(TobeMatched,Matchers)"
"25","10","spoon.pattern.internal.node.SwitchNode.generateInlineTargets(DefaultGenerator,T,ImmutableMap)"
"10","7","spoon.pattern.internal.node.MapEntryNode.replaceNode(RootNode,RootNode)"
"8","6","spoon.pattern.internal.node.MapEntryNode.matchTarget(Object,ImmutableMap)"
"10","7","spoon.pattern.internal.node.ForEachNode.replaceNode(RootNode,RootNode)"
"15","7","spoon.pattern.internal.node.ForEachNode.matchAllWith(TobeMatched)"
"9","6","spoon.pattern.internal.node.ListOfNodes.replaceNode(RootNode,RootNode)"
"8","10","spoon.pattern.internal.node.ConstantNode.matchTarget(Object,ImmutableMap)"
"18","11","spoon.pattern.internal.node.AbstractRepeatableMatcher.matchTargets(TobeMatched,Matchers)"
"29","21","spoon.pattern.internal.node.AbstractRepeatableMatcher.matchOptionalTargets(TobeMatched,Matchers)"
"5","5","spoon.pattern.Match.getMatchingElements(T)"
"9","9","spoon.pattern.Match.getMatchingElement(T,boolean)"
"11","12","spoon.javadoc.internal.Pair.equals(Object)"
"11","10","spoon.javadoc.internal.JavadocBlockTag.equals(Object)"
"10","5","spoon.javadoc.internal.JavadocInlineTag.fromText(String)"
"11","12","spoon.javadoc.internal.JavadocInlineTag.equals(Object)"
"7","6","spoon.javadoc.internal.JavadocSnippet.equals(Object)"
"172","6","spoon.Launcher.defineArgs()"
"66","23","spoon.Launcher.processArguments()"
"16","7","spoon.Launcher.parseArgs()"
"17","10","spoon.Launcher.prettyprint()"
"11","6","spoon.Launcher.parseClass(String)"
"10","8","spoon.compiler.SpoonResourceHelper.createFolder(File)"
"15","8","spoon.compiler.builder.SourceOptions.sources(SpoonFile)"
"8","5","spoon.compiler.builder.Options.join(String,String[])"
