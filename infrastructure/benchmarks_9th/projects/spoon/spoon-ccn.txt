Nr.   Classes Functions      NCSS  Javadocs Package
  1        84       116       802        24 .
  2         2         2         8         0 app
  3         4        12        84         6 com.cristal.ircica.applicationcolis.userinterface.fragments
  4         2        36       200        12 com.duckduckgo.mobile.android.util
  5         2         2        22         0 com.example
  6         2         0        76         0 com.squareup.javapoet
  7         8         6        28         4 compilation
  8         4       130      4598       140 daikon
  9         2        12       554         8 daikon.tools
 10         2         0         4         0 de.uni_bremen.st.quide.persistence.data
 11         2        16        40         0 de.uni_bremen.st.quide.persistence.data.entities
 12         2         4        14         4 de.uni_bremen.st.quide.persistence.ratings
 13         2         4        12         0 fr.acme
 14         6         4        26         0 fr.inria
 15         2         2        40         0 fr.inria.sandbox
 16         2         2         8         0 fr.simplemodule.pack
 17         2         0         6         0 imported
 18         2        14        76         0 it.feio.android.omninotes.models
 19         2         0        10         0 jdtimportbuilder
 20         2        38      1508         4 megamek.client.bot
 21         2         2        42         2 net.sf.jabref.collab
 22         2         0         8         0 org.acme
 23         2       132       824       134 org.apache.commons.math4.linear
 24         2         6       104         8 org.argouml.uml.ui.behavior.use_cases
 25         2         4        28         0 org.bottiger.podcast.adapters
 26         2        10        26        24 org.eclipse.draw2d
 27         2        18       306        12 org.eclipse.draw2d.parts
 28         2        30       416        18 org.eclipse.draw2d.text
 29         2         8        72         2 org.ehcache.core
 30         4        34       352         6 org.elasticsearch.action.support.broadcast
 31         2        36       460        34 org.elasticsearch.tasks
 32         4        14       194         2 org.ethack.orwall
 33         2         2         6         0 org.myorganization
 34         2         2         8         0 org.myorganization.pack
 35         2         6        84         8 org.objectweb.carol.jndi.spi
 36         2       270      2680        90 org.sat4j.minisat.core
 37         2         2        28         2 org.springframework.beans.support
 38         2         0         4         0 packbar
 39         2         0         4         0 packfoo
 40         2         4        12         0 snippet.test.resources
 41         9       115       827        77 spoon
 42         6        88       161        84 spoon.compiler
 43         9        40       186        11 spoon.compiler.builder
 44         4        10        44         1 spoon.decompiler
 45         0         0         1         0 spoon.experimental
 46         2         5       102         0 spoon.generating
 47         4         7        41         2 spoon.generating.clone
 48         7        19        53         1 spoon.generating.meta
 49         2        18       275         1 spoon.generating.replace
 50         2         6        31         1 spoon.generating.scanner
 51         5        31       171         9 spoon.javadoc.internal
 52         1         3        17         2 spoon.legacy
 53         2        14        57        13 spoon.metamodel
 54         4        14        65        10 spoon.pattern
 55         4        12       169        12 spoon.pattern.internal
 56         4        27       199        16 spoon.pattern.internal.matcher
 57        10        62       441        13 spoon.pattern.internal.node
 58         7        46       240        18 spoon.pattern.internal.parameter
 59        16        88       289        68 spoon.processing
 60         7        54       403        34 spoon.refactoring
 61         4        19        86        20 spoon.reflect
 62         0         0        25         0 spoon.reflect.annotations
 63        62       250       624       234 spoon.reflect.code
 64         2        13        24        15 spoon.reflect.cu
 65         4        16        40         4 spoon.reflect.cu.position
 66        42       371       871       271 spoon.reflect.declaration
 67         4         4        15         0 spoon.reflect.declaration.testclasses
 68         1         1         5         1 spoon.reflect.eval
 69        18       593      1969       295 spoon.reflect.factory
 70         2        10        19         5 spoon.reflect.meta
 71         3        19      1116         3 spoon.reflect.meta.impl
 72         5        19       273        17 spoon.reflect.path
 73         6        30       267         7 spoon.reflect.path.impl
 74        17       118       245        95 spoon.reflect.reference
 75        33       655      3960       180 spoon.reflect.visitor
 76         8        22        46        17 spoon.reflect.visitor.chain
 77        37       115       904        91 spoon.reflect.visitor.filter
 78         1         0         2         0 spoon.reflect.visitor.printer
 79         2        10        79         1 spoon.reflect.visitor.processors
 80        10       222      1430        26 spoon.support
 81         5         6        78         5 spoon.support.comparator
 82        11       113       511        10 spoon.support.compiler
 83         1         2        26         0 spoon.support.compiler.classpath
 84        20       397      4148        56 spoon.support.compiler.jdt
 85         2         0         5         0 spoon.support.compiler.jdt.testclasses
 86         3        32       325        13 spoon.support.gui
 87         6        66       256        30 spoon.support.modelobs
 88         5        15        55        10 spoon.support.modelobs.action
 89         6        13        65         8 spoon.support.modelobs.context
 90         1        11        50         1 spoon.support.reflect
 91        54       442      2429         4 spoon.support.reflect.code
 92         1         5        32         1 spoon.support.reflect.cu
 93         5        39       204        10 spoon.support.reflect.cu.position
 94        23       412      2081        15 spoon.support.reflect.declaration
 95         2        31       408         2 spoon.support.reflect.eval
 96        15       163       938         5 spoon.support.reflect.reference
 97         0         0         1         0 spoon.support.sniper
 98        16        79       365        42 spoon.support.sniper.internal
 99         2        20       192        12 spoon.support.template
100        11       105       482        20 spoon.support.util
101         1         3        16         2 spoon.support.util.internal
102         9        90       836        45 spoon.support.visitor
103         2       124       907         7 spoon.support.visitor.clone
104         4        42       323        11 spoon.support.visitor.equals
105         3        64       630        12 spoon.support.visitor.java
106         8        58       279         0 spoon.support.visitor.java.internal
107         2        32       195        10 spoon.support.visitor.java.reflect
108         7       100      1106         2 spoon.support.visitor.replace
109        10        34       163        32 spoon.template
110         1         1        15         0 spoon.test
111         3        63      1209         0 spoon.test.annotation
112        12        18       169         2 spoon.test.annotation.testclasses
113         1         2         8         0 spoon.test.annotation.testclasses.dropwizard
114         0         0         3         0 spoon.test.annotation.testclasses.notrepeatable
115         1         2        11         0 spoon.test.annotation.testclasses.repeatable
116         1         2        11         0 spoon.test.annotation.testclasses.repeatandarrays
117         1         4        17         0 spoon.test.annotation.testclasses.shadow
118         0         0        11         0 spoon.test.annotation.testclasses.spring
119         1         0         8         0 spoon.test.annotation.testclasses.typeandfield
120         2         7       149         0 spoon.test.api
121         1         2        27         0 spoon.test.api.processors
122         1         1         7         0 spoon.test.api.testclasses
123         1         8       104         0 spoon.test.arrays
124         3         5        19         0 spoon.test.arrays.testclasses
125         1         5        48         0 spoon.test.casts
126         1         1         4         0 spoon.test.change.testclasses
127        16        22       142        15 spoon.test.comment.testclasses
128         1         5        74         0 spoon.test.comparison
129         1        13       254         0 spoon.test.compilation
130         4         3        11         1 spoon.test.compilation.testclasses
131         1         5       103         1 spoon.test.compilationunit
132         1         6        63         0 spoon.test.condition
133         2         5        45         0 spoon.test.condition.testclasses
134         1         9        92         0 spoon.test.constructor
135         1         0         2         0 spoon.test.constructor.testclasses
136         2        24       207         0 spoon.test.constructorcallnewclass
137         4         9        83         1 spoon.test.constructorcallnewclass.testclasses
138         1         2        39         0 spoon.test.control
139         2         5        18         0 spoon.test.control.testclasses
140         1         3        66         1 spoon.test.ctBlock
141         1         2        17         1 spoon.test.ctBlock.testclasses
142         1         7       106         0 spoon.test.ctBodyHolder
143         2         5        26         0 spoon.test.ctBodyHolder.testclasses
144         1         4        45         0 spoon.test.ctCase
145         1         1        15         0 spoon.test.ctCase.testclasses
146         1         8       174         0 spoon.test.ctClass
147         3         4        19         2 spoon.test.ctClass.testclasses
148         2         3        13         2 spoon.test.ctClass.testclasses.issue1306.internal
149         1         3         8         1 spoon.test.ctClass.testclasses.issue1306.test
150         2         2        44         1 spoon.test.ctElement
151         1         2         6         0 spoon.test.ctElement.testclasses
152         1        12       132         1 spoon.test.ctType
153        14        13       102         0 spoon.test.ctType.testclasses
154         1        14       148         0 spoon.test.delete
155         1         6        34         0 spoon.test.delete.testclasses
156         1         2        57         0 spoon.test.enums
157         6         4        24         0 spoon.test.enums.testclasses
158         1        10       109         0 spoon.test.eval
159         2        10        55         0 spoon.test.eval.testclasses
160         9         8        81         0 spoon.test.exceptions
161         1         6        84         0 spoon.test.executable
162         6        12        39         1 spoon.test.executable.testclasses
163         8        20       346         0 spoon.test.factory
164         1         0         5         0 spoon.test.factory.testclasses
165         1         0         2         0 spoon.test.factory.testclasses2
166         2         0         7         0 spoon.test.factory.testclasses3
167         1         7       106         0 spoon.test.field
168         3         1        18         1 spoon.test.field.testclasses
169        11        17       102         0 spoon.test.fieldaccesses.testclasses
170         2         0        11         0 spoon.test.fieldaccesses.testclasses.internal
171         1         3        41         0 spoon.test.filters
172        11        26        94         0 spoon.test.filters.testclasses
173        16        16       104         3 spoon.test.generics.testclasses
174         8        13        36         8 spoon.test.generics.testclasses.rxjava
175         7         8        25         0 spoon.test.generics.testclasses2
176        12        17       107         6 spoon.test.generics.testclasses3
177         3         3        10         0 spoon.test.generics.testclasses4
178         1         1        20         0 spoon.test.imports
179        23        17       148        10 spoon.test.imports.testclasses
180         4         2        27         0 spoon.test.imports.testclasses.internal
181         3         2         7         0 spoon.test.imports.testclasses.internal2
182         2         1         6         0 spoon.test.imports.testclasses.internal3
183         2         1         7         0 spoon.test.imports.testclasses.internal4
184         4         0        17         0 spoon.test.imports.testclasses.memberaccess
185         2         0         9         0 spoon.test.imports.testclasses.memberaccess2
186         2         0         8         2 spoon.test.imports.testclasses.multiplecu
187        10         2        56         4 spoon.test.imports.testclasses2
188         2         2        12         2 spoon.test.imports.testclasses2.apachetestsuite
189         2         2        12         2 spoon.test.imports.testclasses2.apachetestsuite.enum2
190         2         2        12         2 spoon.test.imports.testclasses2.apachetestsuite.enums
191         2         6        38         8 spoon.test.imports.testclasses2.apachetestsuite.staticcollision
192         2         6        38         8 spoon.test.imports.testclasses2.apachetestsuite.staticjava3
193         2         6        40         8 spoon.test.imports.testclasses2.apachetestsuite.staticmethod
194         2         0         4         2 spoon.test.imports.testclasses2.toto
195         1         2        38         0 spoon.test.initializers
196         2         0        27         0 spoon.test.initializers.testclasses
197         4        18       307         1 spoon.test.intercession
198         4        16       193         0 spoon.test.intercession.insertBefore
199         2         9       166         0 spoon.test.interfaces
200         3         3        13         0 spoon.test.interfaces.testclasses
201         2         2         8         0 spoon.test.invocations.testclasses
202         1         3        67         0 spoon.test.javadoc
203         2         1         7         2 spoon.test.javadoc.testclasses
204         1         8       117         1 spoon.test.jdtimportbuilder
205         3         0        17         2 spoon.test.jdtimportbuilder.testclasses
206         3         0         6         3 spoon.test.jdtimportbuilder.testclasses.fullpack
207         2         1         9         1 spoon.test.jdtimportbuilder.testclasses.staticimport
208         1         1        80         1 spoon.test.labels
209         1         1        38         1 spoon.test.labels.testclasses
210         1         2        32         0 spoon.test.limits.utils
211         1         0         7         0 spoon.test.limits.utils.testclasses
212         1         5       112         0 spoon.test.literal
213         2         0        22         0 spoon.test.literal.testclasses
214         1         2        30         0 spoon.test.logging
215         1         2        33         0 spoon.test.loop
216         4         6        40         3 spoon.test.loop.testclasses
217         1         1         5         0 spoon.test.main.testclasses
218         2        19        24         0 spoon.test.method.testclasses
219         5        22        49         0 spoon.test.method_overriding.testclasses
220         1         2         4         0 spoon.test.method_overriding.testclasses2
221         3         5        21         1 spoon.test.methodreference.testclasses
222         8        23       216         0 spoon.test.model
223         5         4        46         0 spoon.test.model.testclasses
224         1         7       142         0 spoon.test.modifiers
225         4        11        39         0 spoon.test.modifiers.testclasses
226         1         3        65         0 spoon.test.parameters
227         5        24       431         2 spoon.test.parent
228         1         8        28         0 spoon.test.path.testclasses
229         0         0         1         0 spoon.test.pkg
230         1         0         2         0 spoon.test.pkg.name
231         1         1         8         1 spoon.test.pkg.processors
232         1         1         4         0 spoon.test.pkg.test_templates
233         1         0         6         0 spoon.test.pkg.testclasses
234         0         0         1         0 spoon.test.pkg.testclasses.internal
235        28        49       250         4 spoon.test.position.testclasses
236         8        10       179         0 spoon.test.prettyprinter
237        13        31       723         3 spoon.test.prettyprinter.testclasses
238         2         0         8         1 spoon.test.prettyprinter.testclasses.sub
239         1        10       245         0 spoon.test.processing
240         8        13       104         4 spoon.test.processing.processors
241         1         6        24         0 spoon.test.processing.testclasses
242         2         0         8         0 spoon.test.processing.testclasses.test
243         2         0         4         0 spoon.test.processing.testclasses.test.sub
244         2         2        24         0 spoon.test.properties
245         1         6        15         0 spoon.test.properties.testclasses
246         1         1         7         0 spoon.test.query_function.testclasses
247         1         4        67         0 spoon.test.refactoring
248        10         8        36         0 spoon.test.refactoring.parameter.testclasses
249         1         1         7         0 spoon.test.refactoring.processors
250         2         4        20         0 spoon.test.refactoring.testclasses
251        11        40       440         1 spoon.test.reference
252        17        36       124         0 spoon.test.reference.testclasses
253         1         1        18         0 spoon.test.reflect.visitor
254         1         2         7         0 spoon.test.reflect.visitor.testclasses
255         2        23       375         0 spoon.test.replace
256         4         8        31         0 spoon.test.replace.testclasses
257         1         6        52         0 spoon.test.role
258         4         4        16         0 spoon.test.same
259         1         6        96         0 spoon.test.secondaryclasses
260        10         6        80         0 spoon.test.secondaryclasses.testclasses
261         2         6        88         0 spoon.test.serializable
262         1         0         2         0 spoon.test.serializable.testclasses
263         1         8       162         0 spoon.test.signature
264         1         7        80         0 spoon.test.snippets
265         1         4        60         0 spoon.test.sourcePosition
266         1         1         4         0 spoon.test.sourcePosition.testclasses
267         2         5        52         1 spoon.test.staticFieldAccess
268         2         1         8         2 spoon.test.staticFieldAccess.internal
269         1         2        12         1 spoon.test.staticFieldAccess.processors
270         1        17        93         0 spoon.test.staticFieldAccess2
271         9        21        80         0 spoon.test.staticFieldAccess2.testclasses
272         2         2        53         0 spoon.test.strings
273         1         1        11         0 spoon.test.strings.testclasses
274         2         2        16         0 spoon.test.subclass.prettyprinter
275         1         4        61         0 spoon.test.support
276         1        19       390         0 spoon.test.targeted
277         6        15       130         0 spoon.test.targeted.testclasses
278         8        11       177         0 spoon.test.template
279        30        60       364         6 spoon.test.template.testclasses
280         4        17        80         1 spoon.test.template.testclasses.bounds
281         5         8        49         0 spoon.test.template.testclasses.constructors
282         7         8        69         0 spoon.test.template.testclasses.inheritance
283         3         7        37         0 spoon.test.template.testclasses.logger
284        11        32       147         0 spoon.test.template.testclasses.match
285         3         4        24         0 spoon.test.template.testclasses.replace
286         3         5        15         0 spoon.test.template.testclasses.types
287         2        12        33         0 spoon.test.testclasses
288         1        12       165         0 spoon.test.trycatch
289         6         7        55         2 spoon.test.trycatch.testclasses
290         2         0         6         0 spoon.test.trycatch.testclasses.internal
291         2         4        16         0 spoon.test.type.testclasses
292         1         1        26         0 spoon.test.varargs
293         1         1         3         0 spoon.test.varargs.testclasses
294         5        22       275         0 spoon.test.variable
295        13        17       103         1 spoon.test.variable.testclasses
296         2         6        26         2 spoon.test.variable.testclasses.digest
297         1         5       111         0 spoon.test.visibility
298         2         1         5         0 spoon.test.visibility.packageprotected
299         8        14        66         0 spoon.test.visibility.testclasses
300         1         3         7         0 spoon.test.visibility.testclasses.internal
301         5         4        74         2 spoon.test.visitor
302        12        36       276        14 spoon.testing
303         1         3         9         0 spoon.testing.processors
304         2         0         4         0 spoon.testing.testclasses
305         2         9        70         3 spoon.testing.utils
306         4         2        10         0 spoontest
307         2         2        12         0 spoontest.a
308         2         4        16         0 spoontest.b
309         2         2         8         0 spoontest.c
310         2         4        10         0 test
311         2         2        16         0 visibility
    --------- --------- --------- ---------
         1474      8105     61571      2727 Total

 Packages   Classes Functions      NCSS  Javadocs | per
-------------------------------------------------------------
   311.00   1474.00   8105.00  61571.00   2727.00 | Project
               4.74     26.06    197.98      8.77 | Package
                         5.50     41.77      1.85 | Class
                                   7.60      0.34 | Function

 Nr. NCSS Functions Classes Javadocs Class
   1   29         3       0        4 org.objectweb.carol.jndi.spi.CmiContext
   2    2         0       0        1 spoon.test.imports.testclasses.TestWithGenerics
   3    4         1       0        0 spoontest.a.ClassA
   4    3         1       0        0 spoontest.c.ClassC
   5    6         2       0        0 spoontest.b.ClassB
   6    2         0       0        0 C
   7    4         1       0        0 D
   8    3         1       0        0 B
   9    2         0       0        0 C
  10    1         0       0        0 D
  11    4         1       0        0 A
  12    8         3       0        0 spoon.test.reference.ReferencingClass
  13    5         1       0        0 MultipleDeclarationsOfLocalVariable
  14    6         1       0        0 InterfaceEnumRef
  15    2         0       0        0 Foo
  16    3         1       1        0 InterfaceWithEnum
  17   13         1       0        1 net.sf.jabref.collab.ChangeScanner
  18    7         1       1        0 EnumsRef
  19    6         1       0        0 spoon.test.reference.ReferencedClass
  20    4         2       0        2 de.uni_bremen.st.quide.persistence.ratings.IRatingLookUp
  21    2         0       0        0 imported.SeparateInterfaceWithField
  22  731        19       0        2 megamek.client.bot.TestBot
  23   15         6       0        1 org.elasticsearch.action.support.broadcast.BroadcastShardResponse
  24  128        11       2        2 org.elasticsearch.action.support.broadcast.TransportBroadcastAction
  25    1         0       0        0 TestNullable
  26   12         5       1       12 org.eclipse.draw2d.MouseMotionListener
  27  130         9       6        6 org.eclipse.draw2d.parts.ScrollableThumbnail
  28    3         1       0        0 app.Test
  29    1         0       0        0 de.uni_bremen.st.quide.persistence.data.IssueType
  30   17         8       0        0 de.uni_bremen.st.quide.persistence.data.entities.Issue
  31    4         2       0        0 test.ExtendsObject
  32  398        66       0       67 org.apache.commons.math4.linear.ArrayRealVector
  33   31         4       1        1 org.ehcache.core.SpecIterator
  34    4         1       0        0 FieldAccessRes
  35 1090        41       8       48 daikon.FileIO
  36    6         1       1        0 com.example.Foo
  37   28         5       1        2 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment
  38    2         1       0        1 com.cristal.ircica.applicationcolis.userinterface.fragments.CompletableFragment
  39 1013        24       4       22 daikon.Daikon
  40   11         3       0        1 org.ethack.orwall.BackgroundProcess
  41   70         4       4        0 org.ethack.orwall.PreferencesActivity
  42    3         1       0        0 spoon.test.same.B
  43    3         1       0        0 spoon.test.same.A
  44  203        18       3       17 org.elasticsearch.tasks.TaskManager
  45    3         1       0        0 Demo3
  46    6         1       1        0 Foo2
  47 1305       135      13       45 org.sat4j.minisat.core.Solver
  48  267         6       2        4 daikon.tools.InvariantChecker
  49    7         3       0        0 UnknownSuperClass
  50   34         7       1        0 it.feio.android.omninotes.models.Attachment
  51    4         1       0        0 Demo4
  52    3         1       0        0 Demo
  53    6         1       0        0 UnknownCalls
  54   88        18       4        6 com.duckduckgo.mobile.android.util.TorIntegration
  55    9         2       0        0 org.bottiger.podcast.adapters.SubscriptionAdapter$3
  56    1         0       0        0 Simple
  57    6         1       0        0 SkipException
  58    6         1       1        0 A
  59    4         1       1        0 Demo5
  60    3         0       0        0 Foo4
  61    3         1       0        1 org.springframework.beans.support.PropertyComparator
  62    6         1       1        0 A3
  63    5         1       1        0 visibility.YamlRepresenter
  64   38         3       0        4 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase
  65    1         0       0        0 fr.inria.A
  66    5         2       0        3 spoon.test.comment.testclasses.JavaDocComment
  67    4         1       0        0 Caller
  68    2         0       0        0 SomeClass
  69    2         1       0        0 ImportAndExtendWithPackageName
  70    4         1       0        0 FooNoClassPath
  71    5         2       0        0 fr.inria.AnotherMissingImport
  72    2         0       0        0 fr.inria.MissingImport
  73  161        18       2       12 IndexWriter
  74    5         2       0        0 snippet.test.resources.SnippetResources
  75    3         1       0        0 Panini
  76    6         1       0        0 spoon.test.subclass.prettyprinter.DefaultPrettyPrinterExample
  77    1         0       0        0 spoon.test.prettyprinter.DefaultPrettyPrinterDependency
  78   28         0       2        0 com.squareup.javapoet.AnnotationSpecTest
  79  199        15       1        9 org.eclipse.draw2d.text.FlowUtilities
  80   13         3       0        0 Foo
  81    2         0       0        0 Toto
  82   11         4       0        0 Foo
  83   23         3       0        0 Foo
  84    5         1       1        0 spoon.test.variable.Tacos
  85    3         1       0        0 fr.simplemodule.pack.SimpleClass
  86    1         0       0        0 packfoo.FooClass
  87    1         0       0        0 packbar.BarClass
  88    2         0       0        0 spoon.test.processing.testclasses.test.B
  89    1         0       0        0 spoon.test.processing.testclasses.test.sub.A
  90  179         1       0        0 spoon.test.prettyprinter.testclasses.ComplexClass
  91    7         0       1        0 spoon.test.prettyprinter.NestedCallable
  92    3         1       0        0 spoon.test.prettyprinter.NestedSuperCall
  93   16         1       0        0 fr.inria.sandbox.Main
  94    3         1       0        1 spoon.test.imports.testclasses2.apachetestsuite.LangTestSuite
  95   12         3       0        4 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3
  96    3         1       0        1 spoon.test.imports.testclasses2.apachetestsuite.enums.EnumTestSuite
  97   12         3       0        4 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod
  98    3         1       0        1 spoon.test.imports.testclasses2.apachetestsuite.enum2.EnumTestSuite
  99   12         3       0        4 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite
 100    5         0       1        0 spoon.test.imports.testclasses2.StaticWithNested
 101    1         0       0        1 spoon.test.imports.testclasses2.toto.ImportSameName
 102    5         1       1        0 spoon.test.imports.testclasses2.Interners
 103    1         0       0        1 spoon.test.imports.testclasses2.ImportSameName
 104    2         0       0        1 spoon.test.imports.testclasses2.JavaLangConflict
 105    8         0       3        0 spoon.test.imports.testclasses2.AbstractMapBasedMultimap
 106    3         1       0        0 spoon.test.exceptions.ClassWithError
 107    2         1       0        0 org.myorganization.MyInterface
 108    4         2       0        0 fr.acme.MyClass
 109    2         1       0        0 org.myorganization.pack.MyAbstractClass
 110    2         0       0        0 org.acme.AnotherClass
 111    1         0       0        0 spoon.test.exceptions.Bar
 112    1         0       0        0 spoon.test.exceptions.Foo
 113    1         0       0        0 spoon.test.exceptions.Foo
 114    9         1       0        0 spoon.test.visitor.Foo
 115    2         0       0        0 ConditionalRes
 116   12         1       0        0 Assignments
 117    1         0       0        0 Bar
 118    1         0       0        0 Foo
 119    6         1       0        0 spoon.test.intercession.insertBefore.InsertBeforeExample2
 120    7         1       0        0 spoon.test.loop.testclasses.Foo
 121    2         1       0        0 spoontest.Foo
 122    1         0       0        0 spoontest.IFoo
 123    3         0       0        0 jdtimportbuilder.ItfImport
 124    5         1       1        0 $Poor$Name
 125    3         1       0        1 compilation.SimpleProcessor
 126    3         1       0        0 compilation.Bar
 127    1         0       0        0 compilation.FooEx
 128    2         1       0        1 compilation.IBar
 129   23         4       1        0 Tacos
 130    2         0       0        0 Test
 131   49         3       0        0 spoon.JarLauncherTest
 132   63         7       0        5 spoon.JarLauncher
 133    6         2       0        0 spoon.decompiler.FernflowerDecompiler
 134    6         2       0        0 spoon.decompiler.CFRDecompiler
 135   17         5       0        0 spoon.decompiler.MultiTypeTransformer
 136    2         1       0        1 spoon.decompiler.Decompiler
 137   29         3       0        4 org.objectweb.carol.jndi.spi.CmiContext
 138    2         0       0        1 spoon.test.imports.testclasses.TestWithGenerics
 139    4         1       0        0 spoontest.a.ClassA
 140    3         1       0        0 spoontest.c.ClassC
 141    6         2       0        0 spoontest.b.ClassB
 142    2         0       0        0 C
 143    4         1       0        0 D
 144    3         1       0        0 B
 145    2         0       0        0 C
 146    1         0       0        0 D
 147    4         1       0        0 A
 148    8         3       0        0 spoon.test.reference.ReferencingClass
 149    5         1       0        0 MultipleDeclarationsOfLocalVariable
 150    6         1       0        0 InterfaceEnumRef
 151    2         0       0        0 Foo
 152    3         1       1        0 InterfaceWithEnum
 153   13         1       0        1 net.sf.jabref.collab.ChangeScanner
 154    7         1       1        0 EnumsRef
 155    6         1       0        0 spoon.test.reference.ReferencedClass
 156    4         2       0        2 de.uni_bremen.st.quide.persistence.ratings.IRatingLookUp
 157    2         0       0        0 imported.SeparateInterfaceWithField
 158  731        19       0        2 megamek.client.bot.TestBot
 159   15         6       0        1 org.elasticsearch.action.support.broadcast.BroadcastShardResponse
 160  128        11       2        2 org.elasticsearch.action.support.broadcast.TransportBroadcastAction
 161    1         0       0        0 TestNullable
 162   12         5       1       12 org.eclipse.draw2d.MouseMotionListener
 163  130         9       6        6 org.eclipse.draw2d.parts.ScrollableThumbnail
 164    3         1       0        0 app.Test
 165    1         0       0        0 de.uni_bremen.st.quide.persistence.data.IssueType
 166   17         8       0        0 de.uni_bremen.st.quide.persistence.data.entities.Issue
 167    4         2       0        0 test.ExtendsObject
 168  398        66       0       67 org.apache.commons.math4.linear.ArrayRealVector
 169   31         4       1        1 org.ehcache.core.SpecIterator
 170    4         1       0        0 FieldAccessRes
 171 1090        41       8       48 daikon.FileIO
 172    6         1       1        0 com.example.Foo
 173   28         5       1        2 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment
 174    2         1       0        1 com.cristal.ircica.applicationcolis.userinterface.fragments.CompletableFragment
 175 1013        24       4       22 daikon.Daikon
 176   11         3       0        1 org.ethack.orwall.BackgroundProcess
 177   70         4       4        0 org.ethack.orwall.PreferencesActivity
 178    3         1       0        0 spoon.test.same.B
 179    3         1       0        0 spoon.test.same.A
 180  203        18       3       17 org.elasticsearch.tasks.TaskManager
 181    3         1       0        0 Demo3
 182    6         1       1        0 Foo2
 183 1305       135      13       45 org.sat4j.minisat.core.Solver
 184  267         6       2        4 daikon.tools.InvariantChecker
 185    7         3       0        0 UnknownSuperClass
 186   34         7       1        0 it.feio.android.omninotes.models.Attachment
 187    4         1       0        0 Demo4
 188    3         1       0        0 Demo
 189    6         1       0        0 UnknownCalls
 190   88        18       4        6 com.duckduckgo.mobile.android.util.TorIntegration
 191    9         2       0        0 org.bottiger.podcast.adapters.SubscriptionAdapter$3
 192    1         0       0        0 Simple
 193    6         1       0        0 SkipException
 194    6         1       1        0 A
 195    4         1       1        0 Demo5
 196    3         0       0        0 Foo4
 197    3         1       0        1 org.springframework.beans.support.PropertyComparator
 198    6         1       1        0 A3
 199    5         1       1        0 visibility.YamlRepresenter
 200   38         3       0        4 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase
 201    1         0       0        0 fr.inria.A
 202    5         2       0        3 spoon.test.comment.testclasses.JavaDocComment
 203    4         1       0        0 Caller
 204    2         0       0        0 SomeClass
 205    2         1       0        0 ImportAndExtendWithPackageName
 206    4         1       0        0 FooNoClassPath
 207    5         2       0        0 fr.inria.AnotherMissingImport
 208    2         0       0        0 fr.inria.MissingImport
 209  161        18       2       12 IndexWriter
 210    5         2       0        0 snippet.test.resources.SnippetResources
 211    3         1       0        0 Panini
 212    6         1       0        0 spoon.test.subclass.prettyprinter.DefaultPrettyPrinterExample
 213    1         0       0        0 spoon.test.prettyprinter.DefaultPrettyPrinterDependency
 214   28         0       2        0 com.squareup.javapoet.AnnotationSpecTest
 215  199        15       1        9 org.eclipse.draw2d.text.FlowUtilities
 216   13         3       0        0 Foo
 217    2         0       0        0 Toto
 218   11         4       0        0 Foo
 219   23         3       0        0 Foo
 220    5         1       1        0 spoon.test.variable.Tacos
 221    3         1       0        0 fr.simplemodule.pack.SimpleClass
 222    1         0       0        0 packfoo.FooClass
 223    1         0       0        0 packbar.BarClass
 224    2         0       0        0 spoon.test.processing.testclasses.test.B
 225    1         0       0        0 spoon.test.processing.testclasses.test.sub.A
 226  179         1       0        0 spoon.test.prettyprinter.testclasses.ComplexClass
 227    7         0       1        0 spoon.test.prettyprinter.NestedCallable
 228    3         1       0        0 spoon.test.prettyprinter.NestedSuperCall
 229   16         1       0        0 fr.inria.sandbox.Main
 230    3         1       0        1 spoon.test.imports.testclasses2.apachetestsuite.LangTestSuite
 231   12         3       0        4 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3
 232    3         1       0        1 spoon.test.imports.testclasses2.apachetestsuite.enums.EnumTestSuite
 233   12         3       0        4 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod
 234    3         1       0        1 spoon.test.imports.testclasses2.apachetestsuite.enum2.EnumTestSuite
 235   12         3       0        4 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite
 236    5         0       1        0 spoon.test.imports.testclasses2.StaticWithNested
 237    1         0       0        1 spoon.test.imports.testclasses2.toto.ImportSameName
 238    5         1       1        0 spoon.test.imports.testclasses2.Interners
 239    1         0       0        1 spoon.test.imports.testclasses2.ImportSameName
 240    2         0       0        1 spoon.test.imports.testclasses2.JavaLangConflict
 241    8         0       3        0 spoon.test.imports.testclasses2.AbstractMapBasedMultimap
 242    3         1       0        0 spoon.test.exceptions.ClassWithError
 243    2         1       0        0 org.myorganization.MyInterface
 244    4         2       0        0 fr.acme.MyClass
 245    2         1       0        0 org.myorganization.pack.MyAbstractClass
 246    2         0       0        0 org.acme.AnotherClass
 247    1         0       0        0 spoon.test.exceptions.Bar
 248    1         0       0        0 spoon.test.exceptions.Foo
 249    1         0       0        0 spoon.test.exceptions.Foo
 250    9         1       0        0 spoon.test.visitor.Foo
 251    2         0       0        0 ConditionalRes
 252   12         1       0        0 Assignments
 253    1         0       0        0 Bar
 254    1         0       0        0 Foo
 255    6         1       0        0 spoon.test.intercession.insertBefore.InsertBeforeExample2
 256    7         1       0        0 spoon.test.loop.testclasses.Foo
 257    2         1       0        0 spoontest.Foo
 258    1         0       0        0 spoontest.IFoo
 259    3         0       0        0 jdtimportbuilder.ItfImport
 260    5         1       1        0 $Poor$Name
 261    3         1       0        1 compilation.SimpleProcessor
 262    3         1       0        0 compilation.Bar
 263    1         0       0        0 compilation.FooEx
 264    2         1       0        1 compilation.IBar
 265   23         4       1        0 Tacos
 266    2         0       0        0 Test
 267   17         3       1        0 spoon.generating.ReplacementVisitorGenerator
 268   55         2       1        0 spoon.generating.CtBiScannerGenerator
 269    3         1       0        1 spoon.generating.meta.ModelRoleHandlerTemplate
 270    1         0       0        0 spoon.generating.meta.$Role$
 271    1         0       0        0 spoon.generating.meta.$TargetType$
 272   25        13       0        0 spoon.generating.meta.AbstractHandler
 273    4         2       0        0 spoon.generating.meta.Node
 274    7         3       0        0 spoon.generating.meta.RoleHandlerTemplate
 275    1         0       0        0 spoon.generating.meta.ValueType
 276   11         3       0        1 spoon.generating.clone.CloneBuilderTemplate
 277    5         1       0        0 spoon.generating.clone.SetterTemplateMatcher
 278    4         1       0        0 spoon.generating.clone.GetterTemplateMatcher
 279    8         2       0        1 spoon.generating.clone.CloneVisitorTemplate
 280   80         7       0        1 spoon.generating.replace.ReplacementVisitor
 281  144        11       2        0 spoon.generating.replace.ReplaceScanner
 282   16         5       0        1 spoon.generating.scanner.CtBiScannerTemplate
 283    4         1       0        0 spoon.generating.scanner.PeekElementTemplate
 284   49         4       0        0 spoon.LauncherTest
 285    5         1       0        0 spoon.test.query_function.testclasses.VariableReferencesFromStaticMethod
 286   64         6       1        0 spoon.test.secondaryclasses.ClassesTest
 287    1         0       0        0 spoon.test.secondaryclasses.testclasses.E
 288    1         0       0        0 spoon.test.secondaryclasses.testclasses.I
 289    1         0       0        0 spoon.test.secondaryclasses.testclasses.K
 290    9         3       0        0 spoon.test.secondaryclasses.testclasses.Secondary
 291    3         0       1        0 spoon.test.secondaryclasses.testclasses.TopLevel
 292    9         1       1        0 spoon.test.secondaryclasses.testclasses.PrivateInnerClasses
 293    3         0       2        0 spoon.test.secondaryclasses.testclasses.ClassWithInternalPublicClassOrInterf
 294    3         0       0        0 spoon.test.secondaryclasses.testclasses.Test
 295    9         2       3        0 spoon.test.secondaryclasses.testclasses.AnonymousClass
 296   22         0       1        0 spoon.test.secondaryclasses.testclasses.Pozole
 297    2         1       0        0 spoon.test.generics.testclasses3.ClassThatBindsAGenericType
 298    4         1       0        0 spoon.test.generics.testclasses3.GenericConstructor
 299    7         3       0        0 spoon.test.generics.testclasses3.GenericMethodCallWithExtend
 300    1         0       0        0 spoon.test.generics.testclasses3.ACLass
 301   39         1       1        0 spoon.test.generics.testclasses3.BugCollection
 302    1         0       0        0 spoon.test.generics.testclasses3.ComparableComparator
 303    2         1       0        0 spoon.test.generics.testclasses3.Bar
 304    7         1       1        0 spoon.test.generics.testclasses3.Foo
 305    3         1       0        0 spoon.test.generics.testclasses3.InstanceOfMapEntryGeneric
 306    2         1       0        0 spoon.test.generics.testclasses3.ClassThatDefinesANewTypeArgument
 307   13         5       0        6 spoon.test.generics.testclasses3.ComparableComparatorBug
 308    3         2       0        0 spoon.test.generics.testclasses3.SimilarSignatureMethodes
 309    3         1       0        0 spoon.test.generics.testclasses4.C
 310    2         1       0        0 spoon.test.generics.testclasses4.A
 311    2         1       0        0 spoon.test.generics.testclasses4.B
 312    5         2       0        0 spoon.test.generics.testclasses2.LikeCtClassImpl
 313    1         0       0        0 spoon.test.generics.testclasses2.AnType
 314    3         2       0        0 spoon.test.generics.testclasses2.LikeCtClass
 315    2         1       0        0 spoon.test.generics.testclasses2.ISameSignature
 316    2         1       0        0 spoon.test.generics.testclasses2.SameSignature2
 317    2         1       0        0 spoon.test.generics.testclasses2.ISameSignature3
 318    2         1       0        0 spoon.test.generics.testclasses2.SameSignature3
 319    2         1       0        0 spoon.test.generics.testclasses.IBurritos
 320    5         1       1        0 spoon.test.generics.testclasses.OuterTypeParameter
 321    4         2       0        0 spoon.test.generics.testclasses.Paella
 322    4         2       0        1 spoon.test.generics.testclasses.SameSignature
 323    4         1       1        0 spoon.test.generics.testclasses.Panini
 324    1         0       0        0 spoon.test.generics.testclasses.ITacos
 325    5         0       2        0 spoon.test.generics.testclasses.Orange
 326    2         1       0        0 spoon.test.generics.testclasses.Lunch
 327    4         3       0        1 spoon.test.generics.testclasses.rxjava.Subscriber
 328    1         0       0        1 spoon.test.generics.testclasses.rxjava.Subject
 329    3         1       0        1 spoon.test.generics.testclasses.rxjava.Observable
 330    7         4       0        1 spoon.test.generics.testclasses.rxjava.ToNotificationSubscriber
 331    1         0       0        1 spoon.test.generics.testclasses.rxjava.Processor
 332    6         4       0        1 spoon.test.generics.testclasses.rxjava.BehaviorSubject
 333    2         1       0        1 spoon.test.generics.testclasses.rxjava.Publisher
 334    1         0       0        1 spoon.test.generics.testclasses.rxjava.Try
 335    3         2       0        1 spoon.test.generics.testclasses.FakeTpl
 336   10         2       1        1 spoon.test.generics.testclasses.ExtendedPaella
 337    2         0       1        0 spoon.test.generics.testclasses.Banana
 338   16         3       2        0 spoon.test.generics.testclasses.CelebrationLunch
 339    2         0       1        0 spoon.test.generics.testclasses.SubCelebrationLunch
 340    3         0       1        0 spoon.test.generics.testclasses.SubSubCelebrationLunch
 341    9         0       3        0 spoon.test.generics.testclasses.Spaghetti
 342    3         1       0        0 spoon.test.generics.testclasses.EnumSetOf
 343   55         6       0        0 spoon.test.executable.ExecutableRefTest
 344    2         1       0        1 spoon.test.executable.testclasses.MyIntf
 345    4         1       1        0 spoon.test.executable.testclasses.WithEnum
 346    3         0       0        0 spoon.test.executable.testclasses.AnonymousExecutableSample
 347    6         3       0        0 spoon.test.executable.testclasses.ExecutableRefTestSource
 348    9         4       0        0 spoon.test.executable.testclasses.A
 349    8         3       0        0 spoon.test.executable.testclasses.Pozole
 350   33         3       1        0 spoon.test.filters.CUFilterTest
 351    2         1       0        0 spoon.test.filters.testclasses.Honey
 352   11         5       1        0 spoon.test.filters.testclasses.Tostada
 353    9         3       1        0 spoon.test.filters.testclasses.AbstractTostada
 354    6         2       0        0 spoon.test.filters.testclasses.Tacos
 355   11         2       0        0 spoon.test.filters.testclasses.Foo
 356    4         1       0        0 spoon.test.filters.testclasses.SubTostada
 357   25         7       0        0 spoon.test.filters.testclasses.FooLine
 358    4         2       0        0 spoon.test.filters.testclasses.Antojito
 359    1         0       0        0 spoon.test.filters.testclasses.IFoo
 360    2         1       0        0 spoon.test.filters.testclasses.ITostada
 361    8         2       0        0 spoon.test.filters.testclasses.FieldAccessFilterTacos
 362   54         7       0        0 spoon.test.snippets.SnippetTest
 363   10         1       0        0 spoon.test.OutputTypeTest
 364    5         0       0        0 spoon.test.fieldaccesses.testclasses.B
 365   17         5       0        0 spoon.test.fieldaccesses.testclasses.Mouse
 366    7         1       0        0 spoon.test.fieldaccesses.testclasses.BUG20160112
 367    5         1       0        0 spoon.test.fieldaccesses.testclasses.TargetedAccessPosition
 368   20         3       3        0 spoon.test.fieldaccesses.testclasses.Panini
 369    2         1       0        0 spoon.test.fieldaccesses.testclasses.Kuu
 370    6         0       1        0 spoon.test.fieldaccesses.testclasses.internal.Bar
 371    3         0       1        0 spoon.test.fieldaccesses.testclasses.internal.Foo
 372   14         4       1        0 spoon.test.fieldaccesses.testclasses.Tacos
 373    2         0       1        0 spoon.test.fieldaccesses.testclasses.Mole
 374    4         1       0        0 spoon.test.fieldaccesses.testclasses.BCUBug20140402
 375    3         0       0        0 spoon.test.fieldaccesses.testclasses.A
 376   11         1       3        0 spoon.test.fieldaccesses.testclasses.Pozole
 377    3         1       0        0 spoon.test.change.testclasses.SubjectOfChange
 378   27         1       0        0 spoon.test.strings.StringLiteralTest
 379   10         1       0        0 spoon.test.strings.testclasses.Main
 380    9         1       0        0 spoon.test.strings.StringTest
 381  123         7       0        0 spoon.test.modifiers.TestModifiers
 382    7         1       0        0 spoon.test.modifiers.testclasses.MethodVarArgs
 383   10         4       0        0 spoon.test.modifiers.testclasses.ConcreteClass
 384    5         2       0        0 spoon.test.modifiers.testclasses.StaticMethod
 385   11         4       0        0 spoon.test.modifiers.testclasses.AbstractClass
 386   37         6       0        0 spoon.test.role.TestCtRole
 387   93         5       1        0 spoon.test.literal.LiteralTest
 388   10         0       0        0 spoon.test.literal.testclasses.Tacos
 389   10         0       0        0 spoon.test.literal.testclasses.EscapedLiteral
 390    1         0       0        0 spoon.test.ctType.testclasses.ArrayList
 391    1         0       0        0 spoon.test.ctType.testclasses.List
 392    1         0       0        0 spoon.test.ctType.testclasses.ListOfA1
 393    1         0       0        0 spoon.test.ctType.testclasses.ListOfA3
 394    1         0       0        0 spoon.test.ctType.testclasses.ListOfX
 395   54         1       0        0 spoon.test.ctType.testclasses.SubtypeModel
 396   24         7       2        0 spoon.test.ctType.testclasses.ErasureModelA
 397    2         1       0        0 spoon.test.ctType.testclasses.K
 398    3         1       0        0 spoon.test.ctType.testclasses.O
 399    3         1       0        0 spoon.test.ctType.testclasses.P
 400    1         0       0        0 spoon.test.ctType.testclasses.W
 401    2         1       0        0 spoon.test.ctType.testclasses.X
 402    1         0       0        0 spoon.test.ctType.testclasses.Y
 403    2         1       0        0 spoon.test.ctType.testclasses.Z
 404  108        12       0        1 spoon.test.ctType.CtTypeParameterTest
 405    3         2       0        0 spoon.test.method_overriding.testclasses2.ObjectInterface
 406   10         6       0        0 spoon.test.method_overriding.testclasses.B
 407   11         6       0        0 spoon.test.method_overriding.testclasses.C
 408    7         4       0        0 spoon.test.method_overriding.testclasses.D
 409    1         0       0        0 spoon.test.method_overriding.testclasses.IA
 410    9         6       0        0 spoon.test.method_overriding.testclasses.A
 411  127         8       1        0 spoon.test.signature.SignatureTest
 412  124        14       0        0 spoon.test.delete.DeleteTest
 413   33         6       1        0 spoon.test.delete.testclasses.Adobada
 414   83         5       2        0 spoon.test.visibility.VisibilityTest
 415    2         1       0        0 spoon.test.visibility.packageprotected.AccessibleClassFromNonAccessibleInterf
 416    1         0       0        0 spoon.test.visibility.packageprotected.NonAccessibleInterf
 417   13         2       0        0 spoon.test.visibility.testclasses.UseDouble
 418    3         1       0        0 spoon.test.visibility.testclasses.MethodeWithNonAccessibleTypeArgument
 419    6         3       0        0 spoon.test.visibility.testclasses.internal.Double
 420    6         3       0        0 spoon.test.visibility.testclasses.Float
 421    3         1       0        0 spoon.test.visibility.testclasses.Burritos
 422    2         0       0        0 spoon.test.visibility.testclasses.Tacos
 423    2         0       1        0 spoon.test.visibility.testclasses.Foo
 424   15         4       3        0 spoon.test.visibility.testclasses.A2
 425   13         3       3        0 spoon.test.visibility.testclasses.A
 426   39         2       0        0 spoon.test.variable.InferredVariableTest
 427    4         1       0        0 spoon.test.variable.testclasses.BurritosFielded
 428   19         6       0        1 spoon.test.variable.testclasses.digest.DigestUtil
 429    3         0       0        1 spoon.test.variable.testclasses.digest.MessageDigest
 430   14         3       1        0 spoon.test.variable.testclasses.MultiBurritos
 431    4         1       0        0 spoon.test.variable.testclasses.BurritosWithTryCatch
 432    4         1       0        0 spoon.test.variable.testclasses.ArrayAccessSample
 433    4         1       0        0 spoon.test.variable.testclasses.StackedAssignmentSample
 434    6         1       0        0 spoon.test.variable.testclasses.RHSSample
 435    8         1       1        0 spoon.test.variable.testclasses.Tacos
 436    6         1       0        0 spoon.test.variable.testclasses.Burritos
 437    6         2       0        1 spoon.test.variable.testclasses.ForStaticVariables
 438    9         1       0        0 spoon.test.variable.testclasses.FieldAccessSample
 439    6         1       0        0 spoon.test.variable.testclasses.VariableAccessSample
 440    7         2       1        0 spoon.test.variable.testclasses.BurritosStaticMethod
 441    4         1       0        0 spoon.test.variable.testclasses.BurritosWithLoop
 442   72         8       9        0 spoon.test.variable.AccessTest
 443   87        10       0        0 spoon.test.variable.AccessFullyQualifiedFieldTest
 444  201        10       4        0 spoon.test.processing.ProcessingTest
 445    5         1       0        0 spoon.test.processing.processors.ArrayResizeProcessor
 446   17         2       0        0 spoon.test.processing.processors.TestProcessor
 447   23         3       0        0 spoon.test.processing.processors.RenameProcessor
 448    3         1       0        1 spoon.test.processing.processors.CtClassProcessor
 449    7         2       0        0 spoon.test.processing.processors.MyProcessor
 450    6         2       0        1 spoon.test.processing.processors.GenericCtTypeProcessor
 451    3         1       0        1 spoon.test.processing.processors.CtTypeProcessor
 452    3         1       0        1 spoon.test.processing.processors.CtInterfaceProcessor
 453   23         6       5        0 spoon.test.processing.testclasses.SampleForInsertBefore
 454    1         0       0        1 spoon.test.comment.testclasses.WindowsEOL
 455    9         1       0        0 spoon.test.comment.testclasses.CommentsOnStatements
 456   31         5       0        1 spoon.test.comment.testclasses.BlockComment
 457    4         1       0        0 spoon.test.comment.testclasses.Comment2
 458    2         0       0        0 spoon.test.comment.testclasses.WildComments
 459    1         0       0        1 spoon.test.comment.testclasses.OtherJavaDoc
 460    5         0       2        1 spoon.test.comment.testclasses.TestClassWithComments
 461    4         1       0        0 spoon.test.comment.testclasses.EmptyStatementComments
 462    5         2       0        3 spoon.test.comment.testclasses.JavaDocComment
 463    2         1       0        2 spoon.test.comment.testclasses.JavaDocEmptyCommentAndTags
 464   35         5       0        0 spoon.test.comment.testclasses.InlineComment
 465    6         1       0        0 spoon.test.comment.testclasses.WithIfBlock
 466    3         1       0        0 spoon.test.comment.testclasses.Comment1
 467    1         0       0        0 spoon.test.comment.testclasses.EnumClass
 468   30         5       1        0 spoon.test.casts.CastTest
 469    2         1       0        0 spoon.test.position.testclasses.FooAbstractMethod
 470    1         0       0        1 spoon.test.position.testclasses.FooClazz2
 471    4         2       0        0 spoon.test.position.testclasses.SomeEnum
 472   42         6       0        0 spoon.test.position.testclasses.FooLabel
 473   11         3       0        0 spoon.test.position.testclasses.PositionParameterTypeWithReference
 474   16         1       1        0 spoon.test.position.testclasses.FooSwitch
 475   17         2       0        0 spoon.test.position.testclasses.FooStatement
 476    6         1       0        0 spoon.test.position.testclasses.FooForEach
 477    4         0       0        0 spoon.test.position.testclasses.TestSimpleClass
 478    4         1       1        0 spoon.test.position.testclasses.AnnonymousClassNewIface
 479    1         0       0        0 spoon.test.position.testclasses.FooClazz
 480    4         0       0        0 spoon.test.position.testclasses.TestSingleLineClass
 481    1         0       0        0 spoon.test.position.testclasses.FooInterface
 482    1         0       0        0 spoon.test.position.testclasses.CompilationUnitComments
 483    1         0       0        0 spoon.test.position.testclasses.FooClazzWithComments
 484    9         4       0        1 spoon.test.position.testclasses.FooGeneric
 485    1         0       0        0 spoon.test.position.testclasses.Foo
 486   16         5       0        1 spoon.test.position.testclasses.FooSourceFragments
 487    2         1       0        0 spoon.test.position.testclasses.TypeParameter
 488    9         8       0        0 spoon.test.position.testclasses.ArrayArgParameter
 489    7         1       0        0 spoon.test.position.testclasses.ImplicitBlock
 490    2         1       0        0 spoon.test.position.testclasses.NoMethodModifiers
 491    6         1       0        0 spoon.test.position.testclasses.FooField
 492    2         1       0        0 spoon.test.position.testclasses.FooEnum
 493   10         1       0        0 spoon.test.position.testclasses.Expressions
 494    7         3       0        0 spoon.test.position.testclasses.PositionTry
 495   10         1       0        0 spoon.test.position.testclasses.CatchPosition
 496    9         5       0        1 spoon.test.position.testclasses.FooMethod
 497   26         8       1        0 spoon.test.path.testclasses.Foo
 498  129        12       1        0 spoon.test.trycatch.TryCatchTest
 499   10         1       2        0 spoon.test.trycatch.testclasses.RethrowingClass
 500    2         1       0        2 spoon.test.trycatch.testclasses.Statement
 501   10         2       0        0 spoon.test.trycatch.testclasses.TryCatchResourceClass
 502    2         0       0        0 spoon.test.trycatch.testclasses.internal.MyException2
 503    2         0       0        0 spoon.test.trycatch.testclasses.internal.MyException
 504    8         1       1        0 spoon.test.trycatch.testclasses.Bar
 505    3         1       0        0 spoon.test.trycatch.testclasses.Foo
 506    8         1       0        0 spoon.test.trycatch.testclasses.Main
 507   24         3       0        0 spoon.test.serializable.SourcePositionTest
 508   33         3       0        0 spoon.test.serializable.SerializableTest
 509    1         0       0        0 spoon.test.serializable.testclasses.Dummy
 510   97        14       2        0 spoon.test.constructorcallnewclass.NewClassTest
 511   65        10       1        0 spoon.test.constructorcallnewclass.ConstructorCallTest
 512    4         1       0        0 spoon.test.constructorcallnewclass.testclasses.Panini
 513    7         3       0        0 spoon.test.constructorcallnewclass.testclasses.Bar
 514   21         4       7        0 spoon.test.constructorcallnewclass.testclasses.Foo
 515   45         1      13        1 spoon.test.constructorcallnewclass.testclasses.Foo2
 516   52         4       0        0 spoon.test.prettyprinter.LinesTest
 517   54         4       0        0 spoon.test.prettyprinter.QualifiedThisRefTest
 518    9         1       1        0 spoon.test.prettyprinter.testclasses.QualifiedThisRef
 519    4         1       0        1 spoon.test.prettyprinter.testclasses.ImportStatic
 520   34         2       1        1 spoon.test.prettyprinter.testclasses.Validation
 521   49        15       0        0 spoon.test.prettyprinter.testclasses.FooCasper
 522    4         2       0        0 spoon.test.prettyprinter.testclasses.ArrayRealVector
 523    5         2       0        0 spoon.test.prettyprinter.testclasses.AClass
 524    3         0       0        1 spoon.test.prettyprinter.testclasses.sub.Constants
 525    3         0       1        0 spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision
 526   43         1       4        1 spoon.test.prettyprinter.testclasses.Rule
 527    2         0       0        0 spoon.test.prettyprinter.testclasses.A
 528    1         0       0        0 spoon.test.prettyprinter.testclasses.B
 529    4         1       0        0 spoon.test.prettyprinter.testclasses.MissingVariableDeclaration
 530   25         4       3        0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision
 531    2         1       0        0 spoon.test.invocations.testclasses.Bar
 532    4         1       0        0 spoon.test.invocations.testclasses.Foo
 533    6         2       0        0 spoon.test.reflect.visitor.testclasses.ReferenceQueryTestEnum
 534    7         1       0        0 spoon.test.reflect.visitor.ReferenceQueryTest
 535   42         2       0        0 spoon.test.enums.EnumsTypeTest
 536    5         0       4        0 spoon.test.enums.testclasses.NestedEnums
 537    4         1       0        0 spoon.test.enums.testclasses.Regular
 538    2         1       0        0 spoon.test.enums.testclasses.Burritos
 539    1         0       0        0 spoon.test.enums.testclasses.Foo
 540    3         1       0        0 spoon.test.enums.testclasses.EnumWithMembers
 541    2         1       0        0 spoon.test.enums.testclasses.Performable
 542   25         2       0        0 spoon.test.template.TemplateReplaceReturnTest
 543   12         1       0        0 spoon.test.template.TemplateEnumAccessTest
 544   17         2       0        0 spoon.test.template.TemplateArrayAccessTest
 545    9         3       0        0 spoon.test.template.testclasses.InvocationSubstitutionByExpressionTemplate
 546    8         1       1        0 spoon.test.template.testclasses.FieldAccessOfInnerClassTemplate
 547    3         1       0        0 spoon.test.template.testclasses.Params
 548    8         2       0        0 spoon.test.template.testclasses.SubstituteLiteralTemplate
 549   23         7       0        0 spoon.test.template.testclasses.bounds.CheckBound
 550    9         2       0        1 spoon.test.template.testclasses.bounds.CheckBoundTemplate
 551    2         1       0        0 spoon.test.template.testclasses.bounds.FooBound
 552   28         7       0        0 spoon.test.template.testclasses.bounds.CheckBoundMatcher
 553    9         1       0        0 spoon.test.template.testclasses.LoggerModel
 554    5         0       1        0 spoon.test.template.testclasses.InnerClassTemplate
 555   31         6       1        0 spoon.test.template.testclasses.NtonCodeTemplate
 556    1         0       0        0 spoon.test.template.testclasses._TargetType_
 557    2         1       0        0 spoon.test.template.testclasses.types.AnIfaceModel
 558    7         4       0        0 spoon.test.template.testclasses.types.AClassModel
 559    1         0       0        0 spoon.test.template.testclasses.types.AnEnumModel
 560    6         0       0        1 spoon.test.template.testclasses.AnotherFieldAccessTemplate
 561    5         2       0        0 spoon.test.template.testclasses.logger.Logger
 562    8         3       0        0 spoon.test.template.testclasses.logger.LoggerTemplateProcessor
 563   13         2       0        0 spoon.test.template.testclasses.logger.LoggerTemplate
 564   17         1       0        0 spoon.test.template.testclasses.C
 565    8         2       0        0 spoon.test.template.testclasses.match.MatchWithParameterCondition
 566    9         2       0        0 spoon.test.template.testclasses.match.MatchForEach
 567    7         6       0        0 spoon.test.template.testclasses.match.MatchMap
 568    8         2       0        0 spoon.test.template.testclasses.match.MatchWithParameterType
 569   16         2       0        0 spoon.test.template.testclasses.match.MatchIfElse
 570    6         1       0        0 spoon.test.template.testclasses.match.GenerateIfElse
 571   15         2       0        0 spoon.test.template.testclasses.match.MatchMultiple2
 572   10         6       0        0 spoon.test.template.testclasses.match.MatchThrowables
 573    9         5       0        0 spoon.test.template.testclasses.match.MatchModifiers
 574   14         2       0        0 spoon.test.template.testclasses.match.MatchMultiple3
 575   16         2       0        0 spoon.test.template.testclasses.match.MatchForEach2
 576    8         3       0        0 spoon.test.template.testclasses.SubstituteRootTemplate
 577    9         3       0        0 spoon.test.template.testclasses.SubStringTemplate
 578   11         2       0        1 spoon.test.template.testclasses.TwoSnippets
 579    7         2       1        0 spoon.test.template.testclasses.ClassAccessTemplate
 580   11         3       0        0 spoon.test.template.testclasses.ReturnReplaceTemplate
 581    6         2       0        0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods_Wrong
 582    2         0       0        0 spoon.test.template.testclasses.constructors.C1
 583   11         3       0        0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods
 584   12         3       0        0 spoon.test.template.testclasses.constructors.TemplateWithConstructor
 585    1         0       0        0 spoon.test.template.testclasses.constructors._Interf_
 586    6         2       0        0 spoon.test.template.testclasses.SubstituteArrayAccessTemplate
 587    1         0       0        0 spoon.test.template.testclasses.inheritance.SuperClass
 588    1         0       0        0 spoon.test.template.testclasses.inheritance.A
 589    1         0       0        0 spoon.test.template.testclasses.inheritance.B
 590    9         2       0        0 spoon.test.template.testclasses.inheritance.InterfaceTemplate
 591    2         1       0        0 spoon.test.template.testclasses.inheritance.SuperTemplate
 592    1         0       0        0 spoon.test.template.testclasses.inheritance.SubClass
 593   34         5       1        0 spoon.test.template.testclasses.inheritance.SubTemplate
 594    5         2       0        0 spoon.test.template.testclasses.ToBeMatched
 595    6         2       0        0 spoon.test.template.testclasses.SubstituteArrayLengthTemplate
 596    6         2       0        0 spoon.test.template.testclasses.SubstitutionByExpressionTemplate
 597   11         2       1        0 spoon.test.template.testclasses.InvocationTemplate
 598    4         2       0        0 spoon.test.template.testclasses.ObjectIsNotParamTemplate
 599   16         4       0        0 spoon.test.template.testclasses.ArrayAccessTemplate
 600    3         1       0        0 spoon.test.template.testclasses.replace.ElementPrinterHelper
 601   13         3       0        0 spoon.test.template.testclasses.replace.DPPSample1
 602    1         0       0        0 spoon.test.template.testclasses.replace.Item
 603    7         2       0        0 spoon.test.template.testclasses.FieldAccessTemplate
 604    9         2       1        0 spoon.test.template.testclasses.EnumAccessTemplate
 605    6         2       0        0 spoon.test.template.testclasses.AnExpressionTemplate
 606    6         1       0        1 spoon.test.template.testclasses.SecurityCheckerTemplate
 607    3         1       0        1 spoon.test.template.testclasses.ContextHelper
 608    9         3       0        1 spoon.test.template.testclasses.SimpleTemplate
 609    7         1       0        1 spoon.test.template.testclasses.BServiceImpl
 610    9         4       0        0 spoon.test.template.testclasses.InvocationSubstitutionByStatementTemplate
 611   28         3       0        0 spoon.test.template.TemplateInvocationSubstitutionTest
 612   11         1       0        0 spoon.test.template.TemplateClassAccessTest
 613   19         2       0        0 spoon.test.template.ArrayResizeTemplate
 614    1         0       0        0 spoon.test.template._TargetType_
 615    1         0       0        0 spoon.test.template._Type_
 616   60         1       0        1 spoon.test.labels.TestLabels
 617   37         1       0        1 spoon.test.labels.testclasses.ManyLabels
 618   14         1       0        0 spoon.test.ctCase.testclasses.ClassWithSwitchExample
 619   33         4       0        0 spoon.test.ctCase.SwitchCaseTest
 620    6         0       2        0 spoon.test.limits.utils.testclasses.ContainInternalClass
 621   21         2       0        0 spoon.test.limits.utils.InternalTest
 622  961        56       8        0 spoon.test.annotation.AnnotationTest
 623   17         1       0        0 spoon.test.annotation.AnnotationLoopTest
 624   99         6       1        0 spoon.test.annotation.AnnotationValuesTest
 625    7         4       0        0 spoon.test.annotation.testclasses.AnnotationsRepeated
 626    3         2       0        0 spoon.test.annotation.testclasses.repeatable.Repeated
 627    1         0       0        0 spoon.test.annotation.testclasses.ByteOrder
 628    5         4       0        0 spoon.test.annotation.testclasses.shadow.DumbKlass
 629    3         0       0        0 spoon.test.annotation.testclasses.AnnotArrayInnerClass
 630    3         2       0        0 spoon.test.annotation.testclasses.repeatandarrays.RepeatedArrays
 631    1         0       0        0 spoon.test.annotation.testclasses.BasicAnnotation
 632    2         1       0        1 spoon.test.annotation.testclasses.Bar
 633    8         1       0        0 spoon.test.annotation.testclasses.Foo
 634    1         0       0        0 spoon.test.annotation.testclasses.TestInterface
 635   22         9       0        0 spoon.test.annotation.testclasses.Main
 636    2         1       0        0 spoon.test.annotation.testclasses.AnnotParam
 637    1         0       0        0 spoon.test.annotation.testclasses.AnnotParamTypeEnum
 638    6         2       0        0 spoon.test.annotation.testclasses.dropwizard.GraphiteReporterFactory
 639    4         1       0        1 spoon.test.annotation.testclasses.AnnotationIntrospection
 640    3         1       0        0 spoon.test.annotation.testclasses.Pozole
 641    3         0       0        0 spoon.test.annotation.testclasses.typeandfield.SimpleClass
 642    3         0       1        0 spoon.test.imports.testclasses.SuperClass
 643    5         0       1        0 spoon.test.imports.testclasses.TransportIndicesShardStoresAction
 644    2         1       0        0 spoon.test.imports.testclasses.internal2.Menudo
 645    1         0       0        0 spoon.test.imports.testclasses.internal2.Chimichanga
 646    2         1       0        0 spoon.test.imports.testclasses.internal2.Tostada
 647    2         0       0        1 spoon.test.imports.testclasses.multiplecu.B
 648    2         0       0        1 spoon.test.imports.testclasses.multiplecu.A
 649    3         0       0        1 spoon.test.imports.testclasses.ShouldNotAutoreference
 650    1         0       0        0 spoon.test.imports.testclasses.internal3.Bar
 651    3         1       0        0 spoon.test.imports.testclasses.internal3.Foo
 652    2         0       0        0 spoon.test.imports.testclasses.internal4.Foo
 653    3         1       0        0 spoon.test.imports.testclasses.internal4.Constants
 654    1         0       0        0 spoon.test.imports.testclasses.memberaccess2.DoesnotExtendA
 655    5         0       0        0 spoon.test.imports.testclasses.memberaccess2.ExtendsA
 656    1         0       0        0 spoon.test.imports.testclasses.memberaccess.DoesnotExtendA
 657    2         0       0        0 spoon.test.imports.testclasses.memberaccess.Iface
 658    5         0       0        0 spoon.test.imports.testclasses.memberaccess.ExtendsA
 659    5         0       0        0 spoon.test.imports.testclasses.memberaccess.A
 660   12         2       1        1 spoon.test.imports.testclasses.StaticNoOrdered
 661   11         0      10        0 spoon.test.imports.testclasses.ClientClass
 662    2         0       0        1 spoon.test.imports.testclasses.Reflection
 663    4         1       0        0 spoon.test.imports.testclasses.NotImportExecutableType
 664    3         1       0        0 spoon.test.imports.testclasses.internal.PublicSuperClass
 665   11         0       4        0 spoon.test.imports.testclasses.internal.SuperClass
 666    4         1       0        0 spoon.test.imports.testclasses.internal.ChildClass
 667    3         0       2        0 spoon.test.imports.testclasses.internal.PublicInterface2
 668    4         0       0        0 spoon.test.imports.testclasses.DumbClassUsingInternal
 669    3         1       0        1 spoon.test.imports.testclasses.MultiCatch
 670    5         2       0        1 spoon.test.imports.testclasses.ClassWithInvocation
 671    3         1       0        0 spoon.test.imports.testclasses.Tacos
 672   12         3       1        1 spoon.test.imports.testclasses.StaticImportsFromEnum
 673    2         0       1        1 spoon.test.imports.testclasses.ItfWithEnum
 674    4         1       1        0 spoon.test.imports.testclasses.DefaultClientClass
 675    2         0       0        0 spoon.test.imports.testclasses.Kun
 676    4         1       0        0 spoon.test.imports.testclasses.Mole
 677    6         1       1        0 spoon.test.imports.testclasses.SubClass
 678    6         2       1        0 spoon.test.imports.testclasses.JavaLongUse
 679    3         1       0        1 spoon.test.imports.testclasses.ToBeModified
 680    2         0       1        0 spoon.test.imports.testclasses.A
 681    3         1       0        0 spoon.test.imports.testclasses.Pozole
 682   13         1       0        0 spoon.test.imports.ImportAndExtendWithPackageNameTest
 683   80         7       0        0 spoon.test.field.FieldTest
 684    2         0       0        0 spoon.test.field.testclasses.BaseClass
 685    8         1       1        0 spoon.test.field.testclasses.AddFieldAtTop
 686    5         0       1        1 spoon.test.field.testclasses.A
 687   47         6       0        0 spoon.test.exceptions.ExceptionTest
 688    5         2       0        0 spoon.test.ctElement.testclasses.Returner
 689   10         1       0        1 spoon.test.ctElement.ElementTest
 690   15         1       0        0 spoon.test.ctElement.MetadataTest
 691    4         1       0        1 spoon.test.staticFieldAccess.internal.Origin
 692    2         0       0        1 spoon.test.staticFieldAccess.internal.Extends
 693   12         2       1        1 spoon.test.staticFieldAccess.StaticAccessBug
 694    7         2       0        1 spoon.test.staticFieldAccess.processors.InsertBlockProcessor
 695   23         3       0        0 spoon.test.staticFieldAccess.StaticAccessTest
 696    3         0       0        0 spoon.test.staticFieldAccess2.testclasses.ChildOfConstants
 697    7         2       0        0 spoon.test.staticFieldAccess2.testclasses.GenericsWithAmbiguousStaticField
 698    8         2       0        0 spoon.test.staticFieldAccess2.testclasses.GenericsWithAmbiguousMemberField
 699   11         4       0        0 spoon.test.staticFieldAccess2.testclasses.AmbiguousImplicitFieldReference
 700   14         5       0        0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticFieldReference
 701    4         1       0        0 spoon.test.staticFieldAccess2.testclasses.ChildOfGenericsWithAmbiguousStaticField
 702    8         3       0        0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticClassAccess
 703   10         4       0        0 spoon.test.staticFieldAccess2.testclasses.ImplicitFieldReference
 704    2         0       0        0 spoon.test.staticFieldAccess2.testclasses.Constants
 705   83        17       0        0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
 706    1         0       0        0 spoon.test.type.testclasses.Mole
 707   10         4       1        0 spoon.test.type.testclasses.TypeMembersOrder
 708   38         4       0        0 spoon.test.condition.testclasses.Foo
 709    5         1       0        0 spoon.test.condition.testclasses.Foo2
 710   46         6       0        0 spoon.test.condition.ConditionalTest
 711   10         1       0        0 spoon.test.properties.PropertiesTest
 712    2         1       0        0 spoon.test.properties.SimpleProcessor
 713   14         6       5        0 spoon.test.properties.testclasses.Sample
 714   47         4       0        0 spoon.test.support.ResourceTest
 715   13         1       0        0 spoon.test.visitor.AssignmentsEqualsTest
 716    1         0       0        1 spoon.test.visitor.VisitorFake
 717   21         1       1        1 spoon.test.visitor.VisitorTest
 718  173        12       7        1 spoon.test.parent.ParentTest
 719   19         2       0        0 spoon.test.parent.TopLevelTypeTest
 720   74         4       1        1 spoon.test.parent.ContractOnSettersParametrizedTest
 721   29         2       0        0 spoon.test.parent.SetParentTest
 722   26         4       2        0 spoon.test.parent.Foo
 723   85         8       0        0 spoon.test.arrays.ArraysTest
 724    5         4       0        0 spoon.test.arrays.testclasses.VaragParam
 725    6         1       0        0 spoon.test.arrays.testclasses.Foo
 726    3         0       0        0 spoon.test.arrays.testclasses.NewArrayWithComment
 727   50         3       0        1 spoon.test.ctBlock.TestCtBlock
 728   16         2       0        1 spoon.test.ctBlock.testclasses.Toto
 729   83        11       0        0 spoon.test.model.TypeTest
 730   28         2       0        0 spoon.test.model.BlockTest
 731    6         1       0        0 spoon.test.model.AnonymousExecutableTest
 732    3         1       0        0 spoon.test.model.ClassWithSuperAndIFace
 733    1         0       0        0 spoon.test.model.Bar
 734    5         2       1        0 spoon.test.model.Baz
 735    6         4       0        0 spoon.test.model.Foo
 736    5         0       1        0 spoon.test.model.testclasses.AnonymousExecutableClass
 737   22         1       0        0 spoon.test.model.testclasses.SwitchStringClass
 738    3         1       0        0 spoon.test.model.testclasses.InterfaceSuperclass
 739    5         2       0        0 spoon.test.model.testclasses.ClassWithSuperOutOfModel
 740    3         0       0        0 spoon.test.model.testclasses.InterfaceWrithFields
 741   23         2       0        0 spoon.test.model.SwitchCaseTest
 742   51         3       2        0 spoon.test.parameters.ParameterTest
 743  101         5       0        0 spoon.test.api.NoClasspathTest
 744   13         2       0        0 spoon.test.api.FileSystemFolderTest
 745   18         2       0        0 spoon.test.api.processors.AwesomeProcessor
 746    3         1       0        0 spoon.test.api.testclasses.Bar
 747    4         3       0        0 spoon.test.methodreference.testclasses.Cloud
 748    6         1       0        0 spoon.test.methodreference.testclasses.Sun
 749    3         1       0        1 spoon.test.methodreference.testclasses.AssertJ
 750   37         4       1        0 spoon.test.sourcePosition.SourcePositionTest
 751    3         1       0        0 spoon.test.sourcePosition.testclasses.Brambora
 752   89         5       0        1 spoon.test.compilationunit.GetBinaryFilesTest
 753   53         5       0        0 spoon.test.comparison.EqualTest
 754   82         7       0        0 spoon.test.ctBodyHolder.CtBodyHolderTest
 755    6         2       0        0 spoon.test.ctBodyHolder.testclasses.CWBStatementTemplate
 756   16         3       0        0 spoon.test.ctBodyHolder.testclasses.ClassWithBodies
 757   14         6       5        0 spoon.test.testclasses.SampleClass
 758   15         6       5        0 spoon.test.testclasses.SampleImportClass
 759   90        10       0        0 spoon.test.eval.EvalTest
 760   36         8       0        0 spoon.test.eval.testclasses.ToEvaluate
 761   16         2       0        0 spoon.test.eval.testclasses.Foo
 762  203        18       2        0 spoon.test.replace.ReplaceTest
 763   93         5       2        0 spoon.test.replace.ReplaceParametrizedTest
 764    8         3       0        0 spoon.test.replace.testclasses.Tacos
 765    2         0       0        0 spoon.test.replace.testclasses.Bar
 766   14         4       0        0 spoon.test.replace.testclasses.Foo
 767    4         1       0        0 spoon.test.replace.testclasses.Mole
 768   48         4       3        0 spoon.test.refactoring.RefactoringTest
 769    3         1       0        0 spoon.test.refactoring.processors.ThisTransformationProcessor
 770    3         1       0        0 spoon.test.refactoring.parameter.testclasses.TypeC
 771    2         1       0        0 spoon.test.refactoring.parameter.testclasses.IFaceB
 772    2         1       0        0 spoon.test.refactoring.parameter.testclasses.TypeR
 773    2         1       0        0 spoon.test.refactoring.parameter.testclasses.IFaceT
 774    2         1       0        0 spoon.test.refactoring.parameter.testclasses.TypeK
 775    1         0       0        0 spoon.test.refactoring.parameter.testclasses.IFaceL
 776    1         0       0        0 spoon.test.refactoring.parameter.testclasses.IFaceK
 777    1         0       0        0 spoon.test.refactoring.parameter.testclasses.TypeM
 778    3         2       0        0 spoon.test.refactoring.parameter.testclasses.TypeA
 779    2         1       0        0 spoon.test.refactoring.parameter.testclasses.TypeL
 780    9         3       0        0 spoon.test.refactoring.testclasses.AClass
 781    2         1       0        0 spoon.test.refactoring.testclasses.AbstractClass
 782  349        19       3        0 spoon.test.targeted.TargetedExpressionTest
 783    3         1       0        0 spoon.test.targeted.testclasses.SuperClass
 784    5         2       0        0 spoon.test.targeted.testclasses.InternalSuperCall
 785    5         2       0        0 spoon.test.targeted.testclasses.Bar
 786   92         7       4        0 spoon.test.targeted.testclasses.Foo
 787   13         2       2        0 spoon.test.targeted.testclasses.InnerClassThisAccess
 788    4         1       0        0 spoon.test.targeted.testclasses.Pozole
 789  160         8       2        1 spoon.test.intercession.IntercessionTest
 790   23         4       0        0 spoon.test.intercession.insertBefore.InsertBeforeExample
 791  129        10       0        0 spoon.test.intercession.insertBefore.InsertMethodsTest
 792   24         2       1        0 spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
 793   36         7       0        0 spoon.test.intercession.IntercessionScanner
 794   10         1       0        0 spoon.test.intercession.RemoveTest
 795   98         8       0        1 spoon.test.jdtimportbuilder.ImportBuilderTest
 796    2         0       0        1 spoon.test.jdtimportbuilder.testclasses.StaticImport
 797    5         0       0        0 spoon.test.jdtimportbuilder.testclasses.StaticImportWithInheritance
 798    4         0       0        1 spoon.test.jdtimportbuilder.testclasses.StarredImport
 799    2         0       0        0 spoon.test.jdtimportbuilder.testclasses.staticimport.DependencySubClass
 800    5         1       0        1 spoon.test.jdtimportbuilder.testclasses.staticimport.Dependency
 801    1         0       0        1 spoon.test.jdtimportbuilder.testclasses.fullpack.B
 802    1         0       0        1 spoon.test.jdtimportbuilder.testclasses.fullpack.C
 803    1         0       0        1 spoon.test.jdtimportbuilder.testclasses.fullpack.A
 804   48         3       1        0 spoon.test.javadoc.JavaDocTest
 805    3         1       0        1 spoon.test.javadoc.testclasses.Bar
 806    1         0       0        1 spoon.test.javadoc.testclasses.Foo
 807    3         1       0        0 spoon.test.main.testclasses.Test
 808  211        13       4        0 spoon.test.compilation.CompilationTest
 809    3         1       0        0 spoon.test.compilation.testclasses.Bar
 810    1         0       0        0 spoon.test.compilation.testclasses.FooEx
 811    2         1       0        1 spoon.test.compilation.testclasses.IBar
 812    2         1       0        0 spoon.test.compilation.testclasses.Ifoo
 813   14         1       0        0 spoon.test.varargs.VarArgsTest
 814    2         1       0        0 spoon.test.varargs.testclasses.VarArgsSample
 815  138         8       0        0 spoon.test.ctClass.CtClassTest
 816    4         3       0        1 spoon.test.ctClass.testclasses.Foo
 817    4         0       1        1 spoon.test.ctClass.testclasses.AnonymousClass
 818    7         3       0        1 spoon.test.ctClass.testclasses.issue1306.test.BooleanArrays
 819    6         1       0        0 spoon.test.ctClass.testclasses.issue1306.internal.BooleanArraysBaseTest
 820    5         2       0        2 spoon.test.ctClass.testclasses.issue1306.internal.BooleanArrays
 821    7         1       1        0 spoon.test.ctClass.testclasses.Pozole
 822   20         2       0        0 spoon.test.logging.LogTest
 823   17        16       0        0 spoon.test.method.testclasses.Methods
 824    4         3       0        0 spoon.test.method.testclasses.Tacos
 825   24         2       0        0 spoon.test.control.ControlTest
 826    5         1       0        0 spoon.test.control.testclasses.DoWhile
 827   11         4       0        0 spoon.test.control.testclasses.Fors
 828   16         1       0        0 spoon.test.factory.ExecutableFactoryTest
 829    3         0       2        0 spoon.test.factory.testclasses3.Prepare
 830    2         0       1        0 spoon.test.factory.testclasses3.Cooking
 831   73         6       4        0 spoon.test.factory.FactoryTest
 832   11         1       0        0 spoon.test.factory.AnnotationFactoryTest
 833    1         0       0        0 spoon.test.factory.testclasses2.Baz
 834   43         5       0        0 spoon.test.factory.TypeFactoryTest
 835   15         2       0        0 spoon.test.factory.ClassFactoryTest
 836    8         1       0        0 spoon.test.factory.CodeFactoryTest
 837    4         0       0        0 spoon.test.factory.testclasses.Foo
 838   27         2       0        0 spoon.test.factory.ConstructorFactoryTest
 839   30         2       0        0 spoon.test.factory.FieldFactoryTest
 840   11         1       0        0 spoon.test.reference.AnnotationFieldReferenceTest
 841   26         1       1        0 spoon.test.reference.ElasticsearchStackoverflowTest
 842    2         1       0        0 spoon.test.reference.Foo
 843    2         1       0        0 spoon.test.reference.Sup
 844    3         1       0        0 spoon.test.reference.Enum
 845  162        19       6        1 spoon.test.reference.ExecutableReferenceGenericTest
 846  123         8       4        0 spoon.test.reference.ExecutableReferenceTest
 847    3         2       0        0 spoon.test.reference.testclasses.MyClass3
 848    6         3       0        0 spoon.test.reference.testclasses.EnumValue
 849   19         9       0        0 spoon.test.reference.testclasses.MyClass
 850   12         1       2        0 spoon.test.reference.testclasses.Panini
 851    2         1       0        0 spoon.test.reference.testclasses.Bar
 852    3         1       0        0 spoon.test.reference.testclasses.Tacos
 853    3         1       0        0 spoon.test.reference.testclasses.Burritos
 854   18         7       0        0 spoon.test.reference.testclasses.MyClass2
 855    2         1       0        0 spoon.test.reference.testclasses.Foo
 856    3         1       0        0 spoon.test.reference.testclasses.Mole
 857    2         1       0        0 spoon.test.reference.testclasses.Parent
 858    3         1       0        0 spoon.test.reference.testclasses.SuperAccess
 859   11         2       4        0 spoon.test.reference.testclasses.FooBar
 860    3         1       0        0 spoon.test.reference.testclasses.ParamRefs
 861    4         1       0        0 spoon.test.reference.testclasses.Tortillas
 862    2         1       0        0 spoon.test.reference.testclasses.SuperFoo
 863    6         2       0        0 spoon.test.reference.testclasses.Pozole
 864   16         2       0        0 spoon.test.loop.LoopTest
 865   14         4       0        3 spoon.test.loop.testclasses.Join
 866    1         0       0        0 spoon.test.loop.testclasses.Condition
 867   65         9       0        0 spoon.test.constructor.ConstructorTest
 868    1         0       0        0 spoon.test.constructor.testclasses.ImplicitConstructor
 869   48         7       0        0 spoon.test.interfaces.InterfaceTest
 870   82         2       0        0 spoon.test.interfaces.TestInterfaceWithoutSetup
 871    3         1       0        0 spoon.test.interfaces.testclasses.ExtendsStaticMethodInterface
 872    2         1       0        0 spoon.test.interfaces.testclasses.RedefinesDefaultMethodInterface
 873    2         1       0        0 spoon.test.interfaces.testclasses.RedefinesStaticMethodInterface
 874   24         2       0        0 spoon.test.initializers.InitializerTest
 875    5         0       1        0 spoon.test.initializers.testclasses.InternalClassStaticFieldInit
 876   18         0       1        0 spoon.test.initializers.testclasses.InstanceInitializers
 877    2         1       0        0 spoon.test.pkg.test_templates.FakeTemplate
 878    4         1       0        1 spoon.test.pkg.processors.ElementProcessor
 879    2         0       0        0 spoon.test.pkg.testclasses.Foo
 880    1         0       0        0 spoon.test.pkg.name.PackageTestClass
 881   17         2       0        0 spoon.processing.ProcessingTest
 882   14         1       0        0 spoon.reflect.visitor.CtInheritanceScannerMethodsTest
 883   36         7       0        1 spoon.reflect.visitor.processors.CheckVisitorTestProcessor
 884   22         3       0        0 spoon.reflect.visitor.processors.CheckScannerTestProcessor
 885   14         1       0        0 spoon.reflect.visitor.CtVisitorTest
 886   48         3       0        3 spoon.reflect.visitor.CtInheritanceScannerTest
 887   16         1       1        1 spoon.reflect.declaration.UnknownDeclarationTest
 888    1         0       0        0 spoon.reflect.declaration.testclasses.TestInterface
 889    5         2       0        0 spoon.reflect.declaration.testclasses.Subclass
 890    2         1       0        0 spoon.reflect.declaration.testclasses.ExtendsArrayList
 891    2         1       0        0 spoon.reflect.declaration.testclasses.Subinterface
 892   95         6       0        0 spoon.reflect.declaration.CtTypeInformationTest
 893   24         5       1        0 spoon.testing.CtElementAssertTest
 894    7         2       0        0 spoon.testing.FileAssertTest
 895    6         3       0        0 spoon.testing.processors.FooToBarProcessor
 896   14         4       1        0 spoon.testing.AbstractAssertTest
 897    1         0       0        0 spoon.testing.testclasses.Bar
 898    1         0       0        0 spoon.testing.testclasses.Foo
 899   39         4       0        0 spoon.testing.CtPackageAssertTest
 900   16         2       1        0 spoon.support.compiler.classpath.ComputeClasspathTest
 901   14         1       0        0 spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
 902   23         1       1        0 spoon.support.compiler.jdt.ExtendedStringLiteralTest
 903    2         0       0        0 spoon.support.compiler.jdt.testclasses.ExtendedStringLiteralTestClass
 904    1         0       0        0 spoon.support.compiler.jdt.testclasses.Foo
 905   18         1       0        0 spoon.support.compiler.jdt.JDTBuilderTest
 906   11         1       0        0 spoon.support.compiler.jdt.JDTBatchCompilerTest
 907   21        20       0       20 spoon.SpoonAPI
 908    9         4       0        1 spoon.SpoonException
 909   31        26       1       29 spoon.SpoonModelBuilder
 910   45        16       0        8 spoon.processing.AbstractProcessor
 911   14         3       0        1 spoon.processing.ProcessorPropertiesImpl
 912    1         0       0        0 spoon.processing.TraversalStrategy
 913    3         2       0        3 spoon.processing.FactoryAccessor
 914   54        14       0       10 spoon.processing.AbstractAnnotationProcessor
 915    8         4       0        1 spoon.processing.ProcessInterruption
 916    7         6       0        7 spoon.processing.ProcessingManager
 917    3         1       0        1 spoon.processing.SpoonTagger
 918   11        10       0       11 spoon.processing.Processor
 919    7         3       0        2 spoon.processing.AbstractProblemFixer
 920   25        14       0        8 spoon.processing.AbstractManualProcessor
 921    6         5       0        6 spoon.processing.AnnotationProcessor
 922    4         3       0        3 spoon.processing.ProcessorProperties
 923    4         3       0        4 spoon.processing.ProblemFixer
 924    3         2       0        3 spoon.processing.FileGenerator
 925   41         7       1        7 spoon.MavenLauncher
 926   10         9       0        8 spoon.reflect.CtModel
 927    3         2       0        3 spoon.reflect.ModelStreamer
 928   23         7       0        8 spoon.reflect.Changes
 929   12        10       0       11 spoon.reflect.cu.SourcePosition
 930    3         2       0        1 spoon.reflect.cu.position.DeclarationSourcePosition
 931    3         2       0        1 spoon.reflect.cu.position.CompoundSourcePosition
 932   22        10       0        1 spoon.reflect.cu.position.NoSourcePosition
 933    3         2       0        1 spoon.reflect.cu.position.BodyHolderSourcePosition
 934    4         3       0        4 spoon.reflect.cu.CompilationUnit
 935   73         5       0        1 spoon.reflect.path.impl.CtRolePathElement
 936    3         2       0        2 spoon.reflect.path.impl.CtPathElement
 937   66         8       1        1 spoon.reflect.path.impl.CtNamedPathElement
 938   31         6       0        1 spoon.reflect.path.impl.CtPathImpl
 939   18         5       0        1 spoon.reflect.path.impl.CtTypedNameElement
 940   27         4       1        1 spoon.reflect.path.impl.AbstractPathElement
 941    3         2       0        2 spoon.reflect.path.CtPath
 942   32         6       0        7 spoon.reflect.path.CtPathBuilder
 943   90         3       1        3 spoon.reflect.path.CtPathStringBuilder
 944    6         3       0        1 spoon.reflect.path.CtPathException
 945   99         5       0        4 spoon.reflect.path.CtElementPathBuilder
 946    6         5       0        4 spoon.reflect.code.CtLambda
 947    6         5       0        2 spoon.reflect.code.CtCatchVariable
 948    4         3       0        3 spoon.reflect.code.CtTargetedExpression
 949    2         1       0        1 spoon.reflect.code.CtBreak
 950    5         4       0        4 spoon.reflect.code.CtExpression
 951    7         6       0        7 spoon.reflect.code.CtAbstractInvocation
 952    4         3       0        3 spoon.reflect.code.CtDo
 953   12        11       0       11 spoon.reflect.code.CtFor
 954    3         2       0        2 spoon.reflect.code.CtLoop
 955    9         8       0        8 spoon.reflect.code.CtTry
 956    6         5       0        5 spoon.reflect.code.CtTryWithResource
 957    2         1       0        1 spoon.reflect.code.CtThisAccess
 958    2         1       0        1 spoon.reflect.code.CtFieldRead
 959    3         2       0        3 spoon.reflect.code.CtRHSReceiver
 960    2         1       0        1 spoon.reflect.code.CtBlock
 961    8         7       0        7 spoon.reflect.code.CtIf
 962    2         1       0        1 spoon.reflect.code.CtFieldWrite
 963    6         5       0        5 spoon.reflect.code.CtUnaryOperator
 964    2         1       0        1 spoon.reflect.code.CtContinue
 965    8         7       0        3 spoon.reflect.code.CtStatement
 966    6         5       0        5 spoon.reflect.code.CtInvocation
 967    6         5       0        5 spoon.reflect.code.CtAssert
 968    2         1       0        1 spoon.reflect.code.CtVariableRead
 969   10         9       0        9 spoon.reflect.code.CtNewArray
 970    6         5       0        5 spoon.reflect.code.CtSynchronized
 971    3         2       0        1 spoon.reflect.code.CtFieldAccess
 972   20         8       1        8 spoon.reflect.code.CtJavaDocTag
 973    4         3       0        3 spoon.reflect.code.CtOperatorAssignment
 974    1         0       0        0 spoon.reflect.code.BinaryOperatorKind
 975    7         6       0        6 spoon.reflect.code.CtNewClass
 976    1         0       0        1 spoon.reflect.code.CtCFlowBreak
 977    2         1       0        1 spoon.reflect.code.CtArrayWrite
 978    1         0       0        0 spoon.reflect.code.UnaryOperatorKind
 979    3         2       0        3 spoon.reflect.code.CtBodyHolder
 980   10         7       1        5 spoon.reflect.code.CtComment
 981    3         2       0        1 spoon.reflect.code.CtCodeSnippetExpression
 982    2         1       0        1 spoon.reflect.code.CtArrayRead
 983    3         2       0        1 spoon.reflect.code.CtSuperAccess
 984    4         3       0        4 spoon.reflect.code.CtLiteral
 985    4         3       0        3 spoon.reflect.code.CtExecutableReferenceExpression
 986    5         4       0        4 spoon.reflect.code.CtCatch
 987    8         7       0        7 spoon.reflect.code.CtBinaryOperator
 988    6         5       0        5 spoon.reflect.code.CtForEach
 989    4         3       0        3 spoon.reflect.code.CtAssignment
 990   11        10       0       10 spoon.reflect.code.CtJavaDoc
 991    4         3       0        3 spoon.reflect.code.CtThrow
 992   17        16       0       16 spoon.reflect.code.CtStatementList
 993    4         3       0        3 spoon.reflect.code.CtCase
 994    8         7       0        7 spoon.reflect.code.CtConditional
 995    8         7       0        7 spoon.reflect.code.CtSwitch
 996    4         3       0        3 spoon.reflect.code.CtArrayAccess
 997    3         2       0        1 spoon.reflect.code.CtCodeSnippetStatement
 998    3         2       0        1 spoon.reflect.code.CtAnnotationFieldAccess
 999    4         3       0        3 spoon.reflect.code.CtReturn
1000    4         3       0        3 spoon.reflect.code.CtLabelledFlowBreak
1001    4         3       0        3 spoon.reflect.code.CtWhile
1002    3         2       0        1 spoon.reflect.code.CtCodeElement
1003    2         1       0        1 spoon.reflect.code.CtVariableWrite
1004    6         5       0        4 spoon.reflect.code.CtConstructorCall
1005    7         6       0        4 spoon.reflect.code.CtLocalVariable
1006    5         4       0        3 spoon.reflect.code.CtVariableAccess
1007    8         7       0        6 spoon.reflect.code.CtTypeAccess
1008   35        13       0        1 spoon.reflect.meta.impl.AbstractRoleHandler
1009   55         5       1        1 spoon.reflect.meta.impl.SingleHandler
1010  917         1     132        1 spoon.reflect.meta.impl.ModelRoleHandlers
1011    1         0       0        0 spoon.reflect.meta.ContainerKind
1012   11        10       0        5 spoon.reflect.meta.RoleHandler
1013   24         1       0        1 spoon.reflect.ModelElementContainerDefaultCapacities
1014  622        93       0       11 spoon.reflect.visitor.CtScanner
1015    6         5       0        2 spoon.reflect.visitor.CtImportVisitor
1016    6         5       0        6 spoon.reflect.visitor.PrettyPrinter
1017  125        23       0       13 spoon.reflect.visitor.PrinterHelper
1018   87        15       1        8 spoon.reflect.visitor.PrintingContext
1019  511       118       0       30 spoon.reflect.visitor.CtInheritanceScanner
1020   43        15       0        1 spoon.reflect.visitor.DefaultTokenWriter
1021   84        83       0        1 spoon.reflect.visitor.CtAbstractVisitor
1022   87         4       0        2 spoon.reflect.visitor.LiteralHelper
1023   25         4       0        4 spoon.reflect.visitor.ModelConsistencyChecker
1024   44         5       0        2 spoon.reflect.visitor.MinimalImportScanner
1025    1         0       0        0 spoon.reflect.visitor.printer.CommentOffset
1026    3         2       0        3 spoon.reflect.visitor.CtAbstractBiScanner
1027   11         3       0        4 spoon.reflect.visitor.CtDequeScanner
1028    1         0       0        0 spoon.reflect.visitor.chain.QueryFailurePolicy
1029    2         1       0        2 spoon.reflect.visitor.chain.CtConsumableFunction
1030   15        14       0        8 spoon.reflect.visitor.chain.CtQuery
1031    4         3       0        1 spoon.reflect.visitor.chain.CtQueryable
1032    2         1       0        2 spoon.reflect.visitor.chain.CtConsumer
1033    4         1       0        0 spoon.reflect.visitor.chain.ScanningMode
1034    2         1       0        2 spoon.reflect.visitor.chain.CtFunction
1035    2         1       0        2 spoon.reflect.visitor.chain.CtQueryAware
1036    2         1       0        2 spoon.reflect.visitor.CtVisitable
1037   84        83       0       33 spoon.reflect.visitor.CtVisitor
1038   26         5       0        3 spoon.reflect.visitor.CacheBasedConflictFinder
1039   31         4       0        0 spoon.reflect.visitor.JavaIdentifiers
1040   14        13       0       14 spoon.reflect.visitor.TokenWriter
1041    5         4       0        5 spoon.reflect.visitor.ImportScanner
1042   70         5       0        3 spoon.reflect.visitor.OperatorHelper
1043   36         3       0        2 spoon.reflect.visitor.ListPrinter
1044  693        88       0        1 spoon.reflect.visitor.CtBiScannerDefault
1045   10         5       0        5 spoon.reflect.visitor.Query
1046   83        16       0        8 spoon.reflect.visitor.EarlyTerminatingScanner
1047   21         4       1        5 spoon.reflect.visitor.CtIterator
1048   64         3       1        1 spoon.reflect.visitor.AccessibleVariablesFinder
1049   13         2       0        0 spoon.reflect.visitor.AstParentConsistencyChecker
1050    6         5       0        1 spoon.reflect.visitor.CtAbstractImportVisitor
1051    8         3       0        3 spoon.reflect.visitor.filter.InvocationFilter
1052    4         1       0        1 spoon.reflect.visitor.filter.OverriddenMethodQuery
1053   11         3       0        1 spoon.reflect.visitor.filter.RegexFilter
1054    4         2       0        3 spoon.reflect.visitor.filter.AbstractReferenceFilter
1055   19         4       0        2 spoon.reflect.visitor.filter.ParentFunction
1056    3         1       0        2 spoon.reflect.visitor.filter.TypeFilter
1057   27         5       1        3 spoon.reflect.visitor.filter.CtScannerFunction
1058    5         2       0        2 spoon.reflect.visitor.filter.ParameterReferenceFunction
1059   24         2       0        2 spoon.reflect.visitor.filter.LineFilter
1060   11         3       0        1 spoon.reflect.visitor.filter.ParameterScopeFunction
1061    3         1       0        1 spoon.reflect.visitor.filter.ReturnOrThrowFilter
1062    8         2       0        2 spoon.reflect.visitor.filter.VariableAccessFilter
1063    3         1       0        2 spoon.reflect.visitor.filter.FieldAccessFilter
1064   91         7       5        4 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction
1065   15         3       0        2 spoon.reflect.visitor.filter.SubtypeFilter
1066   35         4       0        3 spoon.reflect.visitor.filter.CompositeFilter
1067   14         3       0        2 spoon.reflect.visitor.filter.NamedElementFilter
1068   26         4       0        4 spoon.reflect.visitor.filter.ExecutableReferenceFilter
1069   14         3       0        3 spoon.reflect.visitor.filter.OverriddenMethodFilter
1070   13         4       0        3 spoon.reflect.visitor.filter.AbstractFilter
1071   39         6       2        5 spoon.reflect.visitor.filter.AllTypeMembersFunction
1072    9         2       0        2 spoon.reflect.visitor.filter.DirectReferenceFilter
1073    5         2       0        1 spoon.reflect.visitor.filter.CatchVariableReferenceFunction
1074   16         5       0        5 spoon.reflect.visitor.filter.LambdaFilter
1075   10         3       1        1 spoon.reflect.visitor.filter.LocalVariableScopeFunction
1076   12         3       0        3 spoon.reflect.visitor.filter.OverridingMethodFilter
1077   20         1       1        5 spoon.reflect.visitor.filter.VariableScopeFunction
1078   18         3       0        1 spoon.reflect.visitor.filter.FieldReferenceFunction
1079   21         6       0        1 spoon.reflect.visitor.filter.FieldScopeFunction
1080   77         6       4        2 spoon.reflect.visitor.filter.LocalVariableReferenceFunction
1081   29         6       1        5 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction
1082    3         1       0        2 spoon.reflect.visitor.filter.ReferenceTypeFilter
1083    1         0       0        0 spoon.reflect.visitor.filter.FilteringOperator
1084   25         4       2        3 spoon.reflect.visitor.filter.SiblingsFunction
1085   30         3       1        5 spoon.reflect.visitor.filter.VariableReferenceFunction
1086    8         3       0        1 spoon.reflect.visitor.filter.CatchVariableScopeFunction
1087   10         3       0        3 spoon.reflect.visitor.filter.AnnotationFilter
1088  467        33       0        5 spoon.reflect.visitor.ImportScannerImpl
1089    2         1       0        2 spoon.reflect.visitor.Filter
1090    2         1       0        1 spoon.reflect.eval.PartialEvaluator
1091  443       183       3       23 spoon.reflect.factory.FactoryImpl
1092   58        13       0       13 spoon.reflect.factory.PackageFactory
1093   94        93       0       41 spoon.reflect.factory.CoreFactory
1094   38         7       0        8 spoon.reflect.factory.MethodFactory
1095   93        12       0       11 spoon.reflect.factory.ExecutableFactory
1096   25         6       0        7 spoon.reflect.factory.InterfaceFactory
1097   11         5       0        6 spoon.reflect.factory.QueryFactory
1098  179       178       0       94 spoon.reflect.factory.Factory
1099   19         5       0        6 spoon.reflect.factory.EnumFactory
1100   49         9       0       10 spoon.reflect.factory.ConstructorFactory
1101   26         6       0        7 spoon.reflect.factory.ClassFactory
1102   72         8       0        6 spoon.reflect.factory.CompilationUnitFactory
1103   60        10       1        0 spoon.reflect.factory.ModuleFactory
1104    4         1       0        2 spoon.reflect.factory.SubFactory
1105   48         8       0        9 spoon.reflect.factory.FieldFactory
1106  198        39       0       40 spoon.reflect.factory.CodeFactory
1107    5         2       0        3 spoon.reflect.factory.EvalFactory
1108   47         8       0        9 spoon.reflect.factory.AnnotationFactory
1109    6         5       0        5 spoon.reflect.reference.CtReference
1110    5         4       0        4 spoon.reflect.reference.CtActualTypeContainer
1111    3         2       0        1 spoon.reflect.reference.CtModuleReference
1112    8         7       0        7 spoon.reflect.reference.CtArrayTypeReference
1113    7         6       0        6 spoon.reflect.reference.CtPackageReference
1114   24        22       0       19 spoon.reflect.reference.CtTypeReference
1115    3         2       0        1 spoon.reflect.reference.CtUnboundVariableReference
1116    4         3       0        2 spoon.reflect.reference.CtParameterReference
1117   23        19       0       17 spoon.reflect.reference.CtExecutableReference
1118    6         5       0        5 spoon.reflect.reference.CtIntersectionTypeReference
1119    3         2       0        1 spoon.reflect.reference.CtLocalVariableReference
1120    3         2       0        1 spoon.reflect.reference.CtCatchVariableReference
1121   13        12       0        2 spoon.reflect.reference.CtTypeMemberWildcardImportReference
1122    6         5       0        5 spoon.reflect.reference.CtVariableReference
1123   12        11       0       10 spoon.reflect.reference.CtFieldReference
1124    6         5       0        4 spoon.reflect.reference.CtTypeParameterReference
1125    7         6       0        5 spoon.reflect.reference.CtWildcardReference
1126    4         3       0        1 spoon.reflect.declaration.CtUsedService
1127    5         4       0        5 spoon.reflect.declaration.CtFormalTypeDeclarer
1128    7         6       0        6 spoon.reflect.declaration.CtMethod
1129    1         0       0        0 spoon.reflect.declaration.CtImportKind
1130    3         2       0        3 spoon.reflect.declaration.CtTypeMember
1131    6         4       0        2 spoon.reflect.declaration.CtField
1132    3         2       0        3 spoon.reflect.declaration.CtCodeSnippet
1133    3         2       0        1 spoon.reflect.declaration.CtEnumValue
1134    8         7       0        1 spoon.reflect.declaration.CtAnonymousExecutable
1135    5         1       0        0 spoon.reflect.declaration.ModifierKind
1136   45        44       0       33 spoon.reflect.declaration.CtElement
1137    7         5       1        1 spoon.reflect.declaration.CtModuleRequirement
1138    3         2       0        1 spoon.reflect.declaration.CtInterface
1139   20        16       0       15 spoon.reflect.declaration.CtPackage
1140    7         6       0        5 spoon.reflect.declaration.CtParameter
1141   34        32       0        3 spoon.reflect.declaration.CtModule
1142   15        14       0        3 spoon.reflect.declaration.CtTypeParameter
1143    9         8       0        6 spoon.reflect.declaration.CtEnum
1144    7         6       0        1 spoon.reflect.declaration.CtProvidedService
1145    5         4       0        2 spoon.reflect.declaration.CtConstructor
1146    5         4       0        5 spoon.reflect.declaration.CtMultiTypedElement
1147    4         3       0        3 spoon.reflect.declaration.CtPackageDeclaration
1148    8         7       0        3 spoon.reflect.declaration.CtAnnotationMethod
1149    6         5       0        5 spoon.reflect.declaration.CtImport
1150   46        22       0       20 spoon.reflect.declaration.CtAnnotation
1151   16        15       0       14 spoon.reflect.declaration.CtModifiable
1152    5         4       0        4 spoon.reflect.declaration.CtNamedElement
1153   14        13       0       12 spoon.reflect.declaration.CtClass
1154    3         2       0        3 spoon.reflect.declaration.CtTypedElement
1155    4         3       0        3 spoon.reflect.declaration.CtVariable
1156   21        20       0       21 spoon.reflect.declaration.CtTypeInformation
1157    3         2       0        3 spoon.reflect.declaration.CtShadowable
1158   14        12       0       11 spoon.reflect.declaration.CtExecutable
1159    8         7       0        4 spoon.reflect.declaration.CtAnnotationType
1160    1         0       0        1 spoon.reflect.declaration.CtModuleDirective
1161    9         8       0        1 spoon.reflect.declaration.CtPackageExport
1162    1         0       0        0 spoon.reflect.declaration.CtAnnotatedElementType
1163    4         1       0        1 spoon.reflect.declaration.ParentNotInitializedException
1164   30        28       1       24 spoon.reflect.declaration.CtCompilationUnit
1165   43        40       0       40 spoon.reflect.declaration.CtType
1166   10         5       0        4 spoon.template.BlockTemplate
1167   13         6       0        4 spoon.template.ExpressionTemplate
1168   18         4       0        3 spoon.template.TypedStatementListTemplateParameter
1169   14         4       0        3 spoon.template.TypedBlockTemplateParameter
1170    2         1       0        2 spoon.template.TemplateParameter
1171   18         5       0        6 spoon.template.AbstractTemplate
1172    7         3       0        4 spoon.template.TemplateException
1173   12         4       0        3 spoon.template.StatementTemplate
1174    2         1       0        2 spoon.template.Template
1175   11         1       0        1 spoon.template.ExtensionTemplate
1176   12         3       0        2 spoon.legacy.NameFilter
1177   22         5       0        4 spoon.testing.AbstractAssert
1178   15         3       0        2 spoon.testing.AbstractCtElementAssert
1179    3         1       0        0 spoon.testing.CtPackageAssert
1180   14         5       0        5 spoon.testing.Assert
1181   27         3       0        1 spoon.testing.utils.ProcessorUtils
1182   26         6       0        2 spoon.testing.utils.Check
1183    3         1       0        0 spoon.testing.FileAssert
1184   33         2       2        1 spoon.testing.AbstractCtPackageAssert
1185    3         1       0        0 spoon.testing.CtElementAssert
1186   19         3       0        2 spoon.testing.AbstractFileAssert
1187    8         2       0        0 spoon.OutputType
1188    5         1       0        0 spoon.support.comparator.FixedOrderBasedOnFileNameCompilationUnitComparator
1189    8         1       0        1 spoon.support.comparator.SignatureComparator
1190   13         1       0        2 spoon.support.comparator.CtLineElementComparator
1191   13         2       0        1 spoon.support.comparator.DeepRepresentationComparator
1192   15         1       0        1 spoon.support.comparator.QualifiedNameComparator
1193   59        11       0        2 spoon.support.QueueProcessingManager
1194   38         8       0        5 spoon.support.DefaultOutputDestinationHandler
1195   10         3       0        0 spoon.support.util.ByteSerialization
1196   12         3       0        2 spoon.support.util.internal.MapUtils
1197   65        18       1        1 spoon.support.util.ModelSet
1198   24         6       0        0 spoon.support.util.SortedList
1199    7         2       0        1 spoon.support.util.SignatureBasedSortedSet
1200   47        15       1        0 spoon.support.util.EmptyClearableList
1201   25        11       0        0 spoon.support.util.EmptyClearableSet
1202  110        27       1        3 spoon.support.util.ModelList
1203    7         2       0        0 spoon.support.util.QualifiedNameBasedSortedSet
1204   11         5       0        0 spoon.support.util.EmptyIterator
1205    7         6       0        7 spoon.support.util.ImmutableMap
1206   82        10       0        8 spoon.support.util.RtHelper
1207   29         5       0        1 spoon.support.reflect.cu.CompilationUnitImpl
1208    9         3       0        1 spoon.support.reflect.cu.position.PartialSourcePositionImpl
1209  113        19       0        6 spoon.support.reflect.cu.position.SourcePositionImpl
1210   23         8       0        1 spoon.support.reflect.cu.position.CompoundSourcePositionImpl
1211   15         4       0        1 spoon.support.reflect.cu.position.BodyHolderSourcePositionImpl
1212   19         5       0        1 spoon.support.reflect.cu.position.DeclarationSourcePositionImpl
1213    6         2       0        0 spoon.support.reflect.code.CtFieldReadImpl
1214   15         5       0        0 spoon.support.reflect.code.CtCodeSnippetExpressionImpl
1215   15         5       0        0 spoon.support.reflect.code.CtCodeSnippetStatementImpl
1216   31         8       0        0 spoon.support.reflect.code.CtBinaryOperatorImpl
1217   13         3       0        0 spoon.support.reflect.code.CtTargetedExpressionImpl
1218   24         6       0        0 spoon.support.reflect.code.CtSynchronizedImpl
1219   26         8       0        0 spoon.support.reflect.code.CtTypeAccessImpl
1220   21         5       0        0 spoon.support.reflect.code.CtBreakImpl
1221   21         4       0        0 spoon.support.reflect.code.CtFieldAccessImpl
1222    6         2       0        0 spoon.support.reflect.code.CtAnnotationFieldAccessImpl
1223  142        11       2        2 spoon.support.reflect.code.CtStatementImpl
1224   21         5       0        0 spoon.support.reflect.code.CtContinueImpl
1225   59        12       0        0 spoon.support.reflect.code.CtTryImpl
1226   15         4       0        0 spoon.support.reflect.code.CtWhileImpl
1227   38         7       0        0 spoon.support.reflect.code.CtExpressionImpl
1228   15         4       0        0 spoon.support.reflect.code.CtSuperAccessImpl
1229    8         3       0        0 spoon.support.reflect.code.CtCodeElementImpl
1230   31        10       0        0 spoon.support.reflect.code.CtJavaDocTagImpl
1231   41        12       0        0 spoon.support.reflect.code.CtUnaryOperatorImpl
1232   83        20       1        0 spoon.support.reflect.code.CtBlockImpl
1233   58        10       0        0 spoon.support.reflect.code.CtNewArrayImpl
1234    6         2       0        0 spoon.support.reflect.code.CtThisAccessImpl
1235   90        21       0        0 spoon.support.reflect.code.CtStatementListImpl
1236   24         5       0        0 spoon.support.reflect.code.CtVariableAccessImpl
1237   19         6       0        0 spoon.support.reflect.code.CtThrowImpl
1238   13         3       0        0 spoon.support.reflect.code.CtArrayAccessImpl
1239   15         4       0        0 spoon.support.reflect.code.CtLiteralImpl
1240   89        21       0        0 spoon.support.reflect.code.CtConstructorCallImpl
1241   13         4       0        0 spoon.support.reflect.code.CtOperatorAssignmentImpl
1242   15         4       0        0 spoon.support.reflect.code.CtNewClassImpl
1243   24         6       0        0 spoon.support.reflect.code.CtAssertImpl
1244   29         6       0        0 spoon.support.reflect.code.CtCatchImpl
1245   49        12       0        1 spoon.support.reflect.code.CtCommentImpl
1246   37        10       0        0 spoon.support.reflect.code.CtIfImpl
1247   67        12       0        0 spoon.support.reflect.code.CtForImpl
1248   22         5       0        0 spoon.support.reflect.code.CtLoopImpl
1249    6         2       0        0 spoon.support.reflect.code.CtArrayReadImpl
1250   33         8       0        0 spoon.support.reflect.code.CtConditionalImpl
1251    6         2       0        0 spoon.support.reflect.code.CtArrayWriteImpl
1252   89        21       0        0 spoon.support.reflect.code.CtInvocationImpl
1253   24         6       0        0 spoon.support.reflect.code.CtForEachImpl
1254   32         6       0        0 spoon.support.reflect.code.CtTryWithResourceImpl
1255   62        13       1        1 spoon.support.reflect.code.CtJavaDocImpl
1256   92        21       0        0 spoon.support.reflect.code.CtCaseImpl
1257  110        28       0        0 spoon.support.reflect.code.CtCatchVariableImpl
1258   87        28       0        0 spoon.support.reflect.code.CtLocalVariableImpl
1259   15         4       0        0 spoon.support.reflect.code.CtDoImpl
1260   58        12       0        0 spoon.support.reflect.code.CtAssignmentImpl
1261    6         2       0        0 spoon.support.reflect.code.CtVariableWriteImpl
1262   41         8       0        0 spoon.support.reflect.code.CtSwitchImpl
1263   14         4       0        0 spoon.support.reflect.code.CtExecutableReferenceExpressionImpl
1264   19         6       0        0 spoon.support.reflect.code.CtReturnImpl
1265    6         2       0        0 spoon.support.reflect.code.CtFieldWriteImpl
1266    6         2       0        0 spoon.support.reflect.code.CtVariableReadImpl
1267   42        11       0        1 spoon.support.reflect.CtExtendedModifier
1268  354        29       0        1 spoon.support.reflect.eval.VisitorPartialEvaluator
1269    8         2       0        1 spoon.support.reflect.eval.InlinePartialEvaluator
1270   54        15       0        0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl
1271   88        21       0        0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl
1272   23         4       0        2 spoon.support.reflect.reference.CtLocalVariableReferenceImpl
1273   33        13       0        1 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl
1274   24         8       0        0 spoon.support.reflect.reference.CtVariableReferenceImpl
1275   38        11       0        0 spoon.support.reflect.reference.CtWildcardReferenceImpl
1276  236        31       0        0 spoon.support.reflect.reference.CtExecutableReferenceImpl
1277   20         4       0        0 spoon.support.reflect.reference.CtCatchVariableReferenceImpl
1278   32         6       0        0 spoon.support.reflect.reference.CtParameterReferenceImpl
1279   10         5       0        0 spoon.support.reflect.reference.CtModuleReferenceImpl
1280   10         4       0        1 spoon.support.reflect.reference.CtUnboundVariableReferenceImpl
1281   84        16       0        1 spoon.support.reflect.reference.CtFieldReferenceImpl
1282   46         9       0        0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl
1283   17         8       0        0 spoon.support.reflect.reference.CtPackageReferenceImpl
1284   29         8       0        0 spoon.support.reflect.reference.CtReferenceImpl
1285    7         3       0        0 spoon.support.reflect.declaration.CtEnumValueImpl
1286  124        26       1        2 spoon.support.reflect.declaration.CtClassImpl
1287   14         4       0        0 spoon.support.reflect.declaration.CtUsedServiceImpl
1288  112        21       0        0 spoon.support.reflect.declaration.CtEnumImpl
1289   75        28       0        1 spoon.support.reflect.declaration.CtParameterImpl
1290   30        12       0        1 spoon.support.reflect.declaration.CtAnnotationMethodImpl
1291  297        37       2        3 spoon.support.reflect.declaration.CtAnnotationImpl
1292   13         4       0        1 spoon.support.reflect.declaration.InvisibleArrayConstructorImpl
1293   31        12       0        1 spoon.support.reflect.declaration.CtAnnotationTypeImpl
1294   79        29       0        1 spoon.support.reflect.declaration.CtFieldImpl
1295   45        10       0        0 spoon.support.reflect.declaration.CtPackageExportImpl
1296  219        36       0        0 spoon.support.reflect.declaration.CtModuleImpl
1297   38         8       0        0 spoon.support.reflect.declaration.CtProvidedServiceImpl
1298   20         6       0        0 spoon.support.reflect.declaration.CtInterfaceImpl
1299   72        29       0        0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl
1300   89        28       0        0 spoon.support.reflect.declaration.CtConstructorImpl
1301   97        23       2        3 spoon.support.reflect.declaration.CtPackageImpl
1302  143        58       0        1 spoon.support.reflect.declaration.CtTypeParameterImpl
1303   85        16       0        1 spoon.support.reflect.declaration.CtExecutableImpl
1304   15         4       0        0 spoon.support.reflect.declaration.CtPackageDeclarationImpl
1305   30         7       0        0 spoon.support.reflect.declaration.CtModuleRequirementImpl
1306   53         7       0        0 spoon.support.reflect.declaration.CtImportImpl
1307   19         4       0        0 spoon.support.reflect.declaration.CtNamedElementImpl
1308    7         3       0        0 spoon.support.template.UndefinedParameterException
1309  157        17       2       12 spoon.support.template.Parameters
1310  276        70       0        5 spoon.support.StandardEnvironment
1311   85        18       0        5 spoon.support.JavaOutputProcessor
1312   21        16       0        1 spoon.support.modelobs.EmptyModelChangeListener
1313   53        22       0        1 spoon.support.modelobs.ActionBasedChangeListenerImpl
1314    3         1       0        0 spoon.support.modelobs.context.SetContext
1315    9         3       0        2 spoon.support.modelobs.context.ListContext
1316    3         1       0        0 spoon.support.modelobs.context.ObjectContext
1317   10         3       0        3 spoon.support.modelobs.context.Context
1318    5         1       0        0 spoon.support.modelobs.context.CollectionContext
1319   13         4       0        3 spoon.support.modelobs.context.MapContext
1320   91         6       3        7 spoon.support.modelobs.ChangeCollector
1321    6         5       0        6 spoon.support.modelobs.ActionBasedChangeListener
1322    9         3       0        1 spoon.support.modelobs.action.AddAction
1323    5         2       0        1 spoon.support.modelobs.action.DeleteAllAction
1324    7         3       0        3 spoon.support.modelobs.action.Action
1325    9         3       0        2 spoon.support.modelobs.action.DeleteAction
1326   13         4       0        3 spoon.support.modelobs.action.UpdateAction
1327    8         1       0        1 spoon.support.modelobs.SourceFragmentCreator
1328   17        16       0       14 spoon.support.modelobs.FineModelChangeListener
1329    1         0       0        0 spoon.support.CompressionType
1330   36         3       1        2 spoon.support.SerializationModelStreamer
1331   54         5       3        5 spoon.support.visitor.SubInheritanceHierarchyResolver
1332   69        10       0        9 spoon.support.visitor.java.reflect.RtParameter
1333  110        22       0        1 spoon.support.visitor.java.reflect.RtMethod
1334   43         8       0        0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext
1335    9         3       0        0 spoon.support.visitor.java.internal.PackageRuntimeBuilderContext
1336   25        12       0        0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext
1337   12        11       0        0 spoon.support.visitor.java.internal.RuntimeBuilderContext
1338   34         9       0        0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext
1339   16         4       0        0 spoon.support.visitor.java.internal.VariableRuntimeBuilderContext
1340   16         4       0        0 spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext
1341   35         7       0        0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext
1342   19        18       0       10 spoon.support.visitor.java.JavaReflectionVisitor
1343  289        24       7        2 spoon.support.visitor.java.JavaReflectionTreeBuilder
1344  245        22       0        0 spoon.support.visitor.java.JavaReflectionVisitorImpl
1345  150        16       0        3 spoon.support.visitor.MethodTypingContext
1346   70        14       0        3 spoon.support.visitor.SignaturePrinter
1347  296        24       3       19 spoon.support.visitor.ClassTypingContext
1348    3         1       0        0 spoon.support.visitor.equals.NotEqualException
1349   74        13       0        6 spoon.support.visitor.equals.EqualsVisitor
1350   46         8       1        4 spoon.support.visitor.equals.CloneHelper
1351  159        20       0        1 spoon.support.visitor.equals.EqualsChecker
1352  768        85       0        1 spoon.support.visitor.clone.CloneVisitor
1353  137        39       0        6 spoon.support.visitor.clone.CloneBuilder
1354    4         3       0        4 spoon.support.visitor.GenericTypeAdapter
1355   37         5       0        2 spoon.support.visitor.AbstractTypingContext
1356   58        13       0        5 spoon.support.visitor.TypeReferenceScanner
1357 1072        90      94        1 spoon.support.visitor.replace.ReplacementVisitor
1358    2         1       0        0 spoon.support.visitor.replace.ReplaceListener
1359    8         4       0        1 spoon.support.visitor.replace.InvalidReplaceException
1360    2         1       0        0 spoon.support.visitor.replace.ReplaceMapListener
1361    2         1       0        0 spoon.support.visitor.replace.ReplaceListListener
1362    2         1       0        0 spoon.support.visitor.replace.ReplaceSetListener
1363    5         2       0        0 spoon.support.visitor.replace.CtListener
1364   15         5       0        1 spoon.support.visitor.HashcodeVisitor
1365   27         5       0        3 spoon.support.visitor.ProcessingVisitor
1366   72         5       1        5 spoon.support.gui.SpoonObjectFieldsTable
1367   38         6       1        0 spoon.support.gui.SpoonTreeBuilder
1368  164        21       7        8 spoon.support.gui.SpoonModelTree
1369  532        94       0        2 spoon.support.DefaultCoreFactory
1370    3         2       0        0 spoon.support.OutputDestinationHandler
1371    8         3       0        0 spoon.support.sniper.internal.TokenType
1372    4         3       0        4 spoon.support.sniper.internal.SourceFragmentContext
1373    8         4       0        1 spoon.support.sniper.internal.SourceFragmentContextPrettyPrint
1374    2         1       0        2 spoon.support.sniper.internal.SourceFragment
1375    7         6       0        7 spoon.support.sniper.internal.PrinterEvent
1376   32         6       1        6 spoon.support.sniper.internal.ChangeResolver
1377    3         1       0        2 spoon.support.sniper.internal.SourceFragmentContextSet
1378   27         8       0        1 spoon.support.sniper.internal.TokenPrinterEvent
1379   16         6       0        1 spoon.support.sniper.internal.ElementPrinterEvent
1380   27         5       0        3 spoon.support.sniper.internal.CollectionSourceFragment
1381   17         4       0        3 spoon.support.sniper.internal.SourceFragmentContextList
1382   36         5       0        2 spoon.support.sniper.internal.AbstractSourceFragmentContextCollection
1383   81        17       0        3 spoon.support.sniper.internal.MutableTokenWriter
1384    8         3       0        2 spoon.support.sniper.internal.SourceFragmentContextNormal
1385   12         3       0        3 spoon.support.sniper.internal.DirectPrinterHelper
1386   12         4       0        2 spoon.support.sniper.internal.TokenSourceFragment
1387   78        18       0        1 spoon.support.compiler.ZipFolder
1388    9         2       0        0 spoon.support.compiler.SnippetCompilationError
1389   31        13       0        0 spoon.support.compiler.VirtualFile
1390    6         1       0        2 spoon.support.compiler.FilteringFolder
1391   73         8       0        2 spoon.support.compiler.SnippetCompilationHelper
1392   34        14       0        0 spoon.support.compiler.ZipFile
1393   68        18       0        0 spoon.support.compiler.FileSystemFolder
1394  154        11       0       11 spoon.support.compiler.jdt.JDTTreeBuilderQuery
1395  371        26       1        9 spoon.support.compiler.jdt.JDTTreeBuilderHelper
1396   10         2       0        1 spoon.support.compiler.jdt.FactoryCompilerConfig
1397   32         6       0        1 spoon.support.compiler.jdt.JDTSnippetCompiler
1398  809       195       2        1 spoon.support.compiler.jdt.JDTTreeBuilder
1399   66         4       0        1 spoon.support.compiler.jdt.JDTImportBuilder
1400    8         2       0        0 spoon.support.compiler.jdt.ASTPair
1401  660        37       1        7 spoon.support.compiler.jdt.ReferenceBuilder
1402  386        21       0        9 spoon.support.compiler.jdt.PositionBuilder
1403   23         3       1        0 spoon.support.compiler.jdt.FileCompilerConfig
1404  121         8       5        2 spoon.support.compiler.jdt.JDTBatchCompiler
1405    2         1       0        2 spoon.support.compiler.jdt.CompilationUnitFilter
1406    8         2       0        1 spoon.support.compiler.jdt.TreeBuilderRequestor
1407   11         2       0        0 spoon.support.compiler.jdt.CompilationUnitWrapper
1408  270        10       2        9 spoon.support.compiler.jdt.JDTCommentBuilder
1409  529        63       0        2 spoon.support.compiler.jdt.ParentExiter
1410   20         6       0        0 spoon.support.compiler.ProgressLogger
1411   41        14       0        0 spoon.support.compiler.VirtualFolder
1412   44        15       0        0 spoon.support.compiler.FileSystemFile
1413    6         4       1        5 spoon.support.compiler.SpoonProgress
1414   56        13       0        4 spoon.support.RuntimeProcessingManager
1415    7         3       0        1 spoon.support.SpoonClassNotFoundException
1416   46        14       0       13 spoon.metamodel.MMMethod
1417    1         0       0        0 spoon.metamodel.ConceptKind
1418   86         5       3        4 spoon.refactoring.CtRenameLocalVariableRefactoring
1419    5         4       0        5 spoon.refactoring.CtRenameRefactoring
1420   76         6       4        6 spoon.refactoring.Refactoring
1421   34        11       0        4 spoon.refactoring.AbstractRenameRefactoring
1422  118        23       5       12 spoon.refactoring.CtParameterRemoveRefactoring
1423    2         1       0        2 spoon.refactoring.CtRefactoring
1424    9         4       0        1 spoon.refactoring.RefactoringException
1425    1         0       0        0 spoon.pattern.ConflictResolutionMode
1426    2         1       0        2 spoon.pattern.internal.SubstitutionRequestProvider
1427   24         4       0        2 spoon.pattern.internal.matcher.ChainOfMatchersImpl
1428    2         1       0        2 spoon.pattern.internal.matcher.Matchers
1429   52         6       0        1 spoon.pattern.internal.matcher.MatchingScanner
1430   89        16       0       11 spoon.pattern.internal.matcher.TobeMatched
1431   95         4       0        1 spoon.pattern.internal.ValueConvertorImpl
1432   17         6       0        1 spoon.pattern.internal.parameter.ComputedParameterInfo
1433    4         3       0        4 spoon.pattern.internal.parameter.ParameterComputer
1434   11         9       0        9 spoon.pattern.internal.parameter.ParameterInfo
1435   35         7       0        1 spoon.pattern.internal.parameter.SetParameterInfo
1436   55         9       0        1 spoon.pattern.internal.parameter.ListParameterInfo
1437   64         9       0        1 spoon.pattern.internal.parameter.MapParameterInfo
1438   12         3       0        1 spoon.pattern.internal.parameter.SimpleNameOfTypeReferenceParameterComputer
1439   41         6       2        8 spoon.pattern.internal.ResultHolder
1440    2         1       0        1 spoon.pattern.internal.node.InlineNode
1441  110         7       1        2 spoon.pattern.internal.node.SwitchNode
1442   58         9       1        1 spoon.pattern.internal.node.MapEntryNode
1443    8         3       0        1 spoon.pattern.internal.node.AbstractNode
1444   59        13       0        1 spoon.pattern.internal.node.ForEachNode
1445   23         6       0        2 spoon.pattern.internal.node.ListOfNodes
1446   25         9       0        1 spoon.pattern.internal.node.ConstantNode
1447   24        11       0        1 spoon.pattern.internal.node.ParameterNode
1448   48         2       0        1 spoon.pattern.internal.node.AbstractRepeatableMatcher
1449    2         1       0        2 spoon.pattern.internal.node.PrimitiveMatcher
1450    2         1       0        1 spoon.pattern.internal.ValueConvertor
1451    1         0       0        0 spoon.pattern.Quantifier
1452   38         9       0        8 spoon.pattern.Match
1453    6         5       0        2 spoon.pattern.Generator
1454   20         3       0        1 spoon.javadoc.internal.Pair
1455   61        11       1        2 spoon.javadoc.internal.JavadocBlockTag
1456   59        11       1        3 spoon.javadoc.internal.JavadocInlineTag
1457    2         1       0        2 spoon.javadoc.internal.JavadocDescriptionElement
1458   21         5       0        1 spoon.javadoc.internal.JavadocSnippet
1459  442        42       4       15 spoon.Launcher
1460   29         7       0        7 spoon.compiler.SpoonResourceHelper
1461   63        62       0       61 spoon.compiler.Environment
1462    9         4       0        0 spoon.compiler.InvalidClassPathException
1463    6         2       0        1 spoon.compiler.ModelBuildingException
1464   19         5       0        0 spoon.compiler.builder.AnnotationProcessingOptions
1465   28         4       0        3 spoon.compiler.builder.SourceOptions
1466    9         2       0        0 spoon.compiler.builder.ComplianceOptions
1467    2         1       0        1 spoon.compiler.builder.EncodingProvider
1468   12         4       0        0 spoon.compiler.builder.AdvancedOptions
1469   41         8       0        0 spoon.compiler.builder.ClasspathOptions
1470   16         3       0        0 spoon.compiler.builder.Options
1471   28         7       0        0 spoon.compiler.builder.JDTBuilderImpl
1472    7         6       0        7 spoon.compiler.builder.JDTBuilder
1473    7         6       0        7 spoon.compiler.SpoonFolder
1474    8         7       0        8 spoon.compiler.SpoonResource
Average Object NCSS:                 34.55
Average Object Functions:             5.50
Average Object Inner Classes:         0.50
Average Object Javadoc Comments:      1.85
Program NCSS:                    61,571.00

 Nr. NCSS CCN JVDC Function
   1    2   1    1 org.objectweb.carol.jndi.spi.CmiContext.CmiContext(Context)
   2    2   1    1 org.objectweb.carol.jndi.spi.CmiContext.unwrapObject(Object,Name)
   3   24  18    1 org.objectweb.carol.jndi.spi.CmiContext.wrapObject(Object,Name,boolean)
   4    2   1    0 spoontest.a.ClassA.ClassA()
   5    2   1    0 spoontest.c.ClassC.name(Object)
   6    2   1    0 spoontest.b.ClassB.ClassB()
   7    2   1    0 spoontest.b.ClassB.name(Object)
   8    1   1    0 D.func()
   9    2   1    0 B.func(C)
  10    2   1    0 A.func(int,int)
  11    2   1    0 spoon.test.reference.ReferencingClass.ReferencingClass()
  12    2   1    0 spoon.test.reference.ReferencingClass.name()
  13    2   1    0 spoon.test.reference.ReferencingClass.ID()
  14    4   1    0 MultipleDeclarationsOfLocalVariable.main(String[])
  15    5   1    0 InterfaceEnumRef.testEnumFromInterface()
  16    1   1    0 InterfaceWithEnum.someMethod()
  17   12   4    1 net.sf.jabref.collab.ChangeScanner.bestFit(EntrySorter,EntrySorter,int)
  18    5   1    0 EnumsRef.func()
  19    3   1    0 spoon.test.reference.ReferencedClass.ReferencedClass()
  20    1   1    1 de.uni_bremen.st.quide.persistence.ratings.IRatingLookUp.setRating(String,IViolation)
  21    1   1    1 de.uni_bremen.st.quide.persistence.ratings.IRatingLookUp.getViolationTypeRatings(String)
  22    3   1    0 megamek.client.bot.TestBot.TestBot(String,String,int)
  23    1   1    0 megamek.client.bot.TestBot.initialize()
  24    2   1    0 megamek.client.bot.TestBot.calculatePhysicalTurn()
  25   77  31    0 megamek.client.bot.TestBot.calculateMoveTurn()
  26   91  22    1 megamek.client.bot.TestBot.firstPass(CEntity)
  27  250  85    0 megamek.client.bot.TestBot.calculateMove(Entity)
  28    4   3    0 megamek.client.bot.TestBot.filterMoves(Object[],MoveOption.Table,MoveOption.WeightedComparator,int)
  29   12   5    0 megamek.client.bot.TestBot.initFiring()
  30   35  13    0 megamek.client.bot.TestBot.calculateWeaponAttacks(Entity,Mounted,boolean)
  31    2   1    0 megamek.client.bot.TestBot.bestAttack(MoveOption)
  32   47  16    0 megamek.client.bot.TestBot.bestAttack(MoveOption,CEntity,int)
  33    5   3    0 megamek.client.bot.TestBot.attackUtility(MoveOption,CEntity)
  34   44  13    0 megamek.client.bot.TestBot.calculateFiringTurn()
  35  105  39    1 megamek.client.bot.TestBot.initMovement()
  36    2   1    0 megamek.client.bot.TestBot.processChat(GamePlayerChatEvent)
  37   13   2    0 megamek.client.bot.TestBot.calculateDeployment()
  38    2   1    0 megamek.client.bot.TestBot.continueMovementFor(Entity)
  39    6   1    0 megamek.client.bot.TestBot.calculateMinefieldDeployment()
  40   20   7    0 megamek.client.bot.TestBot.deployMinefields(java.util.Vector,int,int)
  41    1   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.BroadcastShardResponse()
  42    2   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.BroadcastShardResponse(ShardId)
  43    2   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.getIndex()
  44    2   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.getShardId()
  45    3   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.readFrom(StreamInput)
  46    3   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.writeTo(StreamOutput)
  47    6   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.TransportBroadcastAction(Settings,String,ThreadPool,ClusterService,TransportService,ActionFilters,IndexNameExpressionResolver,Request,ShardRequest,String)
  48    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.doExecute(Task,Request,Response)
  49    2   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.doExecute(Request,Response)
  50    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.newResponse(Request,AtomicReferenceArray,ClusterState)
  51    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.newShardRequest(int,ShardRouting,Request)
  52    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.newShardResponse()
  53    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.shardOperation(ShardRequest)
  54    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.shardOperation(ShardRequest,Task)
  55    1   1    1 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.shards(ClusterState,Request,String[])
  56    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.checkGlobalBlock(ClusterState,Request)
  57    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.checkRequestBlock(ClusterState,Request,String[])
  58   17   5    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.AsyncBroadcastAction(Task,Request,Response)
  59   14   6    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.start()
  60    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.newInstance()
  61    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.executor()
  62    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.handleResponse(ShardResponse)
  63    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.handleException(TransportException)
  64   22   4    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.performOperation(ShardIterator,ShardRouting,int)
  65    5   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.onOperation(ShardRouting,int,ShardResponse)
  66   16  11    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.onOperation(ShardRouting,ShardIterator,int,Exception)
  67    4   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.finishHim()
  68   12   8    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.setFailure(ShardIterator,int,Exception)
  69    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.ShardTransportHandler.messageReceived(ShardRequest,TransportChannel,Task)
  70    2   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.ShardTransportHandler.messageReceived(ShardRequest,TransportChannel)
  71    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseDragged(MouseEvent)
  72    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseEntered(MouseEvent)
  73    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseExited(MouseEvent)
  74    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseHover(MouseEvent)
  75    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseMoved(MouseEvent)
  76    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseDragged(MouseEvent)
  77    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseEntered(MouseEvent)
  78    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseExited(MouseEvent)
  79    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseMoved(MouseEvent)
  80    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseHover(MouseEvent)
  81    1   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mouseDoubleClicked(MouseEvent)
  82    3   2    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mouseDragged(MouseEvent)
  83    8   3    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mousePressed(MouseEvent)
  84    3   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mouseReleased(MouseEvent)
  85    1   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mouseDoubleClicked(MouseEvent)
  86    6   2    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mouseDragged(MouseEvent)
  87    4   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mousePressed(MouseEvent)
  88    1   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mouseReleased(MouseEvent)
  89    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.SelectorFigure.dispose()
  90   13   6    0 org.eclipse.draw2d.parts.ScrollableThumbnail.SelectorFigure.paintFigure(Graphics)
  91    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.FigureListener$1.figureMoved(IFigure)
  92   14  11    0 org.eclipse.draw2d.parts.ScrollableThumbnail.KeyListener.Stub$1.keyPressed(KeyEvent)
  93    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.PropertyChangeListener$1.propertyChange(PropertyChangeEvent)
  94    3   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollableThumbnail()
  95    4   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollableThumbnail(Viewport)
  96    6   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.deactivate()
  97    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.getViewportScaleX()
  98    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.getViewportScaleY()
  99   10   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.initialize()
 100   10   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.reconfigureSelectorBounds()
 101    5   4    1 org.eclipse.draw2d.parts.ScrollableThumbnail.setScales(float,float)
 102    4   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.setViewport(Viewport)
 103    2   1    0 app.Test.main(String[])
 104    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getId()
 105    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getIdentifier()
 106    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getTitle()
 107    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getDescription()
 108    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getUrl()
 109    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getCreatedAt()
 110    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getClosedAt()
 111    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getIssueType()
 112    1   1    0 test.ExtendsObject.oneMethod()
 113    2   1    0 test.ExtendsObject.toString()
 114    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector()
 115    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(int)
 116    3   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(int,double)
 117    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(preset[])
 118    4   4    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(d.clone[],boolean)
 119    7   5    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(d[],int,int)
 120    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(Double[])
 121    8   6    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(Double[],int,int)
 122    6   4    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(RealVector)
 123    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector)
 124    2   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,boolean)
 125    4   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,ArrayRealVector)
 126    7   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,RealVector)
 127    7   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(RealVector,ArrayRealVector)
 128    6   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,ArrayRealVector[])
 129    6   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(l2[],ArrayRealVector)
 130    6   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(l2[],l2[][])
 131    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.copy()
 132   18   5    1 org.apache.commons.math4.linear.ArrayRealVector.add(RealVector)
 133   18   5    1 org.apache.commons.math4.linear.ArrayRealVector.subtract(RealVector)
 134    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.map(UnivariateFunction)
 135    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapToSelf(UnivariateFunction)
 136    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapAddToSelf(double)
 137    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapSubtractToSelf(double)
 138    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapMultiplyToSelf(double)
 139    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapDivideToSelf(double)
 140   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.ebeMultiply(RealVector)
 141   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.ebeDivide(RealVector)
 142    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.getDataRef()
 143    9   4    1 org.apache.commons.math4.linear.ArrayRealVector.dotProduct(RealVector)
 144    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.getNorm()
 145    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.getL1Norm()
 146    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.getLInfNorm()
 147   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.getDistance(RealVector)
 148   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.getL1Distance(RealVector)
 149   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.getLInfDistance(RealVector)
 150   18   7    1 org.apache.commons.math4.linear.ArrayRealVector.outerProduct(RealVector)
 151    4   4    1 org.apache.commons.math4.linear.ArrayRealVector.getEntry(int)
 152    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.getDimension()
 153    4   3    1 org.apache.commons.math4.linear.ArrayRealVector.append(RealVector)
 154    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.append(ArrayRealVector)
 155    5   1    1 org.apache.commons.math4.linear.ArrayRealVector.append(double)
 156    9   4    1 org.apache.commons.math4.linear.ArrayRealVector.getSubVector(int,int)
 157    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.setEntry(int,double)
 158    4   3    1 org.apache.commons.math4.linear.ArrayRealVector.addToEntry(int,double)
 159    9   4    1 org.apache.commons.math4.linear.ArrayRealVector.setSubVector(int,RealVector)
 160    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.setSubVector(int,int[])
 161    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.set(double)
 162    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.toArray()
 163    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.toString()
 164    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.checkVectorDimensions(RealVector)
 165    3   3    1 org.apache.commons.math4.linear.ArrayRealVector.checkVectorDimensions(int)
 166    5   4    1 org.apache.commons.math4.linear.ArrayRealVector.isNaN()
 167    7   6    1 org.apache.commons.math4.linear.ArrayRealVector.isInfinite()
 168   14  12    1 org.apache.commons.math4.linear.ArrayRealVector.equals(Object)
 169    4   3    1 org.apache.commons.math4.linear.ArrayRealVector.hashCode()
 170    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.combine(double,double,RealVector)
 171   11   4    1 org.apache.commons.math4.linear.ArrayRealVector.combineToSelf(double,double,RealVector)
 172    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorPreservingVisitor)
 173    6   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorPreservingVisitor,int,int)
 174    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorPreservingVisitor)
 175    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorPreservingVisitor,int,int)
 176    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorChangingVisitor)
 177    6   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorChangingVisitor,int,int)
 178    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorChangingVisitor)
 179    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorChangingVisitor,int,int)
 180    3   1    0 org.ehcache.core.SpecIterator.SpecIterator(V,V)
 181    2   1    0 org.ehcache.core.SpecIterator.hasNext()
 182    2   1    0 org.ehcache.core.SpecIterator.Cache.Entry$1.getKey()
 183    2   1    0 org.ehcache.core.SpecIterator.Cache.Entry$1.getValue()
 184   17   5    0 org.ehcache.core.SpecIterator.next()
 185    5   3    0 org.ehcache.core.SpecIterator.remove()
 186    3   1    0 FieldAccessRes.method()
 187    2   2    1 daikon.FileIO.FileIO()
 188    2   1    0 daikon.FileIO.DeclError.DeclError(String)
 189    3   1    0 daikon.FileIO.DeclError.detail(ParseState,String,Object)
 190    2   1    0 daikon.FileIO.ParentRelation.toString()
 191    2   2    0 daikon.FileIO.isComment(String)
 192    8   3    1 daikon.FileIO.read_declaration_files(File)
 193    7   2    1 daikon.FileIO.read_declaration_file(File,PptMap)
 194   92  30    1 daikon.FileIO.read_ppt_decl(ParseState,String)
 195    7   1    1 daikon.FileIO.parse_ppt_parent(ParseState,Scanner)
 196    4   2    1 daikon.FileIO.parse_ppt_flags(ParseState,Scanner,PptFlags)
 197    4   1    1 daikon.FileIO.parse_ppt_type(ParseState,Scanner)
 198   24  13    0 daikon.FileIO.read_declaration(ParseState)
 199   11   6    0 daikon.FileIO.read_VarInfos(ParseState,String)
 200   58  23    1 daikon.FileIO.read_VarInfo(ParseState,String)
 201   18   9    0 daikon.FileIO.read_var_comparability(ParseState,String)
 202    6   1    0 daikon.FileIO.read_input_language(ParseState,String)
 203   12   3    0 daikon.FileIO.read_decl_version(ParseState,String)
 204    8   5    0 daikon.FileIO.read_list_implementors(LineNumberReader,File)
 205    4   1    0 daikon.FileIO.Invocation.Invocation(PptTopLevel,Object[],Object[][])
 206    2   1    0 daikon.FileIO.Invocation.format()
 207   24   9    0 daikon.FileIO.Invocation.format(boolean)
 208    8   4    1 daikon.FileIO.Invocation.canonicalize()
 209    5   3    0 daikon.FileIO.Invocation.equals(Object)
 210    2   1    0 daikon.FileIO.Invocation.compareTo(Invocation)
 211    2   1    0 daikon.FileIO.Invocation.hashCode()
 212    3   1    1 daikon.FileIO.read_data_trace_files(String,PptMap)
 213   29  14    1 daikon.FileIO.read_data_trace_files(String,PptMap,Processor,boolean)
 214   10  12    0 daikon.FileIO.warn_if_hierarchy_mismatch(PptMap)
 215    2   1    0 daikon.FileIO.Processor.process_sample(PptMap,PptTopLevel,ValueTuple,Integer)
 216    3   1    1 daikon.FileIO.read_data_trace_file(String,PptMap)
 217   46  11    0 daikon.FileIO.ParseState.ParseState(String,boolean,boolean,PptMap)
 218   15   8    0 daikon.FileIO.connectToChicory()
 219   29  13    1 daikon.FileIO.read_data_trace_file(String,PptMap,Processor,boolean,boolean)
 220  111  53    0 daikon.FileIO.read_data_trace_record(ParseState)
 221   21  18    1 daikon.FileIO.process_sample(PptMap,PptTopLevel,ValueTuple,Integer)
 222    8   7    1 daikon.FileIO.has_unmatched_procedure_entry(PptTopLevel)
 223   30  12    1 daikon.FileIO.process_unmatched_procedure_entries()
 224    3   2    1 daikon.FileIO.print_invocations_verbose(Invocation)
 225   14   4    1 daikon.FileIO.print_invocations_grouped(Invocation)
 226   84  49    0 daikon.FileIO.read_vals_and_mods_from_trace_file(LineNumberReader,String,PptTopLevel,Object[],Object[][])
 227   48  21    1 daikon.FileIO.add_orig_variables(PptTopLevel,Object[],Object[][],Integer)
 228   13   5    1 daikon.FileIO.add_derived_variables(PptTopLevel,Object[],Object[][])
 229    4   1    0 daikon.FileIO.SerialFormat.SerialFormat(PptMap,Configuration)
 230    3   1    0 daikon.FileIO.write_serialized_pptmap(PptMap,File)
 231   29  13    1 daikon.FileIO.read_serialized_pptmap(File,boolean)
 232    5   9    1 daikon.FileIO.ppt_included(String)
 233    6   6    0 daikon.FileIO.var_included(String)
 234    4   3    1 daikon.FileIO.skip_decl(LineNumberReader)
 235   38   9    1 daikon.FileIO.unescape_decl(String)
 236    4   4    0 daikon.FileIO.VarDefinition.clone()
 237    7   4    0 daikon.FileIO.VarDefinition.copy()
 238    4   1    1 daikon.FileIO.VarDefinition.clear_parent_relation()
 239    8   2    1 daikon.FileIO.VarDefinition.VarDefinition(ParseState,Scanner)
 240    7   1    0 daikon.FileIO.VarDefinition.VarDefinition(String,VarKind,ProglangType)
 241    5   3    1 daikon.FileIO.VarDefinition.parse_var_kind(Scanner)
 242    3   1    1 daikon.FileIO.VarDefinition.parse_enclosing_var(Scanner)
 243    3   1    1 daikon.FileIO.VarDefinition.parse_reference_type(Scanner)
 244    9   3    1 daikon.FileIO.VarDefinition.parse_array(Scanner)
 245    4   2    1 daikon.FileIO.VarDefinition.parse_function_args(Scanner)
 246    4   1    0 daikon.FileIO.VarDefinition.parse_rep_type(Scanner)
 247    4   1    0 daikon.FileIO.VarDefinition.parse_dec_type(Scanner)
 248    4   2    1 daikon.FileIO.VarDefinition.parse_flags(Scanner)
 249    4   2    1 daikon.FileIO.VarDefinition.parse_lang_flags(Scanner)
 250    4   1    1 daikon.FileIO.VarDefinition.parse_comparability(Scanner)
 251   13   6    1 daikon.FileIO.VarDefinition.parse_parent(Scanner,ParentRelation)
 252    4   1    1 daikon.FileIO.VarDefinition.parse_constant(Scanner)
 253    2   1    1 daikon.FileIO.VarDefinition.need(Scanner,String)
 254    2   1    1 daikon.FileIO.VarDefinition.need_eol(Scanner)
 255    2   1    1 daikon.FileIO.VarDefinition.parse_enum_val(Scanner,E,String)
 256    4   2    1 daikon.FileIO.need(ParseState,Scanner,String)
 257    3   2    1 daikon.FileIO.need_eol(ParseState,Scanner)
 258   13   5    1 daikon.FileIO.parse_enum_val(ParseState,Scanner,E,String)
 259    2   2    0 daikon.FileIO.decl_error(ParseState,String,Object)
 260    5   3    1 daikon.FileIO.is_declaration_header(String)
 261    2   1    0 com.example.Foo.Bar.Inner$1.method(Type)
 262    4   1    0 com.example.Foo.Foo()
 263    2   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.onCreateView(LayoutInflater,ViewGroup,Bundle)
 264    5   2    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.RadioGroup.OnCheckedChangeListener$1.onCheckedChanged(RadioGroup,int)
 265   11   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.onViewCreated(View,Bundle)
 266    5   6    1 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.isComplete()
 267    5   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.resetFields()
 268    3   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.changeUndisplayedTransporteurEditTextVisibility(int)
 269    1   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.CompletableFragment.isComplete()
 270    2   2    0 daikon.Daikon.Daikon()
 271    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(String)
 272    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(String,Object)
 273    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(Exception)
 274    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(Object)
 275    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage()
 276   13   5    1 daikon.Daikon.main(String[])
 277  106  38    1 daikon.Daikon.mainHelper(String[])
 278   10   6    1 daikon.Daikon.cleanup()
 279    5   1    0 daikon.Daikon.FileOptions.FileOptions(File,String,File,File)
 280  229 106    0 daikon.Daikon.read_options(String[],String)
 281  139   3    1 daikon.Daikon.setup_proto_invs()
 282    5   3    1 daikon.Daikon.createUpperPpts(PptMap)
 283   15   7    1 daikon.Daikon.init_ppt(PptTopLevel,PptMap)
 284   28   8    1 daikon.Daikon.create_combined_exits(PptMap)
 285   10  10    0 daikon.Daikon.filter_invs(Invariant)
 286   32  10    1 daikon.Daikon.create_orig_vars(PptTopLevel,PptMap)
 287   17   8    0 daikon.Daikon.load_decls_files(File)
 288   15   6    0 daikon.Daikon.load_spinfo_files(File)
 289    9   3    0 daikon.Daikon.load_map_files(PptMap,File)
 290   13   6    1 daikon.Daikon.setup_splitters(PptTopLevel)
 291    6   1    0 daikon.Daikon.FileIOProgress.FileIOProgress()
 292   10   7    0 daikon.Daikon.FileIOProgress.run()
 293    7   3    1 daikon.Daikon.FileIOProgress.clear()
 294    4   3    1 daikon.Daikon.FileIOProgress.display()
 295   11   5    1 daikon.Daikon.FileIOProgress.display(String)
 296   19   7    0 daikon.Daikon.FileIOProgress.message()
 297   74  30    1 daikon.Daikon.process_data(PptMap,String)
 298    2   1    0 daikon.Daikon.Count.Count(int)
 299   30   7    1 daikon.Daikon.ppt_stats(PptMap)
 300   10   2    1 daikon.Daikon.suppressWithSimplify(PptMap)
 301    2   1    1 daikon.Daikon.setup_NISuppression()
 302   13  13    1 daikon.Daikon.setupEquality(PptTopLevel)
 303    4   2    0 daikon.Daikon.create_splitters(File)
 304    5   3    1 daikon.Daikon.processOmissions(PptMap)
 305   33  23    1 daikon.Daikon.setup_ppt_perc(File,int)
 306   24   8    1 daikon.Daikon.undoOpts(PptMap)
 307    2   1    0 org.ethack.orwall.BackgroundProcess.BackgroundProcess()
 308    5   2    0 org.ethack.orwall.BackgroundProcess.onHandleIntent(Intent)
 309    3   1    0 org.ethack.orwall.BackgroundProcess.managePortal(boolean)
 310    2   1    0 org.ethack.orwall.PreferencesActivity.onCreate(Bundle)
 311    2   1    0 org.ethack.orwall.PreferencesActivity.onBuildHeaders(Header)
 312    4   1    0 org.ethack.orwall.PreferencesActivity.isValidFragment(String)
 313    2   1    0 org.ethack.orwall.PreferencesActivity.onDestroy()
 314    6   6    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.SharedPreferences.OnSharedPreferenceChangeListener$1.onSharedPreferenceChanged(SharedPreferences,String)
 315    4   1    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.onCreate(Bundle)
 316    3   1    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.onResume()
 317    3   1    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.onPause()
 318    2   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.SharedPreferences.OnSharedPreferenceChangeListener$1.onSharedPreferenceChanged(SharedPreferences,String)
 319    3   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.onCreate(Bundle)
 320    3   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.onResume()
 321    3   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.onPause()
 322   12   4    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.SharedPreferences.OnSharedPreferenceChangeListener$1.onSharedPreferenceChanged(SharedPreferences,String)
 323    4   1    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.onCreate(Bundle)
 324    3   1    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.onResume()
 325    3   1    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.onPause()
 326    3   1    0 org.ethack.orwall.PreferencesActivity.ProxyPorts.onCreate(Bundle)
 327    2   1    0 spoon.test.same.B.getName()
 328    2   1    0 spoon.test.same.A.createB()
 329    2   1    0 org.elasticsearch.tasks.TaskManager.TaskManager(Settings)
 330    3   1    0 org.elasticsearch.tasks.TaskManager.setTaskResultsService(TaskPersistenceService)
 331   13   5    1 org.elasticsearch.tasks.TaskManager.register(String,String,TransportRequest)
 332   12   5    0 org.elasticsearch.tasks.TaskManager.registerCancellableTask(Task)
 333    6   3    1 org.elasticsearch.tasks.TaskManager.cancel(CancellableTask,String,String)
 334   11   5    1 org.elasticsearch.tasks.TaskManager.unregister(Task)
 335    2   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onResponse(Void)
 336    3   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onFailure(Exception)
 337   17   5    1 org.elasticsearch.tasks.TaskManager.persistResult(Task,Exception,Response)
 338    2   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onResponse(Void)
 339    3   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onFailure(Exception)
 340   18   5    1 org.elasticsearch.tasks.TaskManager.persistResult(Task,Response,Response)
 341    5   2    1 org.elasticsearch.tasks.TaskManager.getTasks()
 342    5   2    1 org.elasticsearch.tasks.TaskManager.getCancellableTasks()
 343    6   3    1 org.elasticsearch.tasks.TaskManager.getTask(long)
 344    6   3    1 org.elasticsearch.tasks.TaskManager.getCancellableTask(long)
 345    2   1    1 org.elasticsearch.tasks.TaskManager.getBanCount()
 346    9   4    1 org.elasticsearch.tasks.TaskManager.setBan(TaskId,String)
 347    3   1    1 org.elasticsearch.tasks.TaskManager.removeBan(TaskId)
 348   18   8    0 org.elasticsearch.tasks.TaskManager.clusterChanged(ClusterChangedEvent)
 349    6   5    0 org.elasticsearch.tasks.TaskManager.registerChildTask(Task,String)
 350    8   7    1 org.elasticsearch.tasks.TaskManager.waitForTaskCompletion(Task,long)
 351    2   1    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.CancellableTaskHolder(CancellableTask)
 352   13   3    1 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.cancel(String,String)
 353    2   1    1 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.cancel(String)
 354   13   4    1 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.finish()
 355    2   1    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.hasParent(TaskId)
 356    2   1    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.getTask()
 357    5   3    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.registerChildTaskNode(String)
 358    2   1    0 Demo3.doSomething()
 359    2   1    0 Foo2.ActionListener$1.actionPerformed(ActionEvent)
 360    5   1    0 Foo2.foo()
 361   10   4    0 org.sat4j.minisat.core.Solver.dimacs2internal(IVecInt)
 362    2   1    0 org.sat4j.minisat.core.Solver.registerLiteral(int)
 363    2   1    1 org.sat4j.minisat.core.Solver.Solver(D,D,IOrder,RestartStrategy)
 364    2   1    0 org.sat4j.minisat.core.Solver.Solver(D,D,SearchParams,IOrder,RestartStrategy)
 365    7   1    0 org.sat4j.minisat.core.Solver.Solver(D,D,SearchParams,IOrder,RestartStrategy,ILogAble)
 366    6   1    0 org.sat4j.minisat.core.Solver.setDataStructureFactory(D)
 367    2   1    1 org.sat4j.minisat.core.Solver.isVerbose()
 368    2   1    1 org.sat4j.minisat.core.Solver.setVerbose(boolean)
 369    2   1    0 org.sat4j.minisat.core.Solver.setSearchListener(S)
 370    2   1    0 org.sat4j.minisat.core.Solver.getSearchListener()
 371    2   1    0 org.sat4j.minisat.core.Solver.setLearner(D)
 372    5   2    0 org.sat4j.minisat.core.Solver.setLearningStrategy(D)
 373    3   1    0 org.sat4j.minisat.core.Solver.setTimeout(int)
 374    3   1    0 org.sat4j.minisat.core.Solver.setTimeoutMs(long)
 375    3   1    0 org.sat4j.minisat.core.Solver.setTimeoutOnConflicts(int)
 376    2   1    0 org.sat4j.minisat.core.Solver.setSearchParams(SearchParams)
 377    2   1    0 org.sat4j.minisat.core.Solver.getSearchParams()
 378    2   1    0 org.sat4j.minisat.core.Solver.setRestartStrategy(RestartStrategy)
 379    2   1    0 org.sat4j.minisat.core.Solver.getRestartStrategy()
 380    9   4    0 org.sat4j.minisat.core.Solver.expireTimeout()
 381    2   1    0 org.sat4j.minisat.core.Solver.nAssigns()
 382    2   1    0 org.sat4j.minisat.core.Solver.nConstraints()
 383   14   3    0 org.sat4j.minisat.core.Solver.learn(Constr)
 384    2   1    0 org.sat4j.minisat.core.Solver.decisionLevel()
 385    4   1    0 org.sat4j.minisat.core.Solver.newVar()
 386    4   1    0 org.sat4j.minisat.core.Solver.newVar(int)
 387    3   1    0 org.sat4j.minisat.core.Solver.addClause(IVecInt)
 388   10   3    0 org.sat4j.minisat.core.Solver.removeConstr(IConstr)
 389   11   5    1 org.sat4j.minisat.core.Solver.removeSubsumedConstr(IConstr)
 390    3   2    0 org.sat4j.minisat.core.Solver.addAllClauses(IVecInt)
 391    6   2    0 org.sat4j.minisat.core.Solver.addAtMost(IVecInt,int)
 392    3   1    0 org.sat4j.minisat.core.Solver.addAtLeast(IVecInt,int)
 393    5   1    0 org.sat4j.minisat.core.Solver.addExactly(IVecInt,int)
 394   11   4    0 org.sat4j.minisat.core.Solver.simplifyDB()
 395    6   3    1 org.sat4j.minisat.core.Solver.model()
 396    2   1    0 org.sat4j.minisat.core.Solver.enqueue(int)
 397   13   7    0 org.sat4j.minisat.core.Solver.enqueue(int,Constr)
 398   44   9    1 org.sat4j.minisat.core.Solver.analyze(Constr,Pair)
 399   44  28    1 org.sat4j.minisat.core.Solver.analyzeFinalConflictInTermsOfAssumptions(Constr,IVecInt,int)
 400    1   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
 401    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
 402    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
 403    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
 404    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
 405    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
 406    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
 407    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
 408    7   2    0 org.sat4j.minisat.core.Solver.setSimplifier(SimplificationType)
 409    2   1    0 org.sat4j.minisat.core.Solver.setSimplifier(ISimplifier)
 410    2   1    0 org.sat4j.minisat.core.Solver.getSimplifier()
 411   16   8    0 org.sat4j.minisat.core.Solver.simpleSimplification(IVecInt)
 412    9   4    0 org.sat4j.minisat.core.Solver.expensiveSimplification(IVecInt)
 413   31  12    0 org.sat4j.minisat.core.Solver.analyzeRemovable(int)
 414    9   4    0 org.sat4j.minisat.core.Solver.expensiveSimplificationWLOnly(IVecInt)
 415   23   8    0 org.sat4j.minisat.core.Solver.analyzeRemovableWLOnly(int)
 416   15   2    1 org.sat4j.minisat.core.Solver.undoOne()
 417    4   2    1 org.sat4j.minisat.core.Solver.claBumpActivity(Constr)
 418    2   1    0 org.sat4j.minisat.core.Solver.varBumpActivity(int)
 419    4   2    0 org.sat4j.minisat.core.Solver.claRescalActivity()
 420   14   4    1 org.sat4j.minisat.core.Solver.propagate()
 421   15   5    0 org.sat4j.minisat.core.Solver.reduceClausesForFalsifiedLiteral(int)
 422    9   2    0 org.sat4j.minisat.core.Solver.record(Constr)
 423    5   1    1 org.sat4j.minisat.core.Solver.assume(int)
 424    7   2    1 org.sat4j.minisat.core.Solver.cancel()
 425    5   2    1 org.sat4j.minisat.core.Solver.cancelLearntLiterals(int)
 426    3   2    1 org.sat4j.minisat.core.Solver.cancelUntil(int)
 427   74  26    0 org.sat4j.minisat.core.Solver.search(IVecInt)
 428    8   3    0 org.sat4j.minisat.core.Solver.preventTheSameDecisionsToBeMade()
 429    1   1    0 org.sat4j.minisat.core.Solver.analyzeAtRootLevel(Constr)
 430   31  13    1 org.sat4j.minisat.core.Solver.modelFound()
 431    9   2    1 org.sat4j.minisat.core.Solver.forget(int)
 432    6   4    1 org.sat4j.minisat.core.Solver.setAndPropagate(int)
 433   66  14    0 org.sat4j.minisat.core.Solver.primeImplicant()
 434    6   6    0 org.sat4j.minisat.core.Solver.primeImplicant(int)
 435    6   6    0 org.sat4j.minisat.core.Solver.model(int)
 436    5   2    0 org.sat4j.minisat.core.Solver.clearLearntClauses()
 437    5   1    0 org.sat4j.minisat.core.Solver.reduceDB()
 438    2   1    1 org.sat4j.minisat.core.Solver.sortOnActivity()
 439    3   1    1 org.sat4j.minisat.core.Solver.decayActivities()
 440    2   1    1 org.sat4j.minisat.core.Solver.claDecayActivity()
 441    2   1    1 org.sat4j.minisat.core.Solver.isSatisfiable()
 442    2   1    1 org.sat4j.minisat.core.Solver.isSatisfiable(boolean)
 443    2   1    0 org.sat4j.minisat.core.Solver.isSatisfiable(IVecInt)
 444    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.ConflictTimerAdapter$1.run()
 445   14   7    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.reduce(Constr)
 446    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onConflictAnalysis(Constr)
 447    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onClauseLearning(Constr)
 448    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.toString()
 449    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.init()
 450    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.getTimer()
 451    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onPropagation(Constr)
 452   29   1    0 org.sat4j.minisat.core.Solver.fixedSize(int)
 453   14   6    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.reduce(Constr)
 454    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.getTimer()
 455    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.toString()
 456    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.init()
 457    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onClauseLearning(Constr)
 458    3   2    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onConflictAnalysis(Constr)
 459    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onPropagation(Constr)
 460   28   1    0 org.sat4j.minisat.core.Solver.activityBased(ConflictTimer)
 461    4   2    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.run()
 462    2   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.GlucoseLCDS(ConflictTimer)
 463   12   5    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.reduce(Constr)
 464    2   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.getTimer()
 465    2   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.toString()
 466    6   2    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.init()
 467    3   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.onClauseLearning(Constr)
 468   10   3    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.computeLBD(Constr)
 469    1   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.onConflictAnalysis(Constr)
 470    1   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.onPropagation(Constr)
 471    2   1    0 org.sat4j.minisat.core.Solver.Glucose2LCDS.Glucose2LCDS(ConflictTimer)
 472    2   1    0 org.sat4j.minisat.core.Solver.Glucose2LCDS.toString()
 473    6   3    0 org.sat4j.minisat.core.Solver.Glucose2LCDS.onPropagation(Constr)
 474    6   2    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.run()
 475    6   2    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.reset()
 476    6   2    0 org.sat4j.minisat.core.Solver.setLearnedConstraintsDeletionStrategy(LearnedConstraintsDeletionStrategy)
 477    2   1    0 org.sat4j.minisat.core.Solver.TimerTask$1.run()
 478    2   1    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.run()
 479  106  38    0 org.sat4j.minisat.core.Solver.isSatisfiable(IVecInt,boolean)
 480    2   1    0 org.sat4j.minisat.core.Solver.printInfos(PrintWriter)
 481   10   2    0 org.sat4j.minisat.core.Solver.printInfos(PrintWriter,String)
 482   13   4    1 org.sat4j.minisat.core.Solver.printLearntClausesInfos(PrintWriter,String)
 483    2   1    0 org.sat4j.minisat.core.Solver.getStats()
 484    2   1    1 org.sat4j.minisat.core.Solver.initStats(SolverStats)
 485    2   1    0 org.sat4j.minisat.core.Solver.getOrder()
 486    3   1    0 org.sat4j.minisat.core.Solver.setOrder(IOrder)
 487    2   1    0 org.sat4j.minisat.core.Solver.getVocabulary()
 488   15   3    0 org.sat4j.minisat.core.Solver.reset()
 489    4   3    0 org.sat4j.minisat.core.Solver.nVars()
 490   16   4    1 org.sat4j.minisat.core.Solver.addConstr(Constr)
 491    2   1    0 org.sat4j.minisat.core.Solver.getDSFactory()
 492    2   1    0 org.sat4j.minisat.core.Solver.getOutLearnt()
 493    2   1    1 org.sat4j.minisat.core.Solver.getIthConstr(int)
 494    2   1    0 org.sat4j.minisat.core.Solver.printStat(PrintStream,String)
 495    2   1    0 org.sat4j.minisat.core.Solver.printStat(PrintWriter)
 496    6   1    0 org.sat4j.minisat.core.Solver.printStat(PrintWriter,String)
 497   32   4    0 org.sat4j.minisat.core.Solver.toString(String)
 498    2   1    0 org.sat4j.minisat.core.Solver.toString()
 499    2   2    0 org.sat4j.minisat.core.Solver.getTimeout()
 500    4   3    1 org.sat4j.minisat.core.Solver.getTimeoutMs()
 501    2   1    0 org.sat4j.minisat.core.Solver.setExpectedNumberOfClauses(int)
 502    2   1    0 org.sat4j.minisat.core.Solver.getStat()
 503    4   3    0 org.sat4j.minisat.core.Solver.findModel()
 504    4   3    0 org.sat4j.minisat.core.Solver.findModel(IVecInt)
 505    2   1    0 org.sat4j.minisat.core.Solver.isDBSimplificationAllowed()
 506    2   1    0 org.sat4j.minisat.core.Solver.setDBSimplificationAllowed(boolean)
 507    2   1    1 org.sat4j.minisat.core.Solver.nextFreeVarId(boolean)
 508    2   1    1 org.sat4j.minisat.core.Solver.addBlockingClause(IVecInt)
 509   11   7    1 org.sat4j.minisat.core.Solver.unset(int)
 510    2   1    1 org.sat4j.minisat.core.Solver.setLogPrefix(String)
 511    2   1    1 org.sat4j.minisat.core.Solver.getLogPrefix()
 512    4   1    1 org.sat4j.minisat.core.Solver.unsatExplanation()
 513   11   4    1 org.sat4j.minisat.core.Solver.modelWithInternalVariables()
 514    2   1    1 org.sat4j.minisat.core.Solver.realNumberOfVariables()
 515    2   1    1 org.sat4j.minisat.core.Solver.stop()
 516    6   2    1 org.sat4j.minisat.core.Solver.backtrack(Constr[])
 517    7   5    1 org.sat4j.minisat.core.Solver.truthValue(int)
 518    2   1    1 org.sat4j.minisat.core.Solver.currentDecisionLevel()
 519    2   2    1 org.sat4j.minisat.core.Solver.getLiteralsPropagatedAt(int)
 520    2   2    1 org.sat4j.minisat.core.Solver.suggestNextLiteralToBranchOn(int)
 521    2   1    0 org.sat4j.minisat.core.Solver.isNeedToReduceDB()
 522    2   1    0 org.sat4j.minisat.core.Solver.setNeedToReduceDB(boolean)
 523    2   1    0 org.sat4j.minisat.core.Solver.setLogger(ILogAble)
 524    2   1    0 org.sat4j.minisat.core.Solver.getLogger()
 525    2   1    0 org.sat4j.minisat.core.Solver.getVariableHeuristics()
 526    2   1    0 org.sat4j.minisat.core.Solver.getLearnedConstraints()
 527   16   6    1 org.sat4j.minisat.core.Solver.setLearnedConstraintsDeletionStrategy(ConflictTimer,LearnedConstraintsEvaluationType)
 528   14   5    1 org.sat4j.minisat.core.Solver.setLearnedConstraintsDeletionStrategy(LearnedConstraintsEvaluationType)
 529    2   1    0 org.sat4j.minisat.core.Solver.isSolverKeptHot()
 530    2   1    0 org.sat4j.minisat.core.Solver.setKeepSolverHot(boolean)
 531    2   1    0 org.sat4j.minisat.core.Solver.Comparator$1.compare(Integer,Integer)
 532   19   7    0 org.sat4j.minisat.core.Solver.addClauseOnTheFly(IConstr[])
 533    2   1    0 org.sat4j.minisat.core.Solver.getSolvingEngine()
 534   17   6    1 org.sat4j.minisat.core.Solver.addAtMostOnTheFly(IConstr[],int)
 535   14   4    0 org.sat4j.minisat.core.Solver.fromLastDecisionLevel(IVecInt)
 536    2   1    0 org.sat4j.minisat.core.Solver.setUnitClauseProvider(UnitClauseProvider)
 537    2   2    0 daikon.tools.InvariantChecker.InvariantChecker()
 538    7   4    0 daikon.tools.InvariantChecker.main(String[])
 539  113  47    1 daikon.tools.InvariantChecker.mainHelper(String[])
 540    3   1    0 daikon.tools.InvariantChecker.toPercentage(int,int)
 541   29  10    0 daikon.tools.InvariantChecker.checkInvariants()
 542    3   1    0 daikon.tools.InvariantChecker.EnterCall.EnterCall(PptTopLevel,ValueTuple)
 543   27   8    1 daikon.tools.InvariantChecker.InvariantCheckProcessor.process_sample(PptMap,PptTopLevel,ValueTuple,Integer)
 544   53  26    0 daikon.tools.InvariantChecker.InvariantCheckProcessor.add(PptTopLevel,ValueTuple)
 545    2   1    0 daikon.tools.InvariantChecker.invariant2str(PptTopLevel,Invariant)
 546    2   1    0 UnknownSuperClass.a()
 547    2   1    0 UnknownSuperClass.b()
 548    2   1    0 UnknownSuperClass.toString()
 549    4   1    0 it.feio.android.omninotes.models.Attachment.Attachment(Uri,String)
 550    8   1    0 it.feio.android.omninotes.models.Attachment.Attachment(int,Uri,String,int,long,String)
 551    4   1    0 it.feio.android.omninotes.models.Attachment.Attachment(Parcel)
 552    2   1    0 it.feio.android.omninotes.models.Attachment.getUri()
 553    3   1    0 it.feio.android.omninotes.models.Attachment.setUri(Uri)
 554    2   1    0 it.feio.android.omninotes.models.Attachment.describeContents()
 555    4   1    0 it.feio.android.omninotes.models.Attachment.writeToParcel(Parcel,int)
 556    2   1    0 it.feio.android.omninotes.models.Attachment.Parcelable.Creator$1.createFromParcel(Parcel)
 557    2   1    0 it.feio.android.omninotes.models.Attachment.Parcelable.Creator$1.newArray(int)
 558    2   1    0 Demo4.doSomething()
 559    2   1    0 Demo.main(String[])
 560    5   2    0 UnknownCalls.main(String[])
 561    3   1    0 com.duckduckgo.mobile.android.util.TorIntegration.TorIntegration(Activity)
 562    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.prepareTorSettings()
 563   10   4    0 com.duckduckgo.mobile.android.util.TorIntegration.prepareTorSettings(boolean)
 564    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.resetProxy()
 565    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.resetProxy(WebView)
 566    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.enableOrbotProxy()
 567    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.enableOrbotProxy(WebView)
 568    6   3    0 com.duckduckgo.mobile.android.util.TorIntegration.requestOrbotInstallAndStart()
 569    3   1    1 com.duckduckgo.mobile.android.util.TorIntegration.dismissDialogs()
 570    4   3    1 com.duckduckgo.mobile.android.util.TorIntegration.dismissOrbotPromptDialog()
 571    3   1    1 com.duckduckgo.mobile.android.util.TorIntegration.promptToInstall()
 572    4   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
 573    1   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
 574   12   1    1 com.duckduckgo.mobile.android.util.TorIntegration.showDownloadDialog(CharSequence,CharSequence,CharSequence,CharSequence,String)
 575    4   3    1 com.duckduckgo.mobile.android.util.TorIntegration.dismissOrbotStartDialog()
 576    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
 577    1   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
 578   11   1    0 com.duckduckgo.mobile.android.util.TorIntegration.requestOrbotStart()
 579    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.isTorSettingEnabled()
 580    2   2    0 com.duckduckgo.mobile.android.util.TorIntegration.isOrbotRunningAccordingToSettings()
 581    2   3    0 com.duckduckgo.mobile.android.util.TorIntegration.isTorEnabledAndOrbotRunning()
 582    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.isTorSupported()
 583    4   1    0 org.bottiger.podcast.adapters.SubscriptionAdapter$3.SubscriptionAdapter$3(SubscriptionAdapter,ImageView,SubscriptionViewHolder)
 584    2   1    0 org.bottiger.podcast.adapters.SubscriptionAdapter$3.setResource(Bitmap)
 585    3   1    0 SkipException.SkipException(Object)
 586    1   1    0 A.Runnable$1.run()
 587    4   1    0 A.foo()
 588    3   1    0 Demo5.foo()
 589    2   1    0 org.springframework.beans.support.PropertyComparator.compare(T,T)
 590    1   1    0 A3.Runnable$1.run()
 591    4   1    0 A3.foo()
 592    1   1    0 visibility.YamlRepresenter.YamlRepresenter()
 593    2   1    0 visibility.YamlRepresenter.RepresentConfigurationSection.representData(Object)
 594   25   1    1 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase.PropPanelUseCase()
 595    8   3    1 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase.newUseCase()
 596    4   2    1 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase.newExtensionPoint()
 597    1   1    1 spoon.test.comment.testclasses.JavaDocComment.m()
 598    2   1    1 spoon.test.comment.testclasses.JavaDocComment.m(int)
 599    3   1    0 Caller.Caller()
 600    1   1    0 ImportAndExtendWithPackageName.main(String[])
 601    2   1    0 FooNoClassPath.m()
 602    1   1    0 fr.inria.AnotherMissingImport.doSomething(String)
 603    3   1    0 fr.inria.AnotherMissingImport.main(String[])
 604    2   1    1 IndexWriter.IndexWriter(String,Analyzer,boolean)
 605    2   1    1 IndexWriter.IndexWriter(File,Analyzer,boolean)
 606    6   2    0 IndexWriter.Lock.With$1.doBody()
 607   14   3    1 IndexWriter.IndexWriter(Directory,Analyzer,boolean)
 608    5   1    1 IndexWriter.close()
 609    6   2    1 IndexWriter.docCount()
 610    7   1    1 IndexWriter.addDocument(Document)
 611    2   1    0 IndexWriter.newSegmentName()
 612    5   5    1 IndexWriter.optimize()
 613   13   4    1 IndexWriter.addIndexes(Directory[])
 614   11   8    1 IndexWriter.flushRamSegments()
 615   15   5    1 IndexWriter.maybeMergeSegments()
 616    2   1    1 IndexWriter.mergeSegments(int)
 617    4   1    0 IndexWriter.Lock.With$1.doBody()
 618   28   6    1 IndexWriter.mergeSegments(int,boolean)
 619   10   3    0 IndexWriter.deleteSegments(Vector)
 620    3   2    0 IndexWriter.deleteFiles(Vector,Directory)
 621    9   5    0 IndexWriter.deleteFiles(Vector,Vector)
 622   10   4    0 IndexWriter.readDeleteableFiles()
 623    8   2    0 IndexWriter.writeDeleteableFiles(Vector)
 624    2   1    0 snippet.test.resources.SnippetResources.staticMethod()
 625    2   1    0 snippet.test.resources.SnippetResources.method(int)
 626    2   1    0 Panini.m()
 627    4   1    0 spoon.test.subclass.prettyprinter.DefaultPrettyPrinterExample.DefaultPrettyPrinterExample(String)
 628    2   1    0 com.squareup.javapoet.AnnotationSpecTest.Breakfast.toString()
 629    1   1    0 org.eclipse.draw2d.text.FlowUtilities.LookAhead.getWidth()
 630    6   5    0 org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)
 631    8   3    0 org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(String)
 632    4   4    1 org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(TextFragmentBox,Font)
 633    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderAscent(InlineFlow)
 634    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(InlineFlow)
 635    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderDescent(InlineFlow)
 636    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(InlineFlow)
 637    5   2    1 org.eclipse.draw2d.text.FlowUtilities.getTextLayout()
 638    5   2    1 org.eclipse.draw2d.text.FlowUtilities.initBidi(TextFragmentBox,String,Font)
 639    5   3    0 org.eclipse.draw2d.text.FlowUtilities.measureString(TextFragmentBox,String,int,Font)
 640   13   7    1 org.eclipse.draw2d.text.FlowUtilities.setupFragment(TextFragmentBox,Font,String)
 641  117  44    1 org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(TextFragmentBox,String,FlowContext,LookAhead,Font,int)
 642    5   1    1 org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(String,Font,int,int)
 643    2   1    1 org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()
 644    2   1    1 org.eclipse.draw2d.text.FlowUtilities.getEllipsisWidth(Font)
 645    4   2    0 Foo.testCatchWithUnknownException(File)
 646    4   2    0 Foo.testMultiCatchWithUnknownException1(File)
 647    4   2    0 Foo.testMultiCatchWithUnknownException2(File)
 648    3   1    0 Foo.method()
 649    2   1    0 Foo.m1()
 650    3   1    0 Foo.m2()
 651    2   1    0 Foo.m3()
 652    2   1    0 Foo.Foo()
 653    9   1    0 Foo.inv()
 654   10   1    0 Foo.field()
 655    2   1    0 spoon.test.variable.Tacos.Abcd$1.m()
 656    4   1    0 spoon.test.variable.Tacos.testExtendedStringLiteral()
 657    2   1    0 fr.simplemodule.pack.SimpleClass.main(String[])
 658  178  66    0 spoon.test.prettyprinter.testclasses.ComplexClass.getTypeReference(TypeBinding)
 659    2   1    0 spoon.test.prettyprinter.NestedSuperCall.NestedSuperCall(NestedCallable)
 660    2   1    0 spoon.test.prettyprinter.NestedCallable.SuperCallable.SuperCallable(String)
 661    2   1    0 spoon.test.prettyprinter.NestedCallable.SuperCallable.toString()
 662   15   7    0 fr.inria.sandbox.Main.toString()
 663    2   1    0 spoon.test.imports.testclasses2.apachetestsuite.LangTestSuite.suite()
 664    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3.AllLangTestJava3(String)
 665    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3.main(String[])
 666    7   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3.truc()
 667    2   1    0 spoon.test.imports.testclasses2.apachetestsuite.enums.EnumTestSuite.suite()
 668    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod.AllLangTestSuiteStaticMethod(String)
 669    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod.main(String[])
 670    7   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod.truc()
 671    2   1    0 spoon.test.imports.testclasses2.apachetestsuite.enum2.EnumTestSuite.suite()
 672    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite.AllLangTestSuite(String)
 673    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite.main(String[])
 674    7   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite.suite()
 675    2   1    0 spoon.test.imports.testclasses2.StaticWithNested.StaticNested.fnc()
 676    1   1    0 spoon.test.imports.testclasses2.Interners.Interners()
 677    2   1    0 spoon.test.exceptions.ClassWithError.foo()
 678    1   1    0 org.myorganization.MyInterface.method()
 679    2   1    0 fr.acme.MyClass.MyClass(String)
 680    1   1    0 fr.acme.MyClass.method()
 681    1   1    0 org.myorganization.pack.MyAbstractClass.MyAbstractClass(String)
 682    8   5    0 spoon.test.visitor.Foo.factorial(int)
 683   11   1    0 Assignments.func(int)
 684    5   3    0 spoon.test.intercession.insertBefore.InsertBeforeExample2.InsertBeforeExample2(boolean,int)
 685    4   3    0 spoon.test.loop.testclasses.Foo.m()
 686    1   1    0 spoontest.Foo.Foo()
 687    2   1    0 $Poor$Name.lookingForTroubles()
 688    1   1    0 $Poor$Name.Choice.Choice()
 689    2   1    0 compilation.SimpleProcessor.process(CtType)
 690    2   1    0 compilation.Bar.m()
 691    1   1    0 compilation.IBar.m()
 692    5   1    0 Tacos.m()
 693    5   1    0 Tacos.m2()
 694    5   1    0 Tacos.m3()
 695    5   1    0 Tacos.m4()
 696    1   1    0 Tacos.Burritos.makeBurritos(int)
 697   20   3    0 spoon.JarLauncherTest.testJarLauncher()
 698   20   3    0 spoon.JarLauncherTest.testJarLauncherFernflower()
 699    8   1    0 spoon.JarLauncherTest.testJarLauncherNoPom()
 700    2   1    1 spoon.JarLauncher.JarLauncher(String)
 701    2   1    1 spoon.JarLauncher.JarLauncher(String,String)
 702    2   1    1 spoon.JarLauncher.JarLauncher(String,String,String)
 703    2   1    1 spoon.JarLauncher.JarLauncher(String,String,Decompiler)
 704   26  14    1 spoon.JarLauncher.JarLauncher(String,String,String,Decompiler)
 705   20  10    0 spoon.JarLauncher.init(String)
 706    2   1    0 spoon.JarLauncher.getDefaultDecompiler()
 707    2   1    0 spoon.decompiler.FernflowerDecompiler.FernflowerDecompiler(File)
 708    2   1    0 spoon.decompiler.FernflowerDecompiler.decompile(String)
 709    2   1    0 spoon.decompiler.CFRDecompiler.CFRDecompiler(File)
 710    2   1    0 spoon.decompiler.CFRDecompiler.decompile(String)
 711    2   1    0 spoon.decompiler.MultiTypeTransformer.MultiTypeTransformer()
 712    2   1    0 spoon.decompiler.MultiTypeTransformer.addTransformer(TypeTransformer)
 713    2   1    0 spoon.decompiler.MultiTypeTransformer.addTransformers(TypeTransformer)
 714    4   3    0 spoon.decompiler.MultiTypeTransformer.transform(CtType)
 715    5   4    0 spoon.decompiler.MultiTypeTransformer.accept(CtType)
 716    1   1    1 spoon.decompiler.Decompiler.decompile(String)
 717    2   1    1 org.objectweb.carol.jndi.spi.CmiContext.CmiContext(Context)
 718    2   1    1 org.objectweb.carol.jndi.spi.CmiContext.unwrapObject(Object,Name)
 719   24  18    1 org.objectweb.carol.jndi.spi.CmiContext.wrapObject(Object,Name,boolean)
 720    2   1    0 spoontest.a.ClassA.ClassA()
 721    2   1    0 spoontest.c.ClassC.name(Object)
 722    2   1    0 spoontest.b.ClassB.ClassB()
 723    2   1    0 spoontest.b.ClassB.name(Object)
 724    1   1    0 D.func()
 725    2   1    0 B.func(C)
 726    2   1    0 A.func(int,int)
 727    2   1    0 spoon.test.reference.ReferencingClass.ReferencingClass()
 728    2   1    0 spoon.test.reference.ReferencingClass.name()
 729    2   1    0 spoon.test.reference.ReferencingClass.ID()
 730    4   1    0 MultipleDeclarationsOfLocalVariable.main(String[])
 731    5   1    0 InterfaceEnumRef.testEnumFromInterface()
 732    1   1    0 InterfaceWithEnum.someMethod()
 733   12   4    1 net.sf.jabref.collab.ChangeScanner.bestFit(EntrySorter,EntrySorter,int)
 734    5   1    0 EnumsRef.func()
 735    3   1    0 spoon.test.reference.ReferencedClass.ReferencedClass()
 736    1   1    1 de.uni_bremen.st.quide.persistence.ratings.IRatingLookUp.setRating(String,IViolation)
 737    1   1    1 de.uni_bremen.st.quide.persistence.ratings.IRatingLookUp.getViolationTypeRatings(String)
 738    3   1    0 megamek.client.bot.TestBot.TestBot(String,String,int)
 739    1   1    0 megamek.client.bot.TestBot.initialize()
 740    2   1    0 megamek.client.bot.TestBot.calculatePhysicalTurn()
 741   77  31    0 megamek.client.bot.TestBot.calculateMoveTurn()
 742   91  22    1 megamek.client.bot.TestBot.firstPass(CEntity)
 743  250  85    0 megamek.client.bot.TestBot.calculateMove(Entity)
 744    4   3    0 megamek.client.bot.TestBot.filterMoves(Object[],MoveOption.Table,MoveOption.WeightedComparator,int)
 745   12   5    0 megamek.client.bot.TestBot.initFiring()
 746   35  13    0 megamek.client.bot.TestBot.calculateWeaponAttacks(Entity,Mounted,boolean)
 747    2   1    0 megamek.client.bot.TestBot.bestAttack(MoveOption)
 748   47  16    0 megamek.client.bot.TestBot.bestAttack(MoveOption,CEntity,int)
 749    5   3    0 megamek.client.bot.TestBot.attackUtility(MoveOption,CEntity)
 750   44  13    0 megamek.client.bot.TestBot.calculateFiringTurn()
 751  105  39    1 megamek.client.bot.TestBot.initMovement()
 752    2   1    0 megamek.client.bot.TestBot.processChat(GamePlayerChatEvent)
 753   13   2    0 megamek.client.bot.TestBot.calculateDeployment()
 754    2   1    0 megamek.client.bot.TestBot.continueMovementFor(Entity)
 755    6   1    0 megamek.client.bot.TestBot.calculateMinefieldDeployment()
 756   20   7    0 megamek.client.bot.TestBot.deployMinefields(java.util.Vector,int,int)
 757    1   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.BroadcastShardResponse()
 758    2   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.BroadcastShardResponse(ShardId)
 759    2   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.getIndex()
 760    2   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.getShardId()
 761    3   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.readFrom(StreamInput)
 762    3   1    0 org.elasticsearch.action.support.broadcast.BroadcastShardResponse.writeTo(StreamOutput)
 763    6   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.TransportBroadcastAction(Settings,String,ThreadPool,ClusterService,TransportService,ActionFilters,IndexNameExpressionResolver,Request,ShardRequest,String)
 764    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.doExecute(Task,Request,Response)
 765    2   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.doExecute(Request,Response)
 766    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.newResponse(Request,AtomicReferenceArray,ClusterState)
 767    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.newShardRequest(int,ShardRouting,Request)
 768    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.newShardResponse()
 769    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.shardOperation(ShardRequest)
 770    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.shardOperation(ShardRequest,Task)
 771    1   1    1 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.shards(ClusterState,Request,String[])
 772    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.checkGlobalBlock(ClusterState,Request)
 773    1   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.checkRequestBlock(ClusterState,Request,String[])
 774   17   5    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.AsyncBroadcastAction(Task,Request,Response)
 775   14   6    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.start()
 776    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.newInstance()
 777    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.executor()
 778    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.handleResponse(ShardResponse)
 779    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.TransportResponseHandler$1.handleException(TransportException)
 780   22   4    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.performOperation(ShardIterator,ShardRouting,int)
 781    5   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.onOperation(ShardRouting,int,ShardResponse)
 782   16  11    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.onOperation(ShardRouting,ShardIterator,int,Exception)
 783    4   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.finishHim()
 784   12   8    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.AsyncBroadcastAction.setFailure(ShardIterator,int,Exception)
 785    2   1    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.ShardTransportHandler.messageReceived(ShardRequest,TransportChannel,Task)
 786    2   2    0 org.elasticsearch.action.support.broadcast.TransportBroadcastAction.ShardTransportHandler.messageReceived(ShardRequest,TransportChannel)
 787    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseDragged(MouseEvent)
 788    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseEntered(MouseEvent)
 789    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseExited(MouseEvent)
 790    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseHover(MouseEvent)
 791    1   1    1 org.eclipse.draw2d.MouseMotionListener.mouseMoved(MouseEvent)
 792    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseDragged(MouseEvent)
 793    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseEntered(MouseEvent)
 794    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseExited(MouseEvent)
 795    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseMoved(MouseEvent)
 796    1   1    1 org.eclipse.draw2d.MouseMotionListener.Stub.mouseHover(MouseEvent)
 797    1   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mouseDoubleClicked(MouseEvent)
 798    3   2    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mouseDragged(MouseEvent)
 799    8   3    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mousePressed(MouseEvent)
 800    3   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ClickScrollerAndDragTransferrer.mouseReleased(MouseEvent)
 801    1   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mouseDoubleClicked(MouseEvent)
 802    6   2    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mouseDragged(MouseEvent)
 803    4   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mousePressed(MouseEvent)
 804    1   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollSynchronizer.mouseReleased(MouseEvent)
 805    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.SelectorFigure.dispose()
 806   13   6    0 org.eclipse.draw2d.parts.ScrollableThumbnail.SelectorFigure.paintFigure(Graphics)
 807    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.FigureListener$1.figureMoved(IFigure)
 808   14  11    0 org.eclipse.draw2d.parts.ScrollableThumbnail.KeyListener.Stub$1.keyPressed(KeyEvent)
 809    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.PropertyChangeListener$1.propertyChange(PropertyChangeEvent)
 810    3   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollableThumbnail()
 811    4   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.ScrollableThumbnail(Viewport)
 812    6   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.deactivate()
 813    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.getViewportScaleX()
 814    2   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.getViewportScaleY()
 815   10   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.initialize()
 816   10   1    0 org.eclipse.draw2d.parts.ScrollableThumbnail.reconfigureSelectorBounds()
 817    5   4    1 org.eclipse.draw2d.parts.ScrollableThumbnail.setScales(float,float)
 818    4   1    1 org.eclipse.draw2d.parts.ScrollableThumbnail.setViewport(Viewport)
 819    2   1    0 app.Test.main(String[])
 820    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getId()
 821    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getIdentifier()
 822    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getTitle()
 823    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getDescription()
 824    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getUrl()
 825    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getCreatedAt()
 826    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getClosedAt()
 827    2   1    0 de.uni_bremen.st.quide.persistence.data.entities.Issue.getIssueType()
 828    1   1    0 test.ExtendsObject.oneMethod()
 829    2   1    0 test.ExtendsObject.toString()
 830    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector()
 831    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(int)
 832    3   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(int,double)
 833    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(preset[])
 834    4   4    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(d.clone[],boolean)
 835    7   5    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(d[],int,int)
 836    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(Double[])
 837    8   6    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(Double[],int,int)
 838    6   4    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(RealVector)
 839    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector)
 840    2   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,boolean)
 841    4   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,ArrayRealVector)
 842    7   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,RealVector)
 843    7   2    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(RealVector,ArrayRealVector)
 844    6   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(ArrayRealVector,ArrayRealVector[])
 845    6   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(l2[],ArrayRealVector)
 846    6   1    1 org.apache.commons.math4.linear.ArrayRealVector.ArrayRealVector(l2[],l2[][])
 847    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.copy()
 848   18   5    1 org.apache.commons.math4.linear.ArrayRealVector.add(RealVector)
 849   18   5    1 org.apache.commons.math4.linear.ArrayRealVector.subtract(RealVector)
 850    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.map(UnivariateFunction)
 851    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapToSelf(UnivariateFunction)
 852    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapAddToSelf(double)
 853    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapSubtractToSelf(double)
 854    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapMultiplyToSelf(double)
 855    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.mapDivideToSelf(double)
 856   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.ebeMultiply(RealVector)
 857   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.ebeDivide(RealVector)
 858    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.getDataRef()
 859    9   4    1 org.apache.commons.math4.linear.ArrayRealVector.dotProduct(RealVector)
 860    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.getNorm()
 861    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.getL1Norm()
 862    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.getLInfNorm()
 863   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.getDistance(RealVector)
 864   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.getL1Distance(RealVector)
 865   16   5    1 org.apache.commons.math4.linear.ArrayRealVector.getLInfDistance(RealVector)
 866   18   7    1 org.apache.commons.math4.linear.ArrayRealVector.outerProduct(RealVector)
 867    4   4    1 org.apache.commons.math4.linear.ArrayRealVector.getEntry(int)
 868    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.getDimension()
 869    4   3    1 org.apache.commons.math4.linear.ArrayRealVector.append(RealVector)
 870    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.append(ArrayRealVector)
 871    5   1    1 org.apache.commons.math4.linear.ArrayRealVector.append(double)
 872    9   4    1 org.apache.commons.math4.linear.ArrayRealVector.getSubVector(int,int)
 873    4   2    1 org.apache.commons.math4.linear.ArrayRealVector.setEntry(int,double)
 874    4   3    1 org.apache.commons.math4.linear.ArrayRealVector.addToEntry(int,double)
 875    9   4    1 org.apache.commons.math4.linear.ArrayRealVector.setSubVector(int,RealVector)
 876    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.setSubVector(int,int[])
 877    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.set(double)
 878    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.toArray()
 879    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.toString()
 880    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.checkVectorDimensions(RealVector)
 881    3   3    1 org.apache.commons.math4.linear.ArrayRealVector.checkVectorDimensions(int)
 882    5   4    1 org.apache.commons.math4.linear.ArrayRealVector.isNaN()
 883    7   6    1 org.apache.commons.math4.linear.ArrayRealVector.isInfinite()
 884   14  12    1 org.apache.commons.math4.linear.ArrayRealVector.equals(Object)
 885    4   3    1 org.apache.commons.math4.linear.ArrayRealVector.hashCode()
 886    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.combine(double,double,RealVector)
 887   11   4    1 org.apache.commons.math4.linear.ArrayRealVector.combineToSelf(double,double,RealVector)
 888    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorPreservingVisitor)
 889    6   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorPreservingVisitor,int,int)
 890    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorPreservingVisitor)
 891    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorPreservingVisitor,int,int)
 892    5   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorChangingVisitor)
 893    6   2    1 org.apache.commons.math4.linear.ArrayRealVector.walkInDefaultOrder(RealVectorChangingVisitor,int,int)
 894    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorChangingVisitor)
 895    2   1    1 org.apache.commons.math4.linear.ArrayRealVector.walkInOptimizedOrder(RealVectorChangingVisitor,int,int)
 896    3   1    0 org.ehcache.core.SpecIterator.SpecIterator(V,V)
 897    2   1    0 org.ehcache.core.SpecIterator.hasNext()
 898    2   1    0 org.ehcache.core.SpecIterator.Cache.Entry$1.getKey()
 899    2   1    0 org.ehcache.core.SpecIterator.Cache.Entry$1.getValue()
 900   17   5    0 org.ehcache.core.SpecIterator.next()
 901    5   3    0 org.ehcache.core.SpecIterator.remove()
 902    3   1    0 FieldAccessRes.method()
 903    2   2    1 daikon.FileIO.FileIO()
 904    2   1    0 daikon.FileIO.DeclError.DeclError(String)
 905    3   1    0 daikon.FileIO.DeclError.detail(ParseState,String,Object)
 906    2   1    0 daikon.FileIO.ParentRelation.toString()
 907    2   2    0 daikon.FileIO.isComment(String)
 908    8   3    1 daikon.FileIO.read_declaration_files(File)
 909    7   2    1 daikon.FileIO.read_declaration_file(File,PptMap)
 910   92  30    1 daikon.FileIO.read_ppt_decl(ParseState,String)
 911    7   1    1 daikon.FileIO.parse_ppt_parent(ParseState,Scanner)
 912    4   2    1 daikon.FileIO.parse_ppt_flags(ParseState,Scanner,PptFlags)
 913    4   1    1 daikon.FileIO.parse_ppt_type(ParseState,Scanner)
 914   24  13    0 daikon.FileIO.read_declaration(ParseState)
 915   11   6    0 daikon.FileIO.read_VarInfos(ParseState,String)
 916   58  23    1 daikon.FileIO.read_VarInfo(ParseState,String)
 917   18   9    0 daikon.FileIO.read_var_comparability(ParseState,String)
 918    6   1    0 daikon.FileIO.read_input_language(ParseState,String)
 919   12   3    0 daikon.FileIO.read_decl_version(ParseState,String)
 920    8   5    0 daikon.FileIO.read_list_implementors(LineNumberReader,File)
 921    4   1    0 daikon.FileIO.Invocation.Invocation(PptTopLevel,Object[],Object[][])
 922    2   1    0 daikon.FileIO.Invocation.format()
 923   24   9    0 daikon.FileIO.Invocation.format(boolean)
 924    8   4    1 daikon.FileIO.Invocation.canonicalize()
 925    5   3    0 daikon.FileIO.Invocation.equals(Object)
 926    2   1    0 daikon.FileIO.Invocation.compareTo(Invocation)
 927    2   1    0 daikon.FileIO.Invocation.hashCode()
 928    3   1    1 daikon.FileIO.read_data_trace_files(String,PptMap)
 929   29  14    1 daikon.FileIO.read_data_trace_files(String,PptMap,Processor,boolean)
 930   10  12    0 daikon.FileIO.warn_if_hierarchy_mismatch(PptMap)
 931    2   1    0 daikon.FileIO.Processor.process_sample(PptMap,PptTopLevel,ValueTuple,Integer)
 932    3   1    1 daikon.FileIO.read_data_trace_file(String,PptMap)
 933   46  11    0 daikon.FileIO.ParseState.ParseState(String,boolean,boolean,PptMap)
 934   15   8    0 daikon.FileIO.connectToChicory()
 935   29  13    1 daikon.FileIO.read_data_trace_file(String,PptMap,Processor,boolean,boolean)
 936  111  53    0 daikon.FileIO.read_data_trace_record(ParseState)
 937   21  18    1 daikon.FileIO.process_sample(PptMap,PptTopLevel,ValueTuple,Integer)
 938    8   7    1 daikon.FileIO.has_unmatched_procedure_entry(PptTopLevel)
 939   30  12    1 daikon.FileIO.process_unmatched_procedure_entries()
 940    3   2    1 daikon.FileIO.print_invocations_verbose(Invocation)
 941   14   4    1 daikon.FileIO.print_invocations_grouped(Invocation)
 942   84  49    0 daikon.FileIO.read_vals_and_mods_from_trace_file(LineNumberReader,String,PptTopLevel,Object[],Object[][])
 943   48  21    1 daikon.FileIO.add_orig_variables(PptTopLevel,Object[],Object[][],Integer)
 944   13   5    1 daikon.FileIO.add_derived_variables(PptTopLevel,Object[],Object[][])
 945    4   1    0 daikon.FileIO.SerialFormat.SerialFormat(PptMap,Configuration)
 946    3   1    0 daikon.FileIO.write_serialized_pptmap(PptMap,File)
 947   29  13    1 daikon.FileIO.read_serialized_pptmap(File,boolean)
 948    5   9    1 daikon.FileIO.ppt_included(String)
 949    6   6    0 daikon.FileIO.var_included(String)
 950    4   3    1 daikon.FileIO.skip_decl(LineNumberReader)
 951   38   9    1 daikon.FileIO.unescape_decl(String)
 952    4   4    0 daikon.FileIO.VarDefinition.clone()
 953    7   4    0 daikon.FileIO.VarDefinition.copy()
 954    4   1    1 daikon.FileIO.VarDefinition.clear_parent_relation()
 955    8   2    1 daikon.FileIO.VarDefinition.VarDefinition(ParseState,Scanner)
 956    7   1    0 daikon.FileIO.VarDefinition.VarDefinition(String,VarKind,ProglangType)
 957    5   3    1 daikon.FileIO.VarDefinition.parse_var_kind(Scanner)
 958    3   1    1 daikon.FileIO.VarDefinition.parse_enclosing_var(Scanner)
 959    3   1    1 daikon.FileIO.VarDefinition.parse_reference_type(Scanner)
 960    9   3    1 daikon.FileIO.VarDefinition.parse_array(Scanner)
 961    4   2    1 daikon.FileIO.VarDefinition.parse_function_args(Scanner)
 962    4   1    0 daikon.FileIO.VarDefinition.parse_rep_type(Scanner)
 963    4   1    0 daikon.FileIO.VarDefinition.parse_dec_type(Scanner)
 964    4   2    1 daikon.FileIO.VarDefinition.parse_flags(Scanner)
 965    4   2    1 daikon.FileIO.VarDefinition.parse_lang_flags(Scanner)
 966    4   1    1 daikon.FileIO.VarDefinition.parse_comparability(Scanner)
 967   13   6    1 daikon.FileIO.VarDefinition.parse_parent(Scanner,ParentRelation)
 968    4   1    1 daikon.FileIO.VarDefinition.parse_constant(Scanner)
 969    2   1    1 daikon.FileIO.VarDefinition.need(Scanner,String)
 970    2   1    1 daikon.FileIO.VarDefinition.need_eol(Scanner)
 971    2   1    1 daikon.FileIO.VarDefinition.parse_enum_val(Scanner,E,String)
 972    4   2    1 daikon.FileIO.need(ParseState,Scanner,String)
 973    3   2    1 daikon.FileIO.need_eol(ParseState,Scanner)
 974   13   5    1 daikon.FileIO.parse_enum_val(ParseState,Scanner,E,String)
 975    2   2    0 daikon.FileIO.decl_error(ParseState,String,Object)
 976    5   3    1 daikon.FileIO.is_declaration_header(String)
 977    2   1    0 com.example.Foo.Bar.Inner$1.method(Type)
 978    4   1    0 com.example.Foo.Foo()
 979    2   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.onCreateView(LayoutInflater,ViewGroup,Bundle)
 980    5   2    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.RadioGroup.OnCheckedChangeListener$1.onCheckedChanged(RadioGroup,int)
 981   11   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.onViewCreated(View,Bundle)
 982    5   6    1 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.isComplete()
 983    5   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.resetFields()
 984    3   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.TransporteurFragment.changeUndisplayedTransporteurEditTextVisibility(int)
 985    1   1    0 com.cristal.ircica.applicationcolis.userinterface.fragments.CompletableFragment.isComplete()
 986    2   2    0 daikon.Daikon.Daikon()
 987    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(String)
 988    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(String,Object)
 989    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(Exception)
 990    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage(Object)
 991    2   1    0 daikon.Daikon.TerminationMessage.TerminationMessage()
 992   13   5    1 daikon.Daikon.main(String[])
 993  106  38    1 daikon.Daikon.mainHelper(String[])
 994   10   6    1 daikon.Daikon.cleanup()
 995    5   1    0 daikon.Daikon.FileOptions.FileOptions(File,String,File,File)
 996  229 106    0 daikon.Daikon.read_options(String[],String)
 997  139   3    1 daikon.Daikon.setup_proto_invs()
 998    5   3    1 daikon.Daikon.createUpperPpts(PptMap)
 999   15   7    1 daikon.Daikon.init_ppt(PptTopLevel,PptMap)
1000   28   8    1 daikon.Daikon.create_combined_exits(PptMap)
1001   10  10    0 daikon.Daikon.filter_invs(Invariant)
1002   32  10    1 daikon.Daikon.create_orig_vars(PptTopLevel,PptMap)
1003   17   8    0 daikon.Daikon.load_decls_files(File)
1004   15   6    0 daikon.Daikon.load_spinfo_files(File)
1005    9   3    0 daikon.Daikon.load_map_files(PptMap,File)
1006   13   6    1 daikon.Daikon.setup_splitters(PptTopLevel)
1007    6   1    0 daikon.Daikon.FileIOProgress.FileIOProgress()
1008   10   7    0 daikon.Daikon.FileIOProgress.run()
1009    7   3    1 daikon.Daikon.FileIOProgress.clear()
1010    4   3    1 daikon.Daikon.FileIOProgress.display()
1011   11   5    1 daikon.Daikon.FileIOProgress.display(String)
1012   19   7    0 daikon.Daikon.FileIOProgress.message()
1013   74  30    1 daikon.Daikon.process_data(PptMap,String)
1014    2   1    0 daikon.Daikon.Count.Count(int)
1015   30   7    1 daikon.Daikon.ppt_stats(PptMap)
1016   10   2    1 daikon.Daikon.suppressWithSimplify(PptMap)
1017    2   1    1 daikon.Daikon.setup_NISuppression()
1018   13  13    1 daikon.Daikon.setupEquality(PptTopLevel)
1019    4   2    0 daikon.Daikon.create_splitters(File)
1020    5   3    1 daikon.Daikon.processOmissions(PptMap)
1021   33  23    1 daikon.Daikon.setup_ppt_perc(File,int)
1022   24   8    1 daikon.Daikon.undoOpts(PptMap)
1023    2   1    0 org.ethack.orwall.BackgroundProcess.BackgroundProcess()
1024    5   2    0 org.ethack.orwall.BackgroundProcess.onHandleIntent(Intent)
1025    3   1    0 org.ethack.orwall.BackgroundProcess.managePortal(boolean)
1026    2   1    0 org.ethack.orwall.PreferencesActivity.onCreate(Bundle)
1027    2   1    0 org.ethack.orwall.PreferencesActivity.onBuildHeaders(Header)
1028    4   1    0 org.ethack.orwall.PreferencesActivity.isValidFragment(String)
1029    2   1    0 org.ethack.orwall.PreferencesActivity.onDestroy()
1030    6   6    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.SharedPreferences.OnSharedPreferenceChangeListener$1.onSharedPreferenceChanged(SharedPreferences,String)
1031    4   1    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.onCreate(Bundle)
1032    3   1    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.onResume()
1033    3   1    0 org.ethack.orwall.PreferencesActivity.ScriptPrefs.onPause()
1034    2   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.SharedPreferences.OnSharedPreferenceChangeListener$1.onSharedPreferenceChanged(SharedPreferences,String)
1035    3   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.onCreate(Bundle)
1036    3   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.onResume()
1037    3   1    0 org.ethack.orwall.PreferencesActivity.SpecialApps.onPause()
1038   12   4    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.SharedPreferences.OnSharedPreferenceChangeListener$1.onSharedPreferenceChanged(SharedPreferences,String)
1039    4   1    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.onCreate(Bundle)
1040    3   1    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.onResume()
1041    3   1    0 org.ethack.orwall.PreferencesActivity.NetworkPrefs.onPause()
1042    3   1    0 org.ethack.orwall.PreferencesActivity.ProxyPorts.onCreate(Bundle)
1043    2   1    0 spoon.test.same.B.getName()
1044    2   1    0 spoon.test.same.A.createB()
1045    2   1    0 org.elasticsearch.tasks.TaskManager.TaskManager(Settings)
1046    3   1    0 org.elasticsearch.tasks.TaskManager.setTaskResultsService(TaskPersistenceService)
1047   13   5    1 org.elasticsearch.tasks.TaskManager.register(String,String,TransportRequest)
1048   12   5    0 org.elasticsearch.tasks.TaskManager.registerCancellableTask(Task)
1049    6   3    1 org.elasticsearch.tasks.TaskManager.cancel(CancellableTask,String,String)
1050   11   5    1 org.elasticsearch.tasks.TaskManager.unregister(Task)
1051    2   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onResponse(Void)
1052    3   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onFailure(Exception)
1053   17   5    1 org.elasticsearch.tasks.TaskManager.persistResult(Task,Exception,Response)
1054    2   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onResponse(Void)
1055    3   1    0 org.elasticsearch.tasks.TaskManager.ActionListener$1.onFailure(Exception)
1056   18   5    1 org.elasticsearch.tasks.TaskManager.persistResult(Task,Response,Response)
1057    5   2    1 org.elasticsearch.tasks.TaskManager.getTasks()
1058    5   2    1 org.elasticsearch.tasks.TaskManager.getCancellableTasks()
1059    6   3    1 org.elasticsearch.tasks.TaskManager.getTask(long)
1060    6   3    1 org.elasticsearch.tasks.TaskManager.getCancellableTask(long)
1061    2   1    1 org.elasticsearch.tasks.TaskManager.getBanCount()
1062    9   4    1 org.elasticsearch.tasks.TaskManager.setBan(TaskId,String)
1063    3   1    1 org.elasticsearch.tasks.TaskManager.removeBan(TaskId)
1064   18   8    0 org.elasticsearch.tasks.TaskManager.clusterChanged(ClusterChangedEvent)
1065    6   5    0 org.elasticsearch.tasks.TaskManager.registerChildTask(Task,String)
1066    8   7    1 org.elasticsearch.tasks.TaskManager.waitForTaskCompletion(Task,long)
1067    2   1    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.CancellableTaskHolder(CancellableTask)
1068   13   3    1 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.cancel(String,String)
1069    2   1    1 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.cancel(String)
1070   13   4    1 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.finish()
1071    2   1    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.hasParent(TaskId)
1072    2   1    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.getTask()
1073    5   3    0 org.elasticsearch.tasks.TaskManager.CancellableTaskHolder.registerChildTaskNode(String)
1074    2   1    0 Demo3.doSomething()
1075    2   1    0 Foo2.ActionListener$1.actionPerformed(ActionEvent)
1076    5   1    0 Foo2.foo()
1077   10   4    0 org.sat4j.minisat.core.Solver.dimacs2internal(IVecInt)
1078    2   1    0 org.sat4j.minisat.core.Solver.registerLiteral(int)
1079    2   1    1 org.sat4j.minisat.core.Solver.Solver(D,D,IOrder,RestartStrategy)
1080    2   1    0 org.sat4j.minisat.core.Solver.Solver(D,D,SearchParams,IOrder,RestartStrategy)
1081    7   1    0 org.sat4j.minisat.core.Solver.Solver(D,D,SearchParams,IOrder,RestartStrategy,ILogAble)
1082    6   1    0 org.sat4j.minisat.core.Solver.setDataStructureFactory(D)
1083    2   1    1 org.sat4j.minisat.core.Solver.isVerbose()
1084    2   1    1 org.sat4j.minisat.core.Solver.setVerbose(boolean)
1085    2   1    0 org.sat4j.minisat.core.Solver.setSearchListener(S)
1086    2   1    0 org.sat4j.minisat.core.Solver.getSearchListener()
1087    2   1    0 org.sat4j.minisat.core.Solver.setLearner(D)
1088    5   2    0 org.sat4j.minisat.core.Solver.setLearningStrategy(D)
1089    3   1    0 org.sat4j.minisat.core.Solver.setTimeout(int)
1090    3   1    0 org.sat4j.minisat.core.Solver.setTimeoutMs(long)
1091    3   1    0 org.sat4j.minisat.core.Solver.setTimeoutOnConflicts(int)
1092    2   1    0 org.sat4j.minisat.core.Solver.setSearchParams(SearchParams)
1093    2   1    0 org.sat4j.minisat.core.Solver.getSearchParams()
1094    2   1    0 org.sat4j.minisat.core.Solver.setRestartStrategy(RestartStrategy)
1095    2   1    0 org.sat4j.minisat.core.Solver.getRestartStrategy()
1096    9   4    0 org.sat4j.minisat.core.Solver.expireTimeout()
1097    2   1    0 org.sat4j.minisat.core.Solver.nAssigns()
1098    2   1    0 org.sat4j.minisat.core.Solver.nConstraints()
1099   14   3    0 org.sat4j.minisat.core.Solver.learn(Constr)
1100    2   1    0 org.sat4j.minisat.core.Solver.decisionLevel()
1101    4   1    0 org.sat4j.minisat.core.Solver.newVar()
1102    4   1    0 org.sat4j.minisat.core.Solver.newVar(int)
1103    3   1    0 org.sat4j.minisat.core.Solver.addClause(IVecInt)
1104   10   3    0 org.sat4j.minisat.core.Solver.removeConstr(IConstr)
1105   11   5    1 org.sat4j.minisat.core.Solver.removeSubsumedConstr(IConstr)
1106    3   2    0 org.sat4j.minisat.core.Solver.addAllClauses(IVecInt)
1107    6   2    0 org.sat4j.minisat.core.Solver.addAtMost(IVecInt,int)
1108    3   1    0 org.sat4j.minisat.core.Solver.addAtLeast(IVecInt,int)
1109    5   1    0 org.sat4j.minisat.core.Solver.addExactly(IVecInt,int)
1110   11   4    0 org.sat4j.minisat.core.Solver.simplifyDB()
1111    6   3    1 org.sat4j.minisat.core.Solver.model()
1112    2   1    0 org.sat4j.minisat.core.Solver.enqueue(int)
1113   13   7    0 org.sat4j.minisat.core.Solver.enqueue(int,Constr)
1114   44   9    1 org.sat4j.minisat.core.Solver.analyze(Constr,Pair)
1115   44  28    1 org.sat4j.minisat.core.Solver.analyzeFinalConflictInTermsOfAssumptions(Constr,IVecInt,int)
1116    1   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
1117    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
1118    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
1119    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
1120    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
1121    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
1122    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.simplify(IVecInt)
1123    2   1    0 org.sat4j.minisat.core.Solver.ISimplifier$1.toString()
1124    7   2    0 org.sat4j.minisat.core.Solver.setSimplifier(SimplificationType)
1125    2   1    0 org.sat4j.minisat.core.Solver.setSimplifier(ISimplifier)
1126    2   1    0 org.sat4j.minisat.core.Solver.getSimplifier()
1127   16   8    0 org.sat4j.minisat.core.Solver.simpleSimplification(IVecInt)
1128    9   4    0 org.sat4j.minisat.core.Solver.expensiveSimplification(IVecInt)
1129   31  12    0 org.sat4j.minisat.core.Solver.analyzeRemovable(int)
1130    9   4    0 org.sat4j.minisat.core.Solver.expensiveSimplificationWLOnly(IVecInt)
1131   23   8    0 org.sat4j.minisat.core.Solver.analyzeRemovableWLOnly(int)
1132   15   2    1 org.sat4j.minisat.core.Solver.undoOne()
1133    4   2    1 org.sat4j.minisat.core.Solver.claBumpActivity(Constr)
1134    2   1    0 org.sat4j.minisat.core.Solver.varBumpActivity(int)
1135    4   2    0 org.sat4j.minisat.core.Solver.claRescalActivity()
1136   14   4    1 org.sat4j.minisat.core.Solver.propagate()
1137   15   5    0 org.sat4j.minisat.core.Solver.reduceClausesForFalsifiedLiteral(int)
1138    9   2    0 org.sat4j.minisat.core.Solver.record(Constr)
1139    5   1    1 org.sat4j.minisat.core.Solver.assume(int)
1140    7   2    1 org.sat4j.minisat.core.Solver.cancel()
1141    5   2    1 org.sat4j.minisat.core.Solver.cancelLearntLiterals(int)
1142    3   2    1 org.sat4j.minisat.core.Solver.cancelUntil(int)
1143   74  26    0 org.sat4j.minisat.core.Solver.search(IVecInt)
1144    8   3    0 org.sat4j.minisat.core.Solver.preventTheSameDecisionsToBeMade()
1145    1   1    0 org.sat4j.minisat.core.Solver.analyzeAtRootLevel(Constr)
1146   31  13    1 org.sat4j.minisat.core.Solver.modelFound()
1147    9   2    1 org.sat4j.minisat.core.Solver.forget(int)
1148    6   4    1 org.sat4j.minisat.core.Solver.setAndPropagate(int)
1149   66  14    0 org.sat4j.minisat.core.Solver.primeImplicant()
1150    6   6    0 org.sat4j.minisat.core.Solver.primeImplicant(int)
1151    6   6    0 org.sat4j.minisat.core.Solver.model(int)
1152    5   2    0 org.sat4j.minisat.core.Solver.clearLearntClauses()
1153    5   1    0 org.sat4j.minisat.core.Solver.reduceDB()
1154    2   1    1 org.sat4j.minisat.core.Solver.sortOnActivity()
1155    3   1    1 org.sat4j.minisat.core.Solver.decayActivities()
1156    2   1    1 org.sat4j.minisat.core.Solver.claDecayActivity()
1157    2   1    1 org.sat4j.minisat.core.Solver.isSatisfiable()
1158    2   1    1 org.sat4j.minisat.core.Solver.isSatisfiable(boolean)
1159    2   1    0 org.sat4j.minisat.core.Solver.isSatisfiable(IVecInt)
1160    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.ConflictTimerAdapter$1.run()
1161   14   7    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.reduce(Constr)
1162    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onConflictAnalysis(Constr)
1163    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onClauseLearning(Constr)
1164    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.toString()
1165    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.init()
1166    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.getTimer()
1167    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onPropagation(Constr)
1168   29   1    0 org.sat4j.minisat.core.Solver.fixedSize(int)
1169   14   6    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.reduce(Constr)
1170    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.getTimer()
1171    2   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.toString()
1172    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.init()
1173    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onClauseLearning(Constr)
1174    3   2    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onConflictAnalysis(Constr)
1175    1   1    0 org.sat4j.minisat.core.Solver.LearnedConstraintsDeletionStrategy$1.onPropagation(Constr)
1176   28   1    0 org.sat4j.minisat.core.Solver.activityBased(ConflictTimer)
1177    4   2    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.run()
1178    2   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.GlucoseLCDS(ConflictTimer)
1179   12   5    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.reduce(Constr)
1180    2   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.getTimer()
1181    2   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.toString()
1182    6   2    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.init()
1183    3   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.onClauseLearning(Constr)
1184   10   3    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.computeLBD(Constr)
1185    1   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.onConflictAnalysis(Constr)
1186    1   1    0 org.sat4j.minisat.core.Solver.GlucoseLCDS.onPropagation(Constr)
1187    2   1    0 org.sat4j.minisat.core.Solver.Glucose2LCDS.Glucose2LCDS(ConflictTimer)
1188    2   1    0 org.sat4j.minisat.core.Solver.Glucose2LCDS.toString()
1189    6   3    0 org.sat4j.minisat.core.Solver.Glucose2LCDS.onPropagation(Constr)
1190    6   2    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.run()
1191    6   2    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.reset()
1192    6   2    0 org.sat4j.minisat.core.Solver.setLearnedConstraintsDeletionStrategy(LearnedConstraintsDeletionStrategy)
1193    2   1    0 org.sat4j.minisat.core.Solver.TimerTask$1.run()
1194    2   1    0 org.sat4j.minisat.core.Solver.ConflictTimerAdapter$1.run()
1195  106  38    0 org.sat4j.minisat.core.Solver.isSatisfiable(IVecInt,boolean)
1196    2   1    0 org.sat4j.minisat.core.Solver.printInfos(PrintWriter)
1197   10   2    0 org.sat4j.minisat.core.Solver.printInfos(PrintWriter,String)
1198   13   4    1 org.sat4j.minisat.core.Solver.printLearntClausesInfos(PrintWriter,String)
1199    2   1    0 org.sat4j.minisat.core.Solver.getStats()
1200    2   1    1 org.sat4j.minisat.core.Solver.initStats(SolverStats)
1201    2   1    0 org.sat4j.minisat.core.Solver.getOrder()
1202    3   1    0 org.sat4j.minisat.core.Solver.setOrder(IOrder)
1203    2   1    0 org.sat4j.minisat.core.Solver.getVocabulary()
1204   15   3    0 org.sat4j.minisat.core.Solver.reset()
1205    4   3    0 org.sat4j.minisat.core.Solver.nVars()
1206   16   4    1 org.sat4j.minisat.core.Solver.addConstr(Constr)
1207    2   1    0 org.sat4j.minisat.core.Solver.getDSFactory()
1208    2   1    0 org.sat4j.minisat.core.Solver.getOutLearnt()
1209    2   1    1 org.sat4j.minisat.core.Solver.getIthConstr(int)
1210    2   1    0 org.sat4j.minisat.core.Solver.printStat(PrintStream,String)
1211    2   1    0 org.sat4j.minisat.core.Solver.printStat(PrintWriter)
1212    6   1    0 org.sat4j.minisat.core.Solver.printStat(PrintWriter,String)
1213   32   4    0 org.sat4j.minisat.core.Solver.toString(String)
1214    2   1    0 org.sat4j.minisat.core.Solver.toString()
1215    2   2    0 org.sat4j.minisat.core.Solver.getTimeout()
1216    4   3    1 org.sat4j.minisat.core.Solver.getTimeoutMs()
1217    2   1    0 org.sat4j.minisat.core.Solver.setExpectedNumberOfClauses(int)
1218    2   1    0 org.sat4j.minisat.core.Solver.getStat()
1219    4   3    0 org.sat4j.minisat.core.Solver.findModel()
1220    4   3    0 org.sat4j.minisat.core.Solver.findModel(IVecInt)
1221    2   1    0 org.sat4j.minisat.core.Solver.isDBSimplificationAllowed()
1222    2   1    0 org.sat4j.minisat.core.Solver.setDBSimplificationAllowed(boolean)
1223    2   1    1 org.sat4j.minisat.core.Solver.nextFreeVarId(boolean)
1224    2   1    1 org.sat4j.minisat.core.Solver.addBlockingClause(IVecInt)
1225   11   7    1 org.sat4j.minisat.core.Solver.unset(int)
1226    2   1    1 org.sat4j.minisat.core.Solver.setLogPrefix(String)
1227    2   1    1 org.sat4j.minisat.core.Solver.getLogPrefix()
1228    4   1    1 org.sat4j.minisat.core.Solver.unsatExplanation()
1229   11   4    1 org.sat4j.minisat.core.Solver.modelWithInternalVariables()
1230    2   1    1 org.sat4j.minisat.core.Solver.realNumberOfVariables()
1231    2   1    1 org.sat4j.minisat.core.Solver.stop()
1232    6   2    1 org.sat4j.minisat.core.Solver.backtrack(Constr[])
1233    7   5    1 org.sat4j.minisat.core.Solver.truthValue(int)
1234    2   1    1 org.sat4j.minisat.core.Solver.currentDecisionLevel()
1235    2   2    1 org.sat4j.minisat.core.Solver.getLiteralsPropagatedAt(int)
1236    2   2    1 org.sat4j.minisat.core.Solver.suggestNextLiteralToBranchOn(int)
1237    2   1    0 org.sat4j.minisat.core.Solver.isNeedToReduceDB()
1238    2   1    0 org.sat4j.minisat.core.Solver.setNeedToReduceDB(boolean)
1239    2   1    0 org.sat4j.minisat.core.Solver.setLogger(ILogAble)
1240    2   1    0 org.sat4j.minisat.core.Solver.getLogger()
1241    2   1    0 org.sat4j.minisat.core.Solver.getVariableHeuristics()
1242    2   1    0 org.sat4j.minisat.core.Solver.getLearnedConstraints()
1243   16   6    1 org.sat4j.minisat.core.Solver.setLearnedConstraintsDeletionStrategy(ConflictTimer,LearnedConstraintsEvaluationType)
1244   14   5    1 org.sat4j.minisat.core.Solver.setLearnedConstraintsDeletionStrategy(LearnedConstraintsEvaluationType)
1245    2   1    0 org.sat4j.minisat.core.Solver.isSolverKeptHot()
1246    2   1    0 org.sat4j.minisat.core.Solver.setKeepSolverHot(boolean)
1247    2   1    0 org.sat4j.minisat.core.Solver.Comparator$1.compare(Integer,Integer)
1248   19   7    0 org.sat4j.minisat.core.Solver.addClauseOnTheFly(IConstr[])
1249    2   1    0 org.sat4j.minisat.core.Solver.getSolvingEngine()
1250   17   6    1 org.sat4j.minisat.core.Solver.addAtMostOnTheFly(IConstr[],int)
1251   14   4    0 org.sat4j.minisat.core.Solver.fromLastDecisionLevel(IVecInt)
1252    2   1    0 org.sat4j.minisat.core.Solver.setUnitClauseProvider(UnitClauseProvider)
1253    2   2    0 daikon.tools.InvariantChecker.InvariantChecker()
1254    7   4    0 daikon.tools.InvariantChecker.main(String[])
1255  113  47    1 daikon.tools.InvariantChecker.mainHelper(String[])
1256    3   1    0 daikon.tools.InvariantChecker.toPercentage(int,int)
1257   29  10    0 daikon.tools.InvariantChecker.checkInvariants()
1258    3   1    0 daikon.tools.InvariantChecker.EnterCall.EnterCall(PptTopLevel,ValueTuple)
1259   27   8    1 daikon.tools.InvariantChecker.InvariantCheckProcessor.process_sample(PptMap,PptTopLevel,ValueTuple,Integer)
1260   53  26    0 daikon.tools.InvariantChecker.InvariantCheckProcessor.add(PptTopLevel,ValueTuple)
1261    2   1    0 daikon.tools.InvariantChecker.invariant2str(PptTopLevel,Invariant)
1262    2   1    0 UnknownSuperClass.a()
1263    2   1    0 UnknownSuperClass.b()
1264    2   1    0 UnknownSuperClass.toString()
1265    4   1    0 it.feio.android.omninotes.models.Attachment.Attachment(Uri,String)
1266    8   1    0 it.feio.android.omninotes.models.Attachment.Attachment(int,Uri,String,int,long,String)
1267    4   1    0 it.feio.android.omninotes.models.Attachment.Attachment(Parcel)
1268    2   1    0 it.feio.android.omninotes.models.Attachment.getUri()
1269    3   1    0 it.feio.android.omninotes.models.Attachment.setUri(Uri)
1270    2   1    0 it.feio.android.omninotes.models.Attachment.describeContents()
1271    4   1    0 it.feio.android.omninotes.models.Attachment.writeToParcel(Parcel,int)
1272    2   1    0 it.feio.android.omninotes.models.Attachment.Parcelable.Creator$1.createFromParcel(Parcel)
1273    2   1    0 it.feio.android.omninotes.models.Attachment.Parcelable.Creator$1.newArray(int)
1274    2   1    0 Demo4.doSomething()
1275    2   1    0 Demo.main(String[])
1276    5   2    0 UnknownCalls.main(String[])
1277    3   1    0 com.duckduckgo.mobile.android.util.TorIntegration.TorIntegration(Activity)
1278    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.prepareTorSettings()
1279   10   4    0 com.duckduckgo.mobile.android.util.TorIntegration.prepareTorSettings(boolean)
1280    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.resetProxy()
1281    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.resetProxy(WebView)
1282    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.enableOrbotProxy()
1283    4   2    0 com.duckduckgo.mobile.android.util.TorIntegration.enableOrbotProxy(WebView)
1284    6   3    0 com.duckduckgo.mobile.android.util.TorIntegration.requestOrbotInstallAndStart()
1285    3   1    1 com.duckduckgo.mobile.android.util.TorIntegration.dismissDialogs()
1286    4   3    1 com.duckduckgo.mobile.android.util.TorIntegration.dismissOrbotPromptDialog()
1287    3   1    1 com.duckduckgo.mobile.android.util.TorIntegration.promptToInstall()
1288    4   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
1289    1   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
1290   12   1    1 com.duckduckgo.mobile.android.util.TorIntegration.showDownloadDialog(CharSequence,CharSequence,CharSequence,CharSequence,String)
1291    4   3    1 com.duckduckgo.mobile.android.util.TorIntegration.dismissOrbotStartDialog()
1292    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
1293    1   1    0 com.duckduckgo.mobile.android.util.TorIntegration.DialogInterface.OnClickListener$1.onClick(DialogInterface,int)
1294   11   1    0 com.duckduckgo.mobile.android.util.TorIntegration.requestOrbotStart()
1295    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.isTorSettingEnabled()
1296    2   2    0 com.duckduckgo.mobile.android.util.TorIntegration.isOrbotRunningAccordingToSettings()
1297    2   3    0 com.duckduckgo.mobile.android.util.TorIntegration.isTorEnabledAndOrbotRunning()
1298    2   1    0 com.duckduckgo.mobile.android.util.TorIntegration.isTorSupported()
1299    4   1    0 org.bottiger.podcast.adapters.SubscriptionAdapter$3.SubscriptionAdapter$3(SubscriptionAdapter,ImageView,SubscriptionViewHolder)
1300    2   1    0 org.bottiger.podcast.adapters.SubscriptionAdapter$3.setResource(Bitmap)
1301    3   1    0 SkipException.SkipException(Object)
1302    1   1    0 A.Runnable$1.run()
1303    4   1    0 A.foo()
1304    3   1    0 Demo5.foo()
1305    2   1    0 org.springframework.beans.support.PropertyComparator.compare(T,T)
1306    1   1    0 A3.Runnable$1.run()
1307    4   1    0 A3.foo()
1308    1   1    0 visibility.YamlRepresenter.YamlRepresenter()
1309    2   1    0 visibility.YamlRepresenter.RepresentConfigurationSection.representData(Object)
1310   25   1    1 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase.PropPanelUseCase()
1311    8   3    1 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase.newUseCase()
1312    4   2    1 org.argouml.uml.ui.behavior.use_cases.PropPanelUseCase.newExtensionPoint()
1313    1   1    1 spoon.test.comment.testclasses.JavaDocComment.m()
1314    2   1    1 spoon.test.comment.testclasses.JavaDocComment.m(int)
1315    3   1    0 Caller.Caller()
1316    1   1    0 ImportAndExtendWithPackageName.main(String[])
1317    2   1    0 FooNoClassPath.m()
1318    1   1    0 fr.inria.AnotherMissingImport.doSomething(String)
1319    3   1    0 fr.inria.AnotherMissingImport.main(String[])
1320    2   1    1 IndexWriter.IndexWriter(String,Analyzer,boolean)
1321    2   1    1 IndexWriter.IndexWriter(File,Analyzer,boolean)
1322    6   2    0 IndexWriter.Lock.With$1.doBody()
1323   14   3    1 IndexWriter.IndexWriter(Directory,Analyzer,boolean)
1324    5   1    1 IndexWriter.close()
1325    6   2    1 IndexWriter.docCount()
1326    7   1    1 IndexWriter.addDocument(Document)
1327    2   1    0 IndexWriter.newSegmentName()
1328    5   5    1 IndexWriter.optimize()
1329   13   4    1 IndexWriter.addIndexes(Directory[])
1330   11   8    1 IndexWriter.flushRamSegments()
1331   15   5    1 IndexWriter.maybeMergeSegments()
1332    2   1    1 IndexWriter.mergeSegments(int)
1333    4   1    0 IndexWriter.Lock.With$1.doBody()
1334   28   6    1 IndexWriter.mergeSegments(int,boolean)
1335   10   3    0 IndexWriter.deleteSegments(Vector)
1336    3   2    0 IndexWriter.deleteFiles(Vector,Directory)
1337    9   5    0 IndexWriter.deleteFiles(Vector,Vector)
1338   10   4    0 IndexWriter.readDeleteableFiles()
1339    8   2    0 IndexWriter.writeDeleteableFiles(Vector)
1340    2   1    0 snippet.test.resources.SnippetResources.staticMethod()
1341    2   1    0 snippet.test.resources.SnippetResources.method(int)
1342    2   1    0 Panini.m()
1343    4   1    0 spoon.test.subclass.prettyprinter.DefaultPrettyPrinterExample.DefaultPrettyPrinterExample(String)
1344    2   1    0 com.squareup.javapoet.AnnotationSpecTest.Breakfast.toString()
1345    1   1    0 org.eclipse.draw2d.text.FlowUtilities.LookAhead.getWidth()
1346    6   5    0 org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)
1347    8   3    0 org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(String)
1348    4   4    1 org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(TextFragmentBox,Font)
1349    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderAscent(InlineFlow)
1350    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(InlineFlow)
1351    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderDescent(InlineFlow)
1352    5   3    0 org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(InlineFlow)
1353    5   2    1 org.eclipse.draw2d.text.FlowUtilities.getTextLayout()
1354    5   2    1 org.eclipse.draw2d.text.FlowUtilities.initBidi(TextFragmentBox,String,Font)
1355    5   3    0 org.eclipse.draw2d.text.FlowUtilities.measureString(TextFragmentBox,String,int,Font)
1356   13   7    1 org.eclipse.draw2d.text.FlowUtilities.setupFragment(TextFragmentBox,Font,String)
1357  117  44    1 org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(TextFragmentBox,String,FlowContext,LookAhead,Font,int)
1358    5   1    1 org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(String,Font,int,int)
1359    2   1    1 org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()
1360    2   1    1 org.eclipse.draw2d.text.FlowUtilities.getEllipsisWidth(Font)
1361    4   2    0 Foo.testCatchWithUnknownException(File)
1362    4   2    0 Foo.testMultiCatchWithUnknownException1(File)
1363    4   2    0 Foo.testMultiCatchWithUnknownException2(File)
1364    3   1    0 Foo.method()
1365    2   1    0 Foo.m1()
1366    3   1    0 Foo.m2()
1367    2   1    0 Foo.m3()
1368    2   1    0 Foo.Foo()
1369    9   1    0 Foo.inv()
1370   10   1    0 Foo.field()
1371    2   1    0 spoon.test.variable.Tacos.Abcd$1.m()
1372    4   1    0 spoon.test.variable.Tacos.testExtendedStringLiteral()
1373    2   1    0 fr.simplemodule.pack.SimpleClass.main(String[])
1374  178  66    0 spoon.test.prettyprinter.testclasses.ComplexClass.getTypeReference(TypeBinding)
1375    2   1    0 spoon.test.prettyprinter.NestedSuperCall.NestedSuperCall(NestedCallable)
1376    2   1    0 spoon.test.prettyprinter.NestedCallable.SuperCallable.SuperCallable(String)
1377    2   1    0 spoon.test.prettyprinter.NestedCallable.SuperCallable.toString()
1378   15   7    0 fr.inria.sandbox.Main.toString()
1379    2   1    0 spoon.test.imports.testclasses2.apachetestsuite.LangTestSuite.suite()
1380    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3.AllLangTestJava3(String)
1381    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3.main(String[])
1382    7   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticjava3.AllLangTestJava3.truc()
1383    2   1    0 spoon.test.imports.testclasses2.apachetestsuite.enums.EnumTestSuite.suite()
1384    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod.AllLangTestSuiteStaticMethod(String)
1385    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod.main(String[])
1386    7   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticmethod.AllLangTestSuiteStaticMethod.truc()
1387    2   1    0 spoon.test.imports.testclasses2.apachetestsuite.enum2.EnumTestSuite.suite()
1388    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite.AllLangTestSuite(String)
1389    2   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite.main(String[])
1390    7   1    1 spoon.test.imports.testclasses2.apachetestsuite.staticcollision.AllLangTestSuite.suite()
1391    2   1    0 spoon.test.imports.testclasses2.StaticWithNested.StaticNested.fnc()
1392    1   1    0 spoon.test.imports.testclasses2.Interners.Interners()
1393    2   1    0 spoon.test.exceptions.ClassWithError.foo()
1394    1   1    0 org.myorganization.MyInterface.method()
1395    2   1    0 fr.acme.MyClass.MyClass(String)
1396    1   1    0 fr.acme.MyClass.method()
1397    1   1    0 org.myorganization.pack.MyAbstractClass.MyAbstractClass(String)
1398    8   5    0 spoon.test.visitor.Foo.factorial(int)
1399   11   1    0 Assignments.func(int)
1400    5   3    0 spoon.test.intercession.insertBefore.InsertBeforeExample2.InsertBeforeExample2(boolean,int)
1401    4   3    0 spoon.test.loop.testclasses.Foo.m()
1402    1   1    0 spoontest.Foo.Foo()
1403    2   1    0 $Poor$Name.lookingForTroubles()
1404    1   1    0 $Poor$Name.Choice.Choice()
1405    2   1    0 compilation.SimpleProcessor.process(CtType)
1406    2   1    0 compilation.Bar.m()
1407    1   1    0 compilation.IBar.m()
1408    5   1    0 Tacos.m()
1409    5   1    0 Tacos.m2()
1410    5   1    0 Tacos.m3()
1411    5   1    0 Tacos.m4()
1412    1   1    0 Tacos.Burritos.makeBurritos(int)
1413    2   2    0 spoon.generating.ReplacementVisitorGenerator.isToBeProcessed(CtType)
1414    2   1    0 spoon.generating.ReplacementVisitorGenerator.process(CtType)
1415    2   1    0 spoon.generating.ReplacementVisitorGenerator.TypeFilter$1.matches(CtTypeReference)
1416   12   2    0 spoon.generating.ReplacementVisitorGenerator.createReplacementVisitor()
1417   36  10    0 spoon.generating.CtBiScannerGenerator.process()
1418    2   1    0 spoon.generating.CtBiScannerGenerator.TypeFilter$1.matches(CtTypeReference)
1419   15   2    0 spoon.generating.CtBiScannerGenerator.createBiScanner()
1420    1   1    0 spoon.generating.meta.ModelRoleHandlerTemplate.ModelRoleHandlerTemplate()
1421    2   1    0 spoon.generating.meta.RoleHandlerTemplate.RoleHandlerTemplate()
1422    2   1    0 spoon.generating.meta.RoleHandlerTemplate.getValue(T)
1423    2   1    0 spoon.generating.meta.RoleHandlerTemplate.setValue(T,U)
1424    2   1    0 spoon.generating.meta.Node.$getterName$()
1425    1   1    0 spoon.generating.meta.Node.$setterName$(ValueType)
1426    1   1    0 spoon.generating.meta.AbstractHandler.AbstractHandler($Role$,Class,Class)
1427    2   1    0 spoon.generating.meta.AbstractHandler.castTarget(Object)
1428    2   1    0 spoon.generating.meta.AbstractHandler.castValue(Object)
1429    2   1    0 spoon.generating.meta.AbstractHandler.getRole()
1430    2   1    0 spoon.generating.meta.AbstractHandler.getTargetType()
1431    2   1    0 spoon.generating.meta.AbstractHandler.getValue(T)
1432    1   1    0 spoon.generating.meta.AbstractHandler.setValue(T,U)
1433    2   1    0 spoon.generating.meta.AbstractHandler.getValueClass()
1434    2   1    0 spoon.generating.meta.AbstractHandler.getContainerKind()
1435    2   1    0 spoon.generating.meta.AbstractHandler.asCollection(T)
1436    2   1    0 spoon.generating.meta.AbstractHandler.asSet(T)
1437    2   1    0 spoon.generating.meta.AbstractHandler.asList(T)
1438    2   1    0 spoon.generating.meta.AbstractHandler.asMap(T)
1439    3   1    0 spoon.generating.clone.CloneBuilderTemplate.copy(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
1440    4   1    0 spoon.generating.clone.CloneBuilderTemplate.build(CloneBuilderTemplate,CtElement,CtElement)
1441    2   1    0 spoon.generating.clone.CloneBuilderTemplate.setOther(CtElement)
1442    3   1    0 spoon.generating.clone.SetterTemplateMatcher.setElement(boolean)
1443    2   1    0 spoon.generating.clone.GetterTemplateMatcher.getElement()
1444    2   1    0 spoon.generating.clone.CloneVisitorTemplate.CloneVisitorTemplate(CloneHelper)
1445    2   1    0 spoon.generating.clone.CloneVisitorTemplate.getClone()
1446    4   4    0 spoon.generating.replace.ReplacementVisitor.replace(CtElement,CtElement)
1447    4   3    0 spoon.generating.replace.ReplacementVisitor.replace(CtElement,E)
1448    3   2    0 spoon.generating.replace.ReplacementVisitor.ReplacementVisitor(CtElement,CtElement)
1449   22   8    0 spoon.generating.replace.ReplacementVisitor.replaceInMapIfExist(V,ReplaceMapListener)
1450   14   6    0 spoon.generating.replace.ReplacementVisitor.replaceInSetIfExist(T,ReplaceSetListener)
1451   19   7    0 spoon.generating.replace.ReplacementVisitor.replaceInListIfExist(T,ReplaceListListener)
1452   10   6    0 spoon.generating.replace.ReplacementVisitor.replaceElementIfExist(CtElement,ReplaceListener)
1453    6   1    0 spoon.generating.replace.ReplaceScanner.ReplaceScanner(Object)
1454   23   7    0 spoon.generating.replace.ReplaceScanner.visitCtMethod(T)
1455   39   7    0 spoon.generating.replace.ReplaceScanner.createInvocation(Factory,T,CtExpression,CtInvocation,Class)
1456    9   2    0 spoon.generating.replace.ReplaceScanner.getGetterType(Factory,CtInvocation)
1457   10   8    0 spoon.generating.replace.ReplaceScanner.getTypeFromTypeParameterReference(CtTypeParameterReference)
1458    2   1    0 spoon.generating.replace.ReplaceScanner.TypeFilter$1.matches(CtTypeReference)
1459   16   2    0 spoon.generating.replace.ReplaceScanner.createListenerClass(Factory,String,CtTypeReference,Type)
1460    8   1    0 spoon.generating.replace.ReplaceScanner.updateConstructor(CtClass,CtTypeReference)
1461    4   1    0 spoon.generating.replace.ReplaceScanner.updateField(CtClass,CtTypeReference)
1462    5   1    0 spoon.generating.replace.ReplaceScanner.updateSetter(Factory,CtMethod,CtTypeReference,CtField,CtMethod)
1463    8   3    0 spoon.generating.replace.ReplaceScanner.getSetter(String,CtType)
1464    2   1    0 spoon.generating.replace.ReplaceScanner.getConstructorCall(CtClass,CtExpression)
1465    2   1    0 spoon.generating.replace.ReplaceScanner.Type.Type(String)
1466    1   1    0 spoon.generating.scanner.CtBiScannerTemplate.enter(CtElement)
1467    1   1    0 spoon.generating.scanner.CtBiScannerTemplate.exit(CtElement)
1468    7   3    0 spoon.generating.scanner.CtBiScannerTemplate.biScan(CtElement,CtElement)
1469    2   1    0 spoon.generating.scanner.CtBiScannerTemplate.biScan(CtRole,CtElement,CtElement)
1470    3   3    0 spoon.generating.scanner.CtBiScannerTemplate.biScan(CtRole,CtElement,CtElement)
1471    2   1    0 spoon.generating.scanner.PeekElementTemplate.statement()
1472   16   1    0 spoon.LauncherTest.testInitEnvironmentDefault()
1473   16   1    0 spoon.LauncherTest.testInitEnvironment()
1474    9   1    0 spoon.LauncherTest.testLauncherInEmptyWorkingDir()
1475    7   1    0 spoon.LauncherTest.testLLauncherBuildModelReturnAModel()
1476    3   1    0 spoon.test.query_function.testclasses.VariableReferencesFromStaticMethod.staticMethod()
1477    7   1    0 spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf()
1478   21   2    0 spoon.test.secondaryclasses.ClassesTest.testAnonymousClass()
1479    2   1    0 spoon.test.secondaryclasses.ClassesTest.AbstractFilter$1.matches(CtClass)
1480   15   1    0 spoon.test.secondaryclasses.ClassesTest.testIsAnonymousMethodInCtClass()
1481    8   1    0 spoon.test.secondaryclasses.ClassesTest.testTopLevel()
1482    5   1    0 spoon.test.secondaryclasses.ClassesTest.testInnerClassContruction()
1483    7   1    0 spoon.test.secondaryclasses.ClassesTest.testAnonymousClassInStaticField()
1484    1   1    0 spoon.test.secondaryclasses.testclasses.Secondary.m()
1485    1   1    0 spoon.test.secondaryclasses.testclasses.Secondary.m1()
1486    2   1    0 spoon.test.secondaryclasses.testclasses.Secondary.m3()
1487    1   1    0 spoon.test.secondaryclasses.testclasses.PrivateInnerClasses.DataClassComparator.DataClassComparator()
1488    2   1    0 spoon.test.secondaryclasses.testclasses.PrivateInnerClasses.DataClassComparator.compare(T,T)
1489    4   1    0 spoon.test.secondaryclasses.testclasses.PrivateInnerClasses.PrivateInnerClasses()
1490    2   1    0 spoon.test.secondaryclasses.testclasses.AnonymousClass.ActionListener$1.actionPerformed(ActionEvent)
1491    4   1    0 spoon.test.secondaryclasses.testclasses.AnonymousClass.crashingMethod()
1492    2   1    0 spoon.test.secondaryclasses.testclasses.AnonymousClass.annonymousCreation()
1493    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.getDevice()
1494    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.getColorModel()
1495    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.ColorModel$1.getRed(int)
1496    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.ColorModel$1.getGreen(int)
1497    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.ColorModel$1.getBlue(int)
1498    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.ColorModel$1.getAlpha(int)
1499   10   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.getColorModel(int)
1500    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.getDefaultTransform()
1501    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.getNormalizingTransform()
1502    2   1    0 spoon.test.secondaryclasses.testclasses.Pozole.GraphicsConfiguration$1.getBounds()
1503    1   1    0 spoon.test.generics.testclasses3.ClassThatBindsAGenericType.main(String[])
1504    3   1    0 spoon.test.generics.testclasses3.GenericConstructor.GenericConstructor()
1505    1   1    0 spoon.test.generics.testclasses3.GenericMethodCallWithExtend.tmp()
1506    3   1    0 spoon.test.generics.testclasses3.GenericMethodCallWithExtend.methode(E)
1507    2   1    0 spoon.test.generics.testclasses3.GenericMethodCallWithExtend.m2()
1508    6   1    0 spoon.test.generics.testclasses3.BugCollection.foo()
1509    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.size()
1510    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.isEmpty()
1511    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.contains(Object)
1512    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.iterator()
1513    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.toArray()
1514    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.toArray(T[])
1515    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.add(V)
1516    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.remove(Object)
1517    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.containsAll(Collection)
1518    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.addAll(V)
1519    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.retainAll(Collection)
1520    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.removeAll(Collection)
1521    2   2    0 spoon.test.generics.testclasses3.BugCollection.Foo.clear()
1522    1   1    0 spoon.test.generics.testclasses3.Bar.transform(I)
1523    4   3    0 spoon.test.generics.testclasses3.Foo.Bar$1.transform(K)
1524    6   1    0 spoon.test.generics.testclasses3.Foo.meth1()
1525    2   1    0 spoon.test.generics.testclasses3.InstanceOfMapEntryGeneric.methode(Object)
1526    1   1    0 spoon.test.generics.testclasses3.ClassThatDefinesANewTypeArgument.foo(T)
1527    2   1    1 spoon.test.generics.testclasses3.ComparableComparatorBug.comparableComparator()
1528    2   1    1 spoon.test.generics.testclasses3.ComparableComparatorBug.ComparableComparatorBug()
1529    2   1    1 spoon.test.generics.testclasses3.ComparableComparatorBug.compare(E,E)
1530    2   1    1 spoon.test.generics.testclasses3.ComparableComparatorBug.hashCode()
1531    2   3    1 spoon.test.generics.testclasses3.ComparableComparatorBug.equals(Object)
1532    1   1    0 spoon.test.generics.testclasses3.SimilarSignatureMethodes.methode(E)
1533    1   1    0 spoon.test.generics.testclasses3.SimilarSignatureMethodes.methode(E)
1534    2   1    0 spoon.test.generics.testclasses4.C.m(W)
1535    1   1    0 spoon.test.generics.testclasses4.A.m6(T)
1536    1   1    0 spoon.test.generics.testclasses4.B.m6(S)
1537    2   1    0 spoon.test.generics.testclasses2.LikeCtClassImpl.getConstructors()
1538    2   1    0 spoon.test.generics.testclasses2.LikeCtClassImpl.setConstructors(T)
1539    1   1    0 spoon.test.generics.testclasses2.LikeCtClass.getConstructors()
1540    1   1    0 spoon.test.generics.testclasses2.LikeCtClass.setConstructors(T)
1541    1   1    0 spoon.test.generics.testclasses2.SameSignature2.visitCtConditional(U)
1542    1   1    0 spoon.test.generics.testclasses2.ISameSignature.visitCtConditional(V)
1543    1   1    0 spoon.test.generics.testclasses2.SameSignature3.visitCtConditional(U,K,L)
1544    1   1    0 spoon.test.generics.testclasses2.ISameSignature3.visitCtConditional(V,L,K)
1545    1   1    0 spoon.test.generics.testclasses.IBurritos.make()
1546    2   1    0 spoon.test.generics.testclasses.OuterTypeParameter.ArrayList$1.iterator()
1547    4   1    0 spoon.test.generics.testclasses.OuterTypeParameter.method()
1548    1   1    0 spoon.test.generics.testclasses.Paella.Paella()
1549    2   1    0 spoon.test.generics.testclasses.Paella.make()
1550    2   1    0 spoon.test.generics.testclasses.SameSignature.iterator()
1551    1   1    0 spoon.test.generics.testclasses.SameSignature.forEach(T)
1552    2   1    0 spoon.test.generics.testclasses.Panini.apply(Long)
1553    1   1    0 spoon.test.generics.testclasses.Orange.A.method(M)
1554    1   1    0 spoon.test.generics.testclasses.Lunch.eatMe(A,B,C)
1555    1   1    0 spoon.test.generics.testclasses.rxjava.Subscriber.onNext(T)
1556    1   1    0 spoon.test.generics.testclasses.rxjava.Subscriber.onError(Throwable)
1557    1   1    0 spoon.test.generics.testclasses.rxjava.Subscriber.onComplete()
1558    2   1    0 spoon.test.generics.testclasses.rxjava.Observable.subscribe(T)
1559    2   1    0 spoon.test.generics.testclasses.rxjava.ToNotificationSubscriber.ToNotificationSubscriber(Object)
1560    1   1    0 spoon.test.generics.testclasses.rxjava.ToNotificationSubscriber.onNext(T)
1561    1   1    0 spoon.test.generics.testclasses.rxjava.ToNotificationSubscriber.onError(Throwable)
1562    1   1    0 spoon.test.generics.testclasses.rxjava.ToNotificationSubscriber.onComplete()
1563    2   1    0 spoon.test.generics.testclasses.rxjava.BehaviorSubject.create()
1564    1   1    0 spoon.test.generics.testclasses.rxjava.BehaviorSubject.onNext(T)
1565    1   1    0 spoon.test.generics.testclasses.rxjava.BehaviorSubject.onError(Throwable)
1566    1   1    0 spoon.test.generics.testclasses.rxjava.BehaviorSubject.onComplete()
1567    1   1    0 spoon.test.generics.testclasses.rxjava.Publisher.subscribe(T)
1568    1   1    0 spoon.test.generics.testclasses.FakeTpl.apply(CtNamedElement)
1569    1   1    0 spoon.test.generics.testclasses.FakeTpl.test(CtType,int,T)
1570    2   1    0 spoon.test.generics.testclasses.ExtendedPaella.InnerPaella.innerMachin(L)
1571    2   1    0 spoon.test.generics.testclasses.ExtendedPaella.InnerPaella.innerToto(T)
1572    2   1    0 spoon.test.generics.testclasses.ExtendedPaella.machin()
1573    2   1    0 spoon.test.generics.testclasses.ExtendedPaella.toto(T)
1574    1   1    0 spoon.test.generics.testclasses.CelebrationLunch.WeddingLunch.Section.reserve(S)
1575    1   1    0 spoon.test.generics.testclasses.CelebrationLunch.WeddingLunch.eatMe(X,Tacos,C)
1576    1   1    0 spoon.test.generics.testclasses.CelebrationLunch.WeddingLunch2.Section.reserve(S)
1577    1   1    0 spoon.test.generics.testclasses.CelebrationLunch.eatMe(M,K,C)
1578    1   1    0 spoon.test.generics.testclasses.CelebrationLunch.prepare(R)
1579    6   1    0 spoon.test.generics.testclasses.CelebrationLunch.celebrate()
1580    2   1    0 spoon.test.generics.testclasses.EnumSetOf.m()
1581    8   1    0 spoon.test.executable.ExecutableRefTest.methodTest()
1582    8   1    0 spoon.test.executable.ExecutableRefTest.constructorTest()
1583    7   1    0 spoon.test.executable.ExecutableRefTest.testGetActualClassTest()
1584   11   2    0 spoon.test.executable.ExecutableRefTest.testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable()
1585   14   1    0 spoon.test.executable.ExecutableRefTest.getInvocationFromMethod(String)
1586    6   1    0 spoon.test.executable.ExecutableRefTest.testOverridingMethod()
1587    1   1    0 spoon.test.executable.testclasses.MyIntf.myMethod()
1588    2   1    0 spoon.test.executable.testclasses.WithEnum.from(String)
1589    2   1    0 spoon.test.executable.testclasses.ExecutableRefTestSource.testMethod()
1590    2   1    0 spoon.test.executable.testclasses.ExecutableRefTestSource.testConstructor()
1591    1   1    0 spoon.test.executable.testclasses.ExecutableRefTestSource.myMethod()
1592    2   1    0 spoon.test.executable.testclasses.A.getInt1()
1593    2   1    0 spoon.test.executable.testclasses.A.getInt2()
1594    2   1    0 spoon.test.executable.testclasses.A.getInt3()
1595    2   1    0 spoon.test.executable.testclasses.A.getInt4()
1596    2   1    0 spoon.test.executable.testclasses.Pozole.cook()
1597    1   1    0 spoon.test.executable.testclasses.Pozole.run()
1598    4   1    0 spoon.test.executable.testclasses.Pozole.m()
1599    7   1    0 spoon.test.filters.CUFilterTest.testWithoutFilters()
1600    2   1    0 spoon.test.filters.CUFilterTest.CompilationUnitFilter$1.exclude(String)
1601   14   1    0 spoon.test.filters.CUFilterTest.testSingleExcludeWithFilter()
1602   11   1    0 spoon.test.filters.CUFilterTest.testSingleExcludeWithoutFilter()
1603    3   1    0 spoon.test.filters.testclasses.Tostada.Tostada$1.prepare()
1604    5   1    0 spoon.test.filters.testclasses.Tostada.make()
1605    1   1    0 spoon.test.filters.testclasses.Tostada.prepare()
1606    2   1    0 spoon.test.filters.testclasses.Tostada.toString()
1607    1   1    0 spoon.test.filters.testclasses.Tostada.honey()
1608    1   1    0 spoon.test.filters.testclasses.Tostada.foo()
1609    1   1    0 spoon.test.filters.testclasses.Honey.honey()
1610    2   1    0 spoon.test.filters.testclasses.AbstractTostada.Tostada$1.prepare()
1611    2   1    0 spoon.test.filters.testclasses.AbstractTostada.Tostada$1.make()
1612    6   1    0 spoon.test.filters.testclasses.AbstractTostada.make()
1613    1   1    0 spoon.test.filters.testclasses.AbstractTostada.prepare()
1614    1   1    0 spoon.test.filters.testclasses.AbstractTostada.honey()
1615    2   1    0 spoon.test.filters.testclasses.Tacos.make()
1616    3   1    0 spoon.test.filters.testclasses.Tacos.prepare()
1617    5   1    0 spoon.test.filters.testclasses.Foo.foo()
1618    4   3    0 spoon.test.filters.testclasses.Foo.bar()
1619    3   1    0 spoon.test.filters.testclasses.SubTostada.prepare()
1620    4   1    0 spoon.test.filters.testclasses.FooLine.simple()
1621    3   2    0 spoon.test.filters.testclasses.FooLine.loopBlock()
1622    3   2    0 spoon.test.filters.testclasses.FooLine.loopNoBlock()
1623    2   2    0 spoon.test.filters.testclasses.FooLine.loopNoBody()
1624    3   2    0 spoon.test.filters.testclasses.FooLine.ifBlock()
1625    3   2    0 spoon.test.filters.testclasses.FooLine.ifNoBlock()
1626    6   2    0 spoon.test.filters.testclasses.FooLine.switchBlock()
1627    2   1    0 spoon.test.filters.testclasses.Antojito.prepare()
1628    1   1    0 spoon.test.filters.testclasses.Antojito.prepare(String)
1629    1   1    0 spoon.test.filters.testclasses.ITostada.make()
1630    3   1    0 spoon.test.filters.testclasses.FieldAccessFilterTacos.FieldAccessFilterTacos()
1631    3   1    0 spoon.test.filters.testclasses.FieldAccessFilterTacos.m()
1632    4   1    0 spoon.test.snippets.SnippetTest.testSnippetFullClass()
1633    4   2    0 spoon.test.snippets.SnippetTest.testSnippetWihErrors()
1634   14   1    0 spoon.test.snippets.SnippetTest.testCompileSnippetSeveralTimes()
1635    4   1    0 spoon.test.snippets.SnippetTest.testCompileSnippetWithContext()
1636    4   1    0 spoon.test.snippets.SnippetTest.testCompileStatementWithReturn()
1637    7   1    0 spoon.test.snippets.SnippetTest.testIssue981()
1638   15   1    0 spoon.test.snippets.SnippetTest.testCompileAndReplaceSnippetsIn()
1639    9   1    0 spoon.test.OutputTypeTest.testOutputTypeLoading()
1640    4   1    0 spoon.test.fieldaccesses.testclasses.Mouse.meth1()
1641    3   1    0 spoon.test.fieldaccesses.testclasses.Mouse.meth1b()
1642    2   1    0 spoon.test.fieldaccesses.testclasses.Mouse.meth2()
1643    2   1    0 spoon.test.fieldaccesses.testclasses.Mouse.meth3()
1644    2   1    0 spoon.test.fieldaccesses.testclasses.Mouse.meth4()
1645    4   1    0 spoon.test.fieldaccesses.testclasses.BUG20160112.test()
1646    3   1    0 spoon.test.fieldaccesses.testclasses.TargetedAccessPosition.foo()
1647    2   1    0 spoon.test.fieldaccesses.testclasses.Panini.Sandwich$1.m()
1648    5   1    0 spoon.test.fieldaccesses.testclasses.Panini.m()
1649    3   1    0 spoon.test.fieldaccesses.testclasses.Panini.make()
1650    6   1    0 spoon.test.fieldaccesses.testclasses.Panini.prepare()
1651    1   1    0 spoon.test.fieldaccesses.testclasses.Panini.Sandwich.m()
1652    1   1    0 spoon.test.fieldaccesses.testclasses.Kuu.m(Mole.Delicious)
1653    7   1    0 spoon.test.fieldaccesses.testclasses.Tacos.m()
1654    1   1    0 spoon.test.fieldaccesses.testclasses.Tacos.runIteratorTest(spoon.test.fieldaccesses.testclasses.internal.Foo.KnownOrder)
1655    1   1    0 spoon.test.fieldaccesses.testclasses.Tacos.inv(Foo.SubInner)
1656    1   1    0 spoon.test.fieldaccesses.testclasses.Tacos.inv(int)
1657    2   2    0 spoon.test.fieldaccesses.testclasses.Tacos.Burritos.add(java.lang.Object)
1658    2   1    0 spoon.test.fieldaccesses.testclasses.BCUBug20140402.run()
1659    2   1    0 spoon.test.fieldaccesses.testclasses.Pozole.Cook.m()
1660    3   1    0 spoon.test.fieldaccesses.testclasses.Pozole.Cook$1.m()
1661    6   1    0 spoon.test.fieldaccesses.testclasses.Pozole.cook()
1662    1   1    0 spoon.test.change.testclasses.SubjectOfChange.SubjectOfChange()
1663   26   1    0 spoon.test.strings.StringLiteralTest.testSnippetFullClass()
1664    9   1    0 spoon.test.strings.testclasses.Main.main(String[])
1665    8   1    0 spoon.test.strings.StringTest.testModelBuildingInitializer()
1666   12   1    0 spoon.test.modifiers.TestModifiers.testMethodWithVarargsDoesNotBecomeTransient()
1667   10   1    0 spoon.test.modifiers.TestModifiers.testCtModifiableAddRemoveReturnCtModifiable()
1668   13   2    0 spoon.test.modifiers.TestModifiers.testSetVisibility()
1669   66  17    0 spoon.test.modifiers.TestModifiers.testGetModifiersHelpers()
1670    7   1    0 spoon.test.modifiers.TestModifiers.checkCtModifiableHelpersAssertion(CtModifiable,boolean,boolean,boolean,boolean,boolean,boolean)
1671    7   1    0 spoon.test.modifiers.TestModifiers.testClearModifiersByEmptySet()
1672    7   1    0 spoon.test.modifiers.TestModifiers.testClearModifiersByNull()
1673    6   4    0 spoon.test.modifiers.testclasses.MethodVarArgs.getInitValues(String,String)
1674    2   1    0 spoon.test.modifiers.testclasses.ConcreteClass.ConcreteClass()
1675    2   1    0 spoon.test.modifiers.testclasses.ConcreteClass.ConcreteClass(int)
1676    1   1    0 spoon.test.modifiers.testclasses.ConcreteClass.otherMethod()
1677    2   1    0 spoon.test.modifiers.testclasses.ConcreteClass.anotherOne()
1678    2   1    0 spoon.test.modifiers.testclasses.StaticMethod.maMethod()
1679    2   1    0 spoon.test.modifiers.testclasses.StaticMethod.anotherMethod()
1680    2   1    0 spoon.test.modifiers.testclasses.AbstractClass.method()
1681    2   1    0 spoon.test.modifiers.testclasses.AbstractClass.onlyStatic()
1682    1   1    0 spoon.test.modifiers.testclasses.AbstractClass.otherMethod()
1683    1   1    0 spoon.test.modifiers.testclasses.AbstractClass.anotherOne()
1684   11   2    0 spoon.test.role.TestCtRole.testGetCtRoleByName()
1685    3   2    0 spoon.test.role.TestCtRole.testCtRoleGetSubRolesNotNull()
1686    9   4    0 spoon.test.role.TestCtRole.testCtRoleSubRoleMatchesWithSuperRole()
1687    5   1    0 spoon.test.role.TestCtRole.testCtRoleGetSubRole()
1688    4   2    0 spoon.test.role.TestCtRole.testCtRoleGetSubRoleFailsOnOthers()
1689    4   2    0 spoon.test.role.TestCtRole.testCtRoleGetSubRoleFailsOnNull()
1690    2   2    0 spoon.test.literal.LiteralTest.TypeFilter$1.matches(CtLiteral)
1691   14   1    0 spoon.test.literal.LiteralTest.testCharLiteralInNoClasspath()
1692    5   1    0 spoon.test.literal.LiteralTest.testLiteralInForEachWithNoClasspath()
1693   35   1    0 spoon.test.literal.LiteralTest.testBuildLiternal()
1694   16   1    0 spoon.test.literal.LiteralTest.testFactoryLiternal()
1695   22   1    0 spoon.test.literal.LiteralTest.testEscapedString()
1696   53   1    0 spoon.test.ctType.testclasses.SubtypeModel.foo()
1697    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.ErasureModelA(I,J,D)
1698    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.method(I,J,D)
1699    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.method2(I,J,D)
1700    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.method3(I,J,D,K)
1701    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.wildCardMethod(I,D)
1702    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.list(Object,Object,String)
1703    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.methodWithArray(I[],J)
1704    2   1    0 spoon.test.ctType.testclasses.ErasureModelA.ModelB.ModelB(I,J,D2)
1705    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.ModelB.method(I,J,D2)
1706    2   1    0 spoon.test.ctType.testclasses.ErasureModelA.ModelC.ModelC(Float,IllegalArgumentException,ModelC)
1707    1   1    0 spoon.test.ctType.testclasses.ErasureModelA.ModelC.method(Float,IllegalArgumentException,ModelC)
1708    1   1    0 spoon.test.ctType.testclasses.X.foo()
1709    1   1    0 spoon.test.ctType.testclasses.Z.foo()
1710    2   1    0 spoon.test.ctType.testclasses.O.foo()
1711    2   1    0 spoon.test.ctType.testclasses.P.foo()
1712    1   1    0 spoon.test.ctType.testclasses.K.m(B)
1713    3   1    0 spoon.test.ctType.CtTypeParameterTest.testTypeErasure()
1714   18   8    0 spoon.test.ctType.CtTypeParameterTest.checkType(CtType)
1715    3   1    0 spoon.test.ctType.CtTypeParameterTest.checkTypeParamErasureOfType(CtTypeParameter,Class)
1716   13   2    0 spoon.test.ctType.CtTypeParameterTest.checkTypeParamErasureOfExecutable(CtTypeParameter)
1717   13   2    0 spoon.test.ctType.CtTypeParameterTest.checkParameterErasureOfExecutable(CtParameter)
1718    6   4    0 spoon.test.ctType.CtTypeParameterTest.getMethodByName(Class,String)
1719   11   7    0 spoon.test.ctType.CtTypeParameterTest.getTypeParamIdentification(CtTypeParameter)
1720   22   1    0 spoon.test.ctType.CtTypeParameterTest.testTypeSame()
1721    9   5    1 spoon.test.ctType.CtTypeParameterTest.checkIsSame(CtTypeParameter,CtTypeParameter,boolean)
1722    2   2    0 spoon.test.ctType.CtTypeParameterTest.checkIsSame(CtTypeParameter,CtTypeParameter)
1723    2   2    0 spoon.test.ctType.CtTypeParameterTest.checkIsNotSame(CtTypeParameter,CtTypeParameter)
1724    5   3    0 spoon.test.ctType.CtTypeParameterTest.isSame(CtTypeParameter,CtTypeParameter,boolean,boolean)
1725    1   1    0 spoon.test.method_overriding.testclasses2.ObjectInterface.doSomething()
1726    1   1    0 spoon.test.method_overriding.testclasses2.ObjectInterface.equals(Object)
1727    1   1    0 spoon.test.method_overriding.testclasses.B.B()
1728    2   1    0 spoon.test.method_overriding.testclasses.B.m1(C)
1729    2   1    0 spoon.test.method_overriding.testclasses.B.m2(C)
1730    1   1    0 spoon.test.method_overriding.testclasses.B.m3(C)
1731    2   1    0 spoon.test.method_overriding.testclasses.B.m5(S)
1732    1   1    0 spoon.test.method_overriding.testclasses.B.m4(S)
1733    1   1    0 spoon.test.method_overriding.testclasses.C.C()
1734    2   1    0 spoon.test.method_overriding.testclasses.C.m1(C)
1735    2   1    0 spoon.test.method_overriding.testclasses.C.m2(C)
1736    2   1    0 spoon.test.method_overriding.testclasses.C.m3(C)
1737    1   1    0 spoon.test.method_overriding.testclasses.C.m4(InputStream)
1738    2   1    0 spoon.test.method_overriding.testclasses.C.m5(InputStream)
1739    1   1    0 spoon.test.method_overriding.testclasses.D.D()
1740    2   1    0 spoon.test.method_overriding.testclasses.D.m1(C)
1741    2   1    0 spoon.test.method_overriding.testclasses.D.m2(C)
1742    1   1    0 spoon.test.method_overriding.testclasses.D.m4(Integer)
1743    1   1    0 spoon.test.method_overriding.testclasses.A.A()
1744    2   1    0 spoon.test.method_overriding.testclasses.A.m1(C)
1745    2   1    0 spoon.test.method_overriding.testclasses.A.m2(C)
1746    1   1    0 spoon.test.method_overriding.testclasses.A.m3(C)
1747    1   1    0 spoon.test.method_overriding.testclasses.A.m4(U)
1748    1   1    0 spoon.test.method_overriding.testclasses.A.m5(U)
1749   11   1    0 spoon.test.signature.SignatureTest.testNullSignature()
1750   16   2    0 spoon.test.signature.SignatureTest.testNullSignatureInUnboundVariable()
1751    8   1    0 spoon.test.signature.SignatureTest.testLiteralSignature()
1752   20   1    0 spoon.test.signature.SignatureTest.testMethodInvocationSignatureStaticFieldsVariables()
1753   27   1    0 spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess()
1754   17   2    0 spoon.test.signature.SignatureTest.testUnboundFieldSignature()
1755    2   2    0 spoon.test.signature.SignatureTest.ReferenceTypeFilter$1.matches(CtExecutableReference)
1756   13   2    0 spoon.test.signature.SignatureTest.testArgumentNotNullForExecutableReference()
1757   14   1    0 spoon.test.signature.SignatureTest.testBugSignature()
1758   10   1    0 spoon.test.delete.DeleteTest.testDeleteAStatementInAnonymousExecutable()
1759   10   1    0 spoon.test.delete.DeleteTest.testDeleteAStatementInStaticAnonymousExecutable()
1760    9   1    0 spoon.test.delete.DeleteTest.testDeleteAStatementInConstructor()
1761    9   1    0 spoon.test.delete.DeleteTest.testDeleteAStatementInMethod()
1762    9   1    0 spoon.test.delete.DeleteTest.testDeleteReturn()
1763   10   1    0 spoon.test.delete.DeleteTest.testDeleteStatementInCase()
1764   10   1    0 spoon.test.delete.DeleteTest.testDeleteACaseOfASwitch()
1765    8   1    0 spoon.test.delete.DeleteTest.testDeleteMethod()
1766    9   1    0 spoon.test.delete.DeleteTest.testDeleteParameterOfMethod()
1767    7   1    0 spoon.test.delete.DeleteTest.testDeleteBodyOfAMethod()
1768    8   1    0 spoon.test.delete.DeleteTest.testDeleteAnnotationOnAClass()
1769    8   1    0 spoon.test.delete.DeleteTest.testDeleteAClassTopLevel()
1770    8   1    0 spoon.test.delete.DeleteTest.testDeleteConditionInACondition()
1771    8   1    0 spoon.test.delete.DeleteTest.testDeleteChainOfAssignment()
1772    3   1    0 spoon.test.delete.testclasses.Adobada.Adobada()
1773    3   1    0 spoon.test.delete.testclasses.Adobada.m()
1774    3   1    0 spoon.test.delete.testclasses.Adobada.Adobada$1.m()
1775    5   1    0 spoon.test.delete.testclasses.Adobada.m2()
1776    8   2    0 spoon.test.delete.testclasses.Adobada.m3()
1777    5   2    0 spoon.test.delete.testclasses.Adobada.m4(int,float,String)
1778    2   1    0 spoon.test.delete.testclasses.Adobada.methodUsingjlObjectMethods()
1779    6   1    0 spoon.test.visibility.VisibilityTest.testMethodeWithNonAccessibleTypeArgument()
1780   17   1    0 spoon.test.visibility.VisibilityTest.testVisibilityOfClassesNamedByClassesInJavaLangPackage()
1781   33   1    0 spoon.test.visibility.VisibilityTest.testFullyQualifiedNameOfTypeReferenceWithGeneric()
1782    2   1    0 spoon.test.visibility.VisibilityTest.AbstractReferenceFilter$1.matches(CtFieldReference)
1783   12   1    0 spoon.test.visibility.VisibilityTest.testName()
1784    2   2    0 spoon.test.visibility.VisibilityTest.TypeFilter$1.matches(CtInvocation)
1785   14   1    0 spoon.test.visibility.VisibilityTest.testInvocationVisibilityInFieldDeclaration()
1786    1   1    0 spoon.test.visibility.packageprotected.AccessibleClassFromNonAccessibleInterf.method(NonAccessibleInterf)
1787    3   1    0 spoon.test.visibility.testclasses.UseDouble.UseDouble(Double,Float)
1788    7   1    0 spoon.test.visibility.testclasses.UseDouble.aMethod()
1789    2   1    0 spoon.test.visibility.testclasses.MethodeWithNonAccessibleTypeArgument.method()
1790    2   1    0 spoon.test.visibility.testclasses.internal.Double.toHexString(double)
1791    2   1    0 spoon.test.visibility.testclasses.internal.Double.aMethodNotInJavaLangDoubleClass(String,String)
1792    1   1    0 spoon.test.visibility.testclasses.internal.Double.aMethodNotStatic()
1793    2   1    0 spoon.test.visibility.testclasses.Float.sum(float,float)
1794    2   1    0 spoon.test.visibility.testclasses.Float.aMethodNotInJavaLangFloatClass(String,String)
1795    1   1    0 spoon.test.visibility.testclasses.Float.aMethodNotStatic()
1796    2   1    0 spoon.test.visibility.testclasses.Burritos.foo()
1797    2   1    0 spoon.test.visibility.testclasses.A2.B.m(Object)
1798    2   1    0 spoon.test.visibility.testclasses.A2.instanceOf(Object)
1799    2   1    0 spoon.test.visibility.testclasses.A2.returnType()
1800    2   1    0 spoon.test.visibility.testclasses.A2.returnType2(String)
1801    3   1    0 spoon.test.visibility.testclasses.A2.aMethod()
1802    2   1    0 spoon.test.visibility.testclasses.A.B.m(Object)
1803    2   1    0 spoon.test.visibility.testclasses.A.instanceOf(Object)
1804    2   1    0 spoon.test.visibility.testclasses.A.returnType()
1805    3   1    0 spoon.test.visibility.testclasses.A.aMethod()
1806   24   1    0 spoon.test.variable.InferredVariableTest.testInferredVariableAreMarked()
1807   14   1    0 spoon.test.variable.InferredVariableTest.testInferredVariableArePrintedWithVar()
1808    2   1    0 spoon.test.variable.testclasses.BurritosFielded.foo()
1809    2   1    0 spoon.test.variable.testclasses.digest.DigestUtil.getDigest(String)
1810    2   1    0 spoon.test.variable.testclasses.digest.DigestUtil.getMd2Digest()
1811    2   1    0 spoon.test.variable.testclasses.digest.DigestUtil.getMd5Digest()
1812    2   1    0 spoon.test.variable.testclasses.digest.DigestUtil.digest(java.security.MessageDigest,java.security.MessageDigest[])
1813    3   1    0 spoon.test.variable.testclasses.digest.DigestUtil.digest(java.security.MessageDigest,java.nio.ByteBuffer)
1814    6   2    0 spoon.test.variable.testclasses.digest.DigestUtil.updateDigest(MessageDigest,InputStream)
1815    1   1    0 spoon.test.variable.testclasses.MultiBurritos.toto()
1816    4   1    0 spoon.test.variable.testclasses.MultiBurritos.bar()
1817    4   1    0 spoon.test.variable.testclasses.MultiBurritos.Runnable$1.run()
1818    6   1    0 spoon.test.variable.testclasses.MultiBurritos.bidule()
1819    3   2    0 spoon.test.variable.testclasses.BurritosWithTryCatch.foo()
1820    3   1    0 spoon.test.variable.testclasses.ArrayAccessSample.method(String[])
1821    3   1    0 spoon.test.variable.testclasses.StackedAssignmentSample.method()
1822    4   1    0 spoon.test.variable.testclasses.RHSSample.method()
1823    4   1    0 spoon.test.variable.testclasses.Tacos.makeIt()
1824    3   1    0 spoon.test.variable.testclasses.Burritos.foo()
1825    1   1    0 spoon.test.variable.testclasses.ForStaticVariables.foo()
1826    2   1    0 spoon.test.variable.testclasses.ForStaticVariables.bla()
1827    5   1    0 spoon.test.variable.testclasses.FieldAccessSample.method()
1828    5   1    0 spoon.test.variable.testclasses.VariableAccessSample.method()
1829    1   1    0 spoon.test.variable.testclasses.BurritosStaticMethod.toto()
1830    2   1    0 spoon.test.variable.testclasses.BurritosStaticMethod.Runnable$1.run()
1831    5   1    0 spoon.test.variable.testclasses.BurritosStaticMethod.foo()
1832    3   2    0 spoon.test.variable.testclasses.BurritosWithLoop.foo()
1833    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtVariableRead)
1834    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtVariableWrite)
1835    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtVariableAccess)
1836   14   1    0 spoon.test.variable.AccessTest.testCanVisitVariableAccessAndSubClasses()
1837    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtFieldRead)
1838    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtFieldWrite)
1839    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtFieldAccess)
1840   14   1    0 spoon.test.variable.AccessTest.testCanVisitFieldAccessAndSubClasses()
1841    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtArrayRead)
1842    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtArrayWrite)
1843    2   1    0 spoon.test.variable.AccessTest.AbstractFilter$1.matches(CtExpression)
1844   14   1    0 spoon.test.variable.AccessTest.testCanVisitArrayAccessAndSubClasses()
1845    4   1    0 spoon.test.variable.AccessTest.testStackedAssignments()
1846    3   1    0 spoon.test.variable.AccessTest.testRHS()
1847    4   1    0 spoon.test.variable.AccessTest.testFieldWriteDeclaredInTheSuperclass()
1848   12   2    0 spoon.test.variable.AccessTest.testVariableAccessInNoClasspath()
1849    6   1    0 spoon.test.variable.AccessTest.testAccessToStringOnPostIncrement()
1850    3   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testCheckAssignmentContracts()
1851   11   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.buildResourceAndReturnResult(String,String)
1852    7   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByField()
1853   10   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByLocalVariable()
1854    6   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable()
1855    7   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInTryCatch()
1856    7   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInLoop()
1857   22   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testStaticImportWithAutoImport()
1858    7   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNAndStaticImport()
1859    6   1    0 spoon.test.variable.AccessFullyQualifiedFieldTest.testPrivateStaticImportShouldNotBeImportedInSameClass()
1860   21   4    0 spoon.test.processing.ProcessingTest.testInsertBegin()
1861   21   4    0 spoon.test.processing.ProcessingTest.testInsertEnd()
1862    4   2    0 spoon.test.processing.ProcessingTest.testProcessorNotFoundThrowAnException()
1863    1   1    0 spoon.test.processing.ProcessingTest.WrongProcessor.WrongProcessor(int)
1864    2   1    0 spoon.test.processing.ProcessingTest.WrongProcessor.process(CtElement)
1865   10   2    0 spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor()
1866    1   1    0 spoon.test.processing.ProcessingTest.AProcessor.process()
1867   34   1    0 spoon.test.processing.ProcessingTest.testInitProperties()
1868    1   1    0 spoon.test.processing.ProcessingTest.AProcessor.process()
1869   20   2    0 spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType()
1870    1   1    0 spoon.test.processing.ProcessingTest.AProcessor.process()
1871   32   1    0 spoon.test.processing.ProcessingTest.testInitPropertiesWithStringType()
1872    9   2    0 spoon.test.processing.ProcessingTest.testProcessorWithGenericType()
1873   28   6    0 spoon.test.processing.ProcessingTest.testCallProcessorWithMultipleTypes()
1874   17   1    0 spoon.test.processing.ProcessingTest.testProcessDontMessWithImports()
1875    4   3    0 spoon.test.processing.processors.ArrayResizeProcessor.process(CtField)
1876    3   1    0 spoon.test.processing.processors.TestProcessor.init()
1877   13   9    0 spoon.test.processing.processors.TestProcessor.process(CtElement)
1878    3   1    0 spoon.test.processing.processors.RenameProcessor.RenameProcessor(String,String)
1879    9   5    0 spoon.test.processing.processors.RenameProcessor.isToBeProcessed(CtElement)
1880    8   3    0 spoon.test.processing.processors.RenameProcessor.process(CtElement)
1881    2   1    0 spoon.test.processing.processors.CtClassProcessor.CtClassProcessor()
1882    3   1    0 spoon.test.processing.processors.MyProcessor.process(CtElement)
1883    2   1    0 spoon.test.processing.processors.MyProcessor.isShouldStayAtFalse()
1884    2   1    0 spoon.test.processing.processors.GenericCtTypeProcessor.GenericCtTypeProcessor(T)
1885    2   1    0 spoon.test.processing.processors.GenericCtTypeProcessor.process(T)
1886    2   1    0 spoon.test.processing.processors.CtTypeProcessor.CtTypeProcessor()
1887    2   1    0 spoon.test.processing.processors.CtInterfaceProcessor.CtInterfaceProcessor()
1888    2   1    0 spoon.test.processing.testclasses.SampleForInsertBefore.SampleForInsertBefore()
1889   12   1    0 spoon.test.processing.testclasses.SampleForInsertBefore.SampleForInsertBefore(int)
1890    3   1    0 spoon.test.processing.testclasses.SampleForInsertBefore.SampleForInsertBefore(int,int)
1891    1   1    0 spoon.test.processing.testclasses.SampleForInsertBefore.method()
1892    2   1    0 spoon.test.processing.testclasses.SampleForInsertBefore.method2()
1893    2   1    0 spoon.test.processing.testclasses.SampleForInsertBefore.method3()
1894    7   3    0 spoon.test.comment.testclasses.CommentsOnStatements.m1()
1895    1   1    0 spoon.test.comment.testclasses.BlockComment.BlockComment()
1896    1   1    0 spoon.test.comment.testclasses.BlockComment.m()
1897   18   7    0 spoon.test.comment.testclasses.BlockComment.m1()
1898    1   1    0 spoon.test.comment.testclasses.BlockComment.m2(int)
1899    7   3    0 spoon.test.comment.testclasses.BlockComment.m3()
1900    2   1    0 spoon.test.comment.testclasses.Comment2.code_3()
1901    1   1    1 spoon.test.comment.testclasses.TestClassWithComments.testInterface.mytest(short,short)
1902    1   1    0 spoon.test.comment.testclasses.TestClassWithComments.myInterface.mytest(short,short)
1903    3   3    0 spoon.test.comment.testclasses.EmptyStatementComments.m1()
1904    1   1    1 spoon.test.comment.testclasses.JavaDocComment.m()
1905    2   1    1 spoon.test.comment.testclasses.JavaDocComment.m(int)
1906    1   1    1 spoon.test.comment.testclasses.JavaDocEmptyCommentAndTags.m()
1907    1   1    0 spoon.test.comment.testclasses.InlineComment.InlineComment()
1908    1   1    0 spoon.test.comment.testclasses.InlineComment.m()
1909   22   9    0 spoon.test.comment.testclasses.InlineComment.m1()
1910    1   1    0 spoon.test.comment.testclasses.InlineComment.m2(int)
1911    7   3    0 spoon.test.comment.testclasses.InlineComment.m3()
1912    4   2    0 spoon.test.comment.testclasses.WithIfBlock.myMethod()
1913    2   2    0 spoon.test.comment.testclasses.Comment1.code_1()
1914    4   1    0 spoon.test.casts.CastTest.testCast1()
1915    4   1    0 spoon.test.casts.CastTest.testCast2()
1916    6   1    0 spoon.test.casts.CastTest.testCast3()
1917    2   2    0 spoon.test.casts.CastTest.TypeFilter$1.matches(CtInvocation)
1918    9   1    0 spoon.test.casts.CastTest.testCase4()
1919    5   1    0 spoon.test.casts.CastTest.testTypeAnnotationOnCast()
1920    1   1    0 spoon.test.position.testclasses.FooAbstractMethod.m(int)
1921    1   1    0 spoon.test.position.testclasses.SomeEnum.m()
1922    1   1    0 spoon.test.position.testclasses.SomeEnum.m()
1923   13   2    0 spoon.test.position.testclasses.FooLabel.m(boolean)
1924    7   3    0 spoon.test.position.testclasses.FooLabel.m2(boolean)
1925    3   1    0 spoon.test.position.testclasses.FooLabel.m3()
1926    4   1    0 spoon.test.position.testclasses.FooLabel.m4()
1927    8   3    0 spoon.test.position.testclasses.FooLabel.m5()
1928    6   3    0 spoon.test.position.testclasses.FooLabel.m6(boolean)
1929    2   1    0 spoon.test.position.testclasses.PositionParameterTypeWithReference.m1(Object)
1930    2   2    0 spoon.test.position.testclasses.PositionParameterTypeWithReference.m2(Object)
1931    1   1    0 spoon.test.position.testclasses.PositionParameterTypeWithReference.m3(U)
1932   14   7    0 spoon.test.position.testclasses.FooSwitch.m1(ENUM)
1933   13   6    0 spoon.test.position.testclasses.FooStatement.m(int)
1934    2   1    0 spoon.test.position.testclasses.FooStatement.m2(int)
1935    5   4    0 spoon.test.position.testclasses.FooForEach.m(String)
1936    1   1    0 spoon.test.position.testclasses.AnnonymousClassNewIface.Consumer$1.accept(Set)
1937    3   1    0 spoon.test.position.testclasses.AnnonymousClassNewIface.m()
1938    2   1    0 spoon.test.position.testclasses.FooGeneric.m(int)
1939    2   1    1 spoon.test.position.testclasses.FooGeneric.mWithDoc(int)
1940    2   1    0 spoon.test.position.testclasses.FooGeneric.mWithLine(int)
1941    1   1    0 spoon.test.position.testclasses.FooGeneric.FooGeneric(int)
1942    4   2    0 spoon.test.position.testclasses.FooSourceFragments.m1(int)
1943    4   2    0 spoon.test.position.testclasses.FooSourceFragments.m2(int)
1944    2   1    1 spoon.test.position.testclasses.FooSourceFragments.m3(U,int)
1945    3   2    0 spoon.test.position.testclasses.FooSourceFragments.m4()
1946    2   1    0 spoon.test.position.testclasses.FooSourceFragments.m5(double)
1947    1   1    0 spoon.test.position.testclasses.TypeParameter.m()
1948    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m1(String[])
1949    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m2(String[])
1950    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m3(String[])
1951    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m4(String[])
1952    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m5(String[][][][])
1953    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m6(String[][])
1954    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m7(String)
1955    1   1    0 spoon.test.position.testclasses.ArrayArgParameter.m8(String[])
1956    5   3    0 spoon.test.position.testclasses.ImplicitBlock.method()
1957    1   1    0 spoon.test.position.testclasses.NoMethodModifiers.m()
1958    2   1    0 spoon.test.position.testclasses.FooField.m()
1959    1   1    0 spoon.test.position.testclasses.FooEnum.FooEnum(int)
1960    9   1    0 spoon.test.position.testclasses.Expressions.method()
1961    2   2    0 spoon.test.position.testclasses.PositionTry.withoutModifier()
1962    2   2    0 spoon.test.position.testclasses.PositionTry.withModifier()
1963    2   2    0 spoon.test.position.testclasses.PositionTry.multipleCatch()
1964    9   8    0 spoon.test.position.testclasses.CatchPosition.method()
1965    2   1    0 spoon.test.position.testclasses.FooMethod.m(int)
1966    2   1    1 spoon.test.position.testclasses.FooMethod.mWithDoc(int)
1967    2   1    0 spoon.test.position.testclasses.FooMethod.mWithLine(int)
1968    1   1    0 spoon.test.position.testclasses.FooMethod.FooMethod(int)
1969    1   1    0 spoon.test.position.testclasses.FooMethod.emptyMethod()
1970    2   1    0 spoon.test.path.testclasses.Foo.Foo()
1971    2   1    0 spoon.test.path.testclasses.Foo.Foo(String)
1972    7   2    0 spoon.test.path.testclasses.Foo.foo()
1973    5   2    0 spoon.test.path.testclasses.Foo.bar(int,int)
1974    1   1    0 spoon.test.path.testclasses.Foo.bar(int)
1975    1   1    0 spoon.test.path.testclasses.Foo.processors(String,String)
1976    1   1    0 spoon.test.path.testclasses.Foo.processors(String)
1977    3   1    0 spoon.test.path.testclasses.Foo.methodWithArgs(String[])
1978   10   1    0 spoon.test.trycatch.TryCatchTest.testModelBuildingInitializer()
1979    5   1    0 spoon.test.trycatch.TryCatchTest.testFullyQualifiedException()
1980    7   1    0 spoon.test.trycatch.TryCatchTest.testCatchOrder()
1981   11   1    0 spoon.test.trycatch.TryCatchTest.testExceptionJava7()
1982    9   2    0 spoon.test.trycatch.TryCatchTest.testRethrowingExceptionsJava7()
1983    5   1    0 spoon.test.trycatch.TryCatchTest.testTryWithOneResource()
1984    5   1    0 spoon.test.trycatch.TryCatchTest.testTryWithResources()
1985    2   1    0 spoon.test.trycatch.TryCatchTest.AbstractFilter$1.matches(CtCatch)
1986   12   1    0 spoon.test.trycatch.TryCatchTest.testMultiTryCatchWithCustomExceptions()
1987    8   2    0 spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions()
1988   23   1    0 spoon.test.trycatch.TryCatchTest.testTryCatchVariableGetType()
1989   23   1    0 spoon.test.trycatch.TryCatchTest.testCatchWithExplicitFinalVariable()
1990   10   1    0 spoon.test.trycatch.TryCatchTest.testCatchWithUnknownExceptions()
1991    7   6    0 spoon.test.trycatch.testclasses.RethrowingClass.rethrowException(String)
1992    1   1    1 spoon.test.trycatch.testclasses.Statement.evaluate()
1993    2   1    0 spoon.test.trycatch.testclasses.TryCatchResourceClass.readFirstLineFromFile(String)
1994    7   2    0 spoon.test.trycatch.testclasses.TryCatchResourceClass.writeToFileZipFileContents(String,String)
1995    2   2    0 spoon.test.trycatch.testclasses.Bar.Statement$1.evaluate()
1996    7   3    0 spoon.test.trycatch.testclasses.Bar.foobar(Statement)
1997    2   2    0 spoon.test.trycatch.testclasses.Foo.m()
1998    7   3    0 spoon.test.trycatch.testclasses.Main.test()
1999    2   1    0 spoon.test.serializable.SourcePositionTest.loadFactory(File)
2000    5   1    0 spoon.test.serializable.SourcePositionTest.saveFactory(Factory,File)
2001   16   1    0 spoon.test.serializable.SourcePositionTest.testSourcePosition()
2002   17   1    0 spoon.test.serializable.SerializableTest.testSerialCtStatement()
2003    4   1    0 spoon.test.serializable.SerializableTest.testSerialFile()
2004   11   2    0 spoon.test.serializable.SerializableTest.testSerializationModelStreamer()
2005    2   1    0 spoon.test.constructorcallnewclass.NewClassTest.AbstractFilter$1.matches(CtNewClass)
2006    6   1    0 spoon.test.constructorcallnewclass.NewClassTest.setUp()
2007    7   1    0 spoon.test.constructorcallnewclass.NewClassTest.testNewClassWithObjectClass()
2008    7   1    0 spoon.test.constructorcallnewclass.NewClassTest.testNewClassWithInterface()
2009    9   1    0 spoon.test.constructorcallnewclass.NewClassTest.testNewClassWithInterfaceGeneric()
2010    7   1    0 spoon.test.constructorcallnewclass.NewClassTest.testNewClassInterfaceWithParameters()
2011   12   2    0 spoon.test.constructorcallnewclass.NewClassTest.testNewClassInEnumeration()
2012    3   1    0 spoon.test.constructorcallnewclass.NewClassTest.assertSuperClass(Class,CtClass)
2013    3   1    0 spoon.test.constructorcallnewclass.NewClassTest.assertSuperInterface(Class,CtClass)
2014    2   1    0 spoon.test.constructorcallnewclass.NewClassTest.assertIsAnonymous(CtClass)
2015    5   2    0 spoon.test.constructorcallnewclass.NewClassTest.assertHasParameters(int,CtExpression)
2016    2   1    0 spoon.test.constructorcallnewclass.NewClassTest.assertIsConstructor(CtExecutableReference)
2017    2   1    0 spoon.test.constructorcallnewclass.NewClassTest.assertType(Class,CtNewClass)
2018    2   1    0 spoon.test.constructorcallnewclass.NewClassTest.AbstractFilter$1.matches(CtNewClass)
2019    9   1    0 spoon.test.constructorcallnewclass.NewClassTest.testMoreThan9NewClass()
2020   21   1    0 spoon.test.constructorcallnewclass.NewClassTest.testCtNewClassInNoClasspath()
2021    2   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.AbstractFilter$1.matches(CtConstructorCall)
2022   15   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.setUp()
2023    5   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallStringWithoutParameters()
2024    5   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallStringWithParameters()
2025    5   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallObjectWithoutParameters()
2026    5   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallObjectWithParameters()
2027   11   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallWithGenericArray()
2028    5   2    0 spoon.test.constructorcallnewclass.ConstructorCallTest.assertHasParameters(int,CtConstructorCall)
2029    2   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.assertIsConstructor(CtConstructorCall)
2030    2   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.assertConstructorCallWithType(Class,CtConstructorCall)
2031    7   1    0 spoon.test.constructorcallnewclass.ConstructorCallTest.testCoreConstructorCall()
2032    2   1    0 spoon.test.constructorcallnewclass.testclasses.Panini.m()
2033    2   1    0 spoon.test.constructorcallnewclass.testclasses.Bar.matchResult(int)
2034    2   1    0 spoon.test.constructorcallnewclass.testclasses.Bar.Bar(String)
2035    1   1    0 spoon.test.constructorcallnewclass.testclasses.Bar.matchResult(int)
2036    1   1    0 spoon.test.constructorcallnewclass.testclasses.Foo.Foo()
2037    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo.Foo(int)
2038    5   1    0 spoon.test.constructorcallnewclass.testclasses.Foo.m()
2039    5   1    0 spoon.test.constructorcallnewclass.testclasses.Foo.m2()
2040    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl.BarImpl(int)
2041    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2042    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2043    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2044    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2045    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2046    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2047    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2048    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2049    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2050    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2051    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2052    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.AbstractClass$1.getValue(double[])
2053    4   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass$1.getValue(double[])
2054   39   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.exec()
2055    2   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass.AbstractClass(int)
2056    1   1    0 spoon.test.constructorcallnewclass.testclasses.Foo2.AbstractClass.getValue(double[])
2057    6   1    0 spoon.test.prettyprinter.LinesTest.setup()
2058    9   3    0 spoon.test.prettyprinter.LinesTest.testPrettyPrinterWithLines()
2059   28   5    0 spoon.test.prettyprinter.LinesTest.testIdenticalPrettyPrinter()
2060    7   1    0 spoon.test.prettyprinter.LinesTest.testCompileWhenUsingLinesArgument()
2061    6   1    0 spoon.test.prettyprinter.QualifiedThisRefTest.setup()
2062    7   1    0 spoon.test.prettyprinter.QualifiedThisRefTest.testQualifiedThisRef()
2063   10   1    0 spoon.test.prettyprinter.QualifiedThisRefTest.testCloneThisAccess()
2064   29   1    0 spoon.test.prettyprinter.QualifiedThisRefTest.testPrintCtFieldAccessWorkEvenWhenParentNotInitialized()
2065    2   1    0 spoon.test.prettyprinter.testclasses.QualifiedThisRef.Sub.foo()
2066    2   1    0 spoon.test.prettyprinter.testclasses.QualifiedThisRef.Sub.foo2()
2067    2   1    0 spoon.test.prettyprinter.testclasses.QualifiedThisRef.bla()
2068    3   1    0 spoon.test.prettyprinter.testclasses.ImportStatic.main(String[])
2069    2   1    0 spoon.test.prettyprinter.testclasses.Validation.PrivilegedAction$1.run()
2070    1   1    0 spoon.test.prettyprinter.testclasses.Validation.Validation()
2071   22  15    1 spoon.test.prettyprinter.testclasses.Validation.isIdentifier(String)
2072    8   3    0 spoon.test.prettyprinter.testclasses.FooCasper.bug1()
2073    2   1    0 spoon.test.prettyprinter.testclasses.FooCasper.foo()
2074    2   1    0 spoon.test.prettyprinter.testclasses.FooCasper.foo2()
2075    2   1    0 spoon.test.prettyprinter.testclasses.FooCasper.foo3()
2076    1   1    0 spoon.test.prettyprinter.testclasses.FooCasper.bar()
2077    2   1    0 spoon.test.prettyprinter.testclasses.FooCasper.foo5(FooCasper)
2078    2   1    0 spoon.test.prettyprinter.testclasses.FooCasper.bug2()
2079    5   2    0 spoon.test.prettyprinter.testclasses.FooCasper.bug3()
2080    5   2    0 spoon.test.prettyprinter.testclasses.FooCasper.bug4()
2081    1   1    0 spoon.test.prettyprinter.testclasses.FooCasper.FooCasper(int)
2082    1   1    0 spoon.test.prettyprinter.testclasses.FooCasper.FooCasper()
2083    3   1    0 spoon.test.prettyprinter.testclasses.FooCasper.toString_support()
2084    6   1    0 spoon.test.prettyprinter.testclasses.FooCasper.array_support()
2085    3   1    0 spoon.test.prettyprinter.testclasses.FooCasper.literal()
2086    4   1    0 spoon.test.prettyprinter.testclasses.FooCasper.literal2()
2087    2   1    0 spoon.test.prettyprinter.testclasses.ArrayRealVector.ArrayRealVector(ArrayRealVector)
2088    1   1    0 spoon.test.prettyprinter.testclasses.ArrayRealVector.ArrayRealVector(ArrayRealVector,boolean)
2089    2   1    0 spoon.test.prettyprinter.testclasses.AClass.aMethod()
2090    2   1    0 spoon.test.prettyprinter.testclasses.AClass.aMethodWithGeneric()
2091   10   8    0 spoon.test.prettyprinter.testclasses.Rule.Phoneme.Comparator$1.compare(Phoneme,Phoneme)
2092    3   1    0 spoon.test.prettyprinter.testclasses.Rule.Phoneme.Phoneme(CharSequence,Language)
2093    2   1    0 spoon.test.prettyprinter.testclasses.Rule.Phoneme.getPhonemes()
2094    1   1    0 spoon.test.prettyprinter.testclasses.Rule.PhonemeExpr.getPhonemes()
2095    2   1    0 spoon.test.prettyprinter.testclasses.Rule.PhonemeList.PhonemeList(Phoneme)
2096    2   1    0 spoon.test.prettyprinter.testclasses.Rule.PhonemeList.getPhonemes()
2097   10   5    0 spoon.test.prettyprinter.testclasses.Rule.parsePhoneme(String)
2098    2   1    0 spoon.test.prettyprinter.testclasses.MissingVariableDeclaration.failingMethod()
2099    3   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.ENUM.ENUM(int,Enum)
2100    2   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.setFieldUsingExternallyDefinedEnumWithSameNameAsLocal()
2101    2   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.setFieldUsingLocallyDefinedEnum()
2102    2   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.setFieldOfClassWithSameNameAsTheCompilationUnitClass()
2103    3   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.referToTwoInnerClassesWithTheSameName()
2104    2   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.Class0.ClassA.getNum()
2105    2   1    0 spoon.test.prettyprinter.testclasses.TypeIdentifierCollision.Class1.ClassA.getNum()
2106    1   1    0 spoon.test.invocations.testclasses.Bar.staticMethod()
2107    3   1    0 spoon.test.invocations.testclasses.Foo.Foo()
2108    3   1    0 spoon.test.reflect.visitor.testclasses.ReferenceQueryTestEnum.ReferenceQueryTestEnum(Number)
2109    2   1    0 spoon.test.reflect.visitor.testclasses.ReferenceQueryTestEnum.getNumber()
2110    6   2    0 spoon.test.reflect.visitor.ReferenceQueryTest.getAllTypeReferencesInEnum()
2111   20   1    0 spoon.test.enums.EnumsTypeTest.testEnumsType()
2112   21   1    0 spoon.test.enums.EnumsTypeTest.testEnumsFromInterface()
2113    3   2    0 spoon.test.enums.testclasses.Regular.main(String[])
2114    1   1    0 spoon.test.enums.testclasses.Burritos.m()
2115    2   1    0 spoon.test.enums.testclasses.EnumWithMembers.f()
2116    1   1    0 spoon.test.enums.testclasses.Performable.perform(Integer,Integer[])
2117   12   1    0 spoon.test.template.TemplateReplaceReturnTest.testReturnReplaceTemplate()
2118   12   1    0 spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate()
2119   11   1    0 spoon.test.template.TemplateEnumAccessTest.testEnumAccessTest()
2120    8   1    0 spoon.test.template.TemplateArrayAccessTest.testArrayAccess()
2121    8   1    0 spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess()
2122    3   1    0 spoon.test.template.testclasses.InvocationSubstitutionByExpressionTemplate.block()
2123    2   1    0 spoon.test.template.testclasses.InvocationSubstitutionByExpressionTemplate.InvocationSubstitutionByExpressionTemplate(String)
2124    2   1    0 spoon.test.template.testclasses.InvocationSubstitutionByExpressionTemplate._expression_()
2125    2   1    0 spoon.test.template.testclasses.FieldAccessOfInnerClassTemplate.Inner.m()
2126    2   1    0 spoon.test.template.testclasses.FieldAccessOfInnerClassTemplate.FieldAccessOfInnerClassTemplate(String)
2127    2   1    0 spoon.test.template.testclasses.SubstituteLiteralTemplate.m1()
2128    2   1    0 spoon.test.template.testclasses.SubstituteLiteralTemplate.SubstituteLiteralTemplate(Object)
2129    2   1    0 spoon.test.template.testclasses.Params.$param1$()
2130    3   3    0 spoon.test.template.testclasses.bounds.CheckBound.foo()
2131    3   3    0 spoon.test.template.testclasses.bounds.CheckBound.foo2()
2132    3   3    0 spoon.test.template.testclasses.bounds.CheckBound.fbar()
2133    2   2    0 spoon.test.template.testclasses.bounds.CheckBound.baz()
2134    3   2    0 spoon.test.template.testclasses.bounds.CheckBound.bou()
2135    4   2    0 spoon.test.template.testclasses.bounds.CheckBound.bov()
2136    3   2    0 spoon.test.template.testclasses.bounds.CheckBound.bos()
2137    3   3    0 spoon.test.template.testclasses.bounds.CheckBoundTemplate.statement()
2138    4   1    1 spoon.test.template.testclasses.bounds.CheckBoundTemplate.setVariable(CtVariable)
2139    1   1    0 spoon.test.template.testclasses.bounds.FooBound.method(Collection)
2140    3   3    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher1()
2141    3   2    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher2()
2142    3   3    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher3()
2143    3   3    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher4()
2144    3   2    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher5()
2145    3   2    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher6()
2146    3   2    0 spoon.test.template.testclasses.bounds.CheckBoundMatcher.matcher7()
2147    5   1    0 spoon.test.template.testclasses.LoggerModel.block()
2148    2   1    0 spoon.test.template.testclasses.InnerClassTemplate.Inner.Inner()
2149    3   1    0 spoon.test.template.testclasses.NtonCodeTemplate.NtonCodeTemplate(CtTypeReference,int)
2150    4   3    0 spoon.test.template.testclasses.NtonCodeTemplate.initializer()
2151    2   1    0 spoon.test.template.testclasses.NtonCodeTemplate.getInstanceCount()
2152    4   3    0 spoon.test.template.testclasses.NtonCodeTemplate.getInstance(int)
2153    2   1    0 spoon.test.template.testclasses.NtonCodeTemplate.getMaxInstanceCount()
2154    9   4    0 spoon.test.template.testclasses.NtonCodeTemplate.apply(CtType)
2155    1   1    0 spoon.test.template.testclasses.NtonCodeTemplate.Test._name_()
2156    1   1    0 spoon.test.template.testclasses.types.AnIfaceModel.someMethod()
2157    1   1    0 spoon.test.template.testclasses.types.AClassModel.AClassModel()
2158    2   2    0 spoon.test.template.testclasses.types.AClassModel.get(int)
2159    2   1    0 spoon.test.template.testclasses.types.AClassModel.size()
2160    1   1    0 spoon.test.template.testclasses.types.AClassModel.someMethod()
2161    2   1    0 spoon.test.template.testclasses.logger.Logger.enter(String,String)
2162    2   1    0 spoon.test.template.testclasses.logger.Logger.exit(String)
2163    2   2    0 spoon.test.template.testclasses.logger.LoggerTemplateProcessor.isToBeProcessed(T)
2164    2   1    0 spoon.test.template.testclasses.logger.LoggerTemplateProcessor.isSubOfTemplate(T)
2165    3   1    0 spoon.test.template.testclasses.logger.LoggerTemplateProcessor.process(T)
2166    4   1    0 spoon.test.template.testclasses.logger.LoggerTemplate.LoggerTemplate(String,String,CtBlock)
2167    5   1    0 spoon.test.template.testclasses.logger.LoggerTemplate.block()
2168   16   2    0 spoon.test.template.testclasses.C.main(String[])
2169    2   1    0 spoon.test.template.testclasses.match.MatchWithParameterCondition.matcher1(String)
2170    5   1    0 spoon.test.template.testclasses.match.MatchWithParameterCondition.testMatch1()
2171    3   2    0 spoon.test.template.testclasses.match.MatchForEach.matcher1(String)
2172    5   1    0 spoon.test.template.testclasses.match.MatchForEach.testMatch1()
2173    1   1    0 spoon.test.template.testclasses.match.MatchMap.matcher1()
2174    1   1    0 spoon.test.template.testclasses.match.MatchMap.m1()
2175    1   1    0 spoon.test.template.testclasses.match.MatchMap.m2()
2176    1   1    0 spoon.test.template.testclasses.match.MatchMap.notATestAnnotation()
2177    1   1    0 spoon.test.template.testclasses.match.MatchMap.deprecatedTestAnnotation1()
2178    1   1    0 spoon.test.template.testclasses.match.MatchMap.deprecatedTestAnnotation2()
2179    2   1    0 spoon.test.template.testclasses.match.MatchWithParameterType.matcher1(String)
2180    5   1    0 spoon.test.template.testclasses.match.MatchWithParameterType.testMatch1()
2181    5   2    0 spoon.test.template.testclasses.match.MatchIfElse.matcher1(boolean,boolean)
2182   10   1    0 spoon.test.template.testclasses.match.MatchIfElse.testMatch1()
2183    5   2    0 spoon.test.template.testclasses.match.GenerateIfElse.generator(boolean)
2184    5   2    0 spoon.test.template.testclasses.match.MatchMultiple2.matcher1(String)
2185    7   1    0 spoon.test.template.testclasses.match.MatchMultiple2.testMatch1()
2186    1   1    0 spoon.test.template.testclasses.match.MatchThrowables.matcher1()
2187    1   1    0 spoon.test.template.testclasses.match.MatchThrowables.sample1()
2188    1   1    0 spoon.test.template.testclasses.match.MatchThrowables.sample2(int,MatchThrowables)
2189    1   1    0 spoon.test.template.testclasses.match.MatchThrowables.sample3(int,MatchThrowables)
2190    3   1    0 spoon.test.template.testclasses.match.MatchThrowables.sample4()
2191    2   1    0 spoon.test.template.testclasses.match.MatchThrowables.noMatchBecauseReturnsInt()
2192    1   1    0 spoon.test.template.testclasses.match.MatchModifiers.matcher1()
2193    1   1    0 spoon.test.template.testclasses.match.MatchModifiers.publicStaticMethod()
2194    1   1    0 spoon.test.template.testclasses.match.MatchModifiers.packageProtectedMethodWithParam(int,MatchModifiers)
2195    3   1    0 spoon.test.template.testclasses.match.MatchModifiers.withBody()
2196    2   1    0 spoon.test.template.testclasses.match.MatchModifiers.noMatchBecauseReturnsInt()
2197    4   1    0 spoon.test.template.testclasses.match.MatchMultiple3.matcher1()
2198    7   1    0 spoon.test.template.testclasses.match.MatchMultiple3.testMatch1()
2199    5   2    0 spoon.test.template.testclasses.match.MatchForEach2.matcher1(String)
2200   10   1    0 spoon.test.template.testclasses.match.MatchForEach2.testMatch1()
2201    2   1    0 spoon.test.template.testclasses.SubstituteRootTemplate.statement()
2202    2   1    0 spoon.test.template.testclasses.SubstituteRootTemplate.SubstituteRootTemplate(Void)
2203    2   1    0 spoon.test.template.testclasses.SubstituteRootTemplate.sampleBlock()
2204    2   1    0 spoon.test.template.testclasses.SubStringTemplate.set$name$(String)
2205    2   1    0 spoon.test.template.testclasses.SubStringTemplate.m()
2206    2   1    0 spoon.test.template.testclasses.SubStringTemplate.SubStringTemplate(Object)
2207    4   3    0 spoon.test.template.testclasses.TwoSnippets.hello()
2208    4   3    0 spoon.test.template.testclasses.TwoSnippets.toto()
2209    2   1    0 spoon.test.template.testclasses.ClassAccessTemplate.statement()
2210    2   1    0 spoon.test.template.testclasses.ClassAccessTemplate.ClassAccessTemplate(Class)
2211    2   1    0 spoon.test.template.testclasses.ReturnReplaceTemplate.method()
2212    2   1    0 spoon.test.template.testclasses.ReturnReplaceTemplate.ReturnReplaceTemplate(String)
2213    5   3    0 spoon.test.template.testclasses.ReturnReplaceTemplate.sample()
2214    2   1    0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods_Wrong.TemplateWithFieldsAndMethods_Wrong(String)
2215    2   1    0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods_Wrong.methodToBeInserted()
2216    3   1    0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods.TemplateWithFieldsAndMethods(String,String)
2217    2   1    0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods.methodToBeInserted()
2218    2   1    0 spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods.methodToBeInserted2()
2219    3   1    0 spoon.test.template.testclasses.constructors.TemplateWithConstructor.TemplateWithConstructor(CtTypeReference)
2220    3   1    0 spoon.test.template.testclasses.constructors.TemplateWithConstructor.TemplateWithConstructor(String)
2221    3   1    0 spoon.test.template.testclasses.constructors.TemplateWithConstructor.TemplateWithConstructor(int)
2222    2   1    0 spoon.test.template.testclasses.SubstituteArrayAccessTemplate.statement()
2223    2   1    0 spoon.test.template.testclasses.SubstituteArrayAccessTemplate.SubstituteArrayAccessTemplate(String[])
2224    3   1    0 spoon.test.template.testclasses.inheritance.InterfaceTemplate.InterfaceTemplate(Factory)
2225    2   1    0 spoon.test.template.testclasses.inheritance.InterfaceTemplate.getFactory()
2226    1   1    0 spoon.test.template.testclasses.inheritance.SuperTemplate.toBeOverriden()
2227    2   1    0 spoon.test.template.testclasses.inheritance.SubTemplate.toBeOverriden()
2228   17   6    0 spoon.test.template.testclasses.inheritance.SubTemplate.methodWithTemplatedParameters(Object)
2229    5   1    0 spoon.test.template.testclasses.inheritance.SubTemplate.methodWithFieldAccess()
2230    1   1    0 spoon.test.template.testclasses.inheritance.SubTemplate.var()
2231    1   1    0 spoon.test.template.testclasses.inheritance.SubTemplate.ignoredMethod()
2232    2   1    0 spoon.test.template.testclasses.ToBeMatched.match1()
2233    2   1    0 spoon.test.template.testclasses.ToBeMatched.match2()
2234    2   2    0 spoon.test.template.testclasses.SubstituteArrayLengthTemplate.statement()
2235    2   1    0 spoon.test.template.testclasses.SubstituteArrayLengthTemplate.SubstituteArrayLengthTemplate(String[])
2236    2   1    0 spoon.test.template.testclasses.SubstitutionByExpressionTemplate.block()
2237    2   1    0 spoon.test.template.testclasses.SubstitutionByExpressionTemplate.SubstitutionByExpressionTemplate(String)
2238    2   1    0 spoon.test.template.testclasses.InvocationTemplate.invoke()
2239    3   1    0 spoon.test.template.testclasses.InvocationTemplate.InvocationTemplate(CtTypeReference,String)
2240    1   1    0 spoon.test.template.testclasses.InvocationTemplate.IFace.$method$()
2241    1   1    0 spoon.test.template.testclasses.ObjectIsNotParamTemplate.method()
2242    1   1    0 spoon.test.template.testclasses.ObjectIsNotParamTemplate.ObjectIsNotParamTemplate()
2243    4   1    0 spoon.test.template.testclasses.ArrayAccessTemplate.method()
2244    3   1    0 spoon.test.template.testclasses.ArrayAccessTemplate.method2()
2245    3   1    0 spoon.test.template.testclasses.ArrayAccessTemplate.ArrayAccessTemplate(CtBlock[])
2246    3   1    0 spoon.test.template.testclasses.ArrayAccessTemplate.sampleBlocks()
2247    2   1    0 spoon.test.template.testclasses.replace.ElementPrinterHelper.createListPrinter(boolean,String,boolean,boolean,String,boolean,boolean,String)
2248    5   2    0 spoon.test.template.testclasses.replace.DPPSample1.method1(T)
2249    4   2    0 spoon.test.template.testclasses.replace.DPPSample1.method2(T)
2250    1   1    0 spoon.test.template.testclasses.replace.DPPSample1.scan(CtEnumValue)
2251    2   1    0 spoon.test.template.testclasses.FieldAccessTemplate.m()
2252    2   1    0 spoon.test.template.testclasses.FieldAccessTemplate.FieldAccessTemplate(String)
2253    2   1    0 spoon.test.template.testclasses.EnumAccessTemplate.method()
2254    3   1    0 spoon.test.template.testclasses.EnumAccessTemplate.EnumAccessTemplate(Enum,Factory)
2255    2   1    0 spoon.test.template.testclasses.AnExpressionTemplate.expression()
2256    2   1    0 spoon.test.template.testclasses.AnExpressionTemplate.AnExpressionTemplate(String)
2257    3   3    0 spoon.test.template.testclasses.SecurityCheckerTemplate.matcher1()
2258    2   1    0 spoon.test.template.testclasses.ContextHelper.hasPermission(String)
2259    2   1    0 spoon.test.template.testclasses.SimpleTemplate.SimpleTemplate(String)
2260    2   1    0 spoon.test.template.testclasses.SimpleTemplate.simpleTemplateMethod()
2261    3   1    0 spoon.test.template.testclasses.SimpleTemplate.apply(CtType)
2262    4   3    0 spoon.test.template.testclasses.BServiceImpl.hello()
2263    2   1    0 spoon.test.template.testclasses.InvocationSubstitutionByStatementTemplate.statement()
2264    2   1    0 spoon.test.template.testclasses.InvocationSubstitutionByStatementTemplate.InvocationSubstitutionByStatementTemplate(CtStatement)
2265    1   1    0 spoon.test.template.testclasses.InvocationSubstitutionByStatementTemplate._statement_()
2266    2   2    0 spoon.test.template.testclasses.InvocationSubstitutionByStatementTemplate.sample()
2267    9   1    0 spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByStatement()
2268   10   1    0 spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByExpression()
2269    8   1    0 spoon.test.template.TemplateInvocationSubstitutionTest.testSubstitutionByExpression()
2270   10   1    0 spoon.test.template.TemplateClassAccessTest.testClassAccessTest()
2271    5   1    0 spoon.test.template.ArrayResizeTemplate.ArrayResizeTemplate(CtField,int)
2272    4   1    0 spoon.test.template.ArrayResizeTemplate.resize__field_()
2273   59   1    0 spoon.test.labels.TestLabels.testLabelsAreDetected()
2274   36  14    0 spoon.test.labels.testclasses.ManyLabels.main(String[])
2275   13   3    0 spoon.test.ctCase.testclasses.ClassWithSwitchExample.methodWithSwitch(char)
2276   14   1    0 spoon.test.ctCase.SwitchCaseTest.insertAfterStatementInSwitchCaseWithoutException()
2277   14   1    0 spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException()
2278    2   1    0 spoon.test.ctCase.SwitchCaseTest.elementsOfType(T,Factory)
2279    2   1    0 spoon.test.ctCase.SwitchCaseTest.factoryFor(String,String)
2280    1   1    0 spoon.test.limits.utils.testclasses.ContainInternalClass.Runnable$1.run()
2281   14   1    0 spoon.test.limits.utils.InternalTest.testInternalClasses()
2282    6   1    0 spoon.test.limits.utils.InternalTest.testStaticFinalFieldInAnonymousClass()
2283    6   1    0 spoon.test.annotation.AnnotationTest.testAnnotationValueReflection()
2284    8   1    0 spoon.test.annotation.AnnotationTest.testModelBuildingAnnotationBound()
2285    7   1    0 spoon.test.annotation.AnnotationTest.testWritingAnnotParamArray()
2286   27   1    0 spoon.test.annotation.AnnotationTest.testModelBuildingAnnotationBoundUsage()
2287   14   1    0 spoon.test.annotation.AnnotationTest.testPersistenceProperty()
2288   76   1    0 spoon.test.annotation.AnnotationTest.testAnnotationParameterTypes()
2289   82   1    0 spoon.test.annotation.AnnotationTest.testAnnotatedElementTypes()
2290   16   1    0 spoon.test.annotation.AnnotationTest.testAnnotationWithDefaultArrayValue()
2291   23   1    0 spoon.test.annotation.AnnotationTest.testInnerAnnotationsWithArray()
2292   12   1    0 spoon.test.annotation.AnnotationTest.testAccessAnnotationValue()
2293    2   1    0 spoon.test.annotation.AnnotationTest.AbstractFilter$1.matches(CtConstructorCall)
2294   14   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInNewInstance()
2295    2   1    0 spoon.test.annotation.AnnotationTest.AbstractFilter$1.matches(CtReturn)
2296   15   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInCast()
2297   13   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod()
2298   13   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInReturnTypeInMethod()
2299   14   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod()
2300    2   1    0 spoon.test.annotation.AnnotationTest.AbstractFilter$1.matches(CtLocalVariable)
2301   16   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnLocalVariableInMethod()
2302   40   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass()
2303   14   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration()
2304   27   1    0 spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInStatements()
2305   29   1    0 spoon.test.annotation.AnnotationTest.testUsageOfParametersInTypeAnnotation()
2306    8   1    0 spoon.test.annotation.AnnotationTest.testOutputGeneratedByTypeAnnotation()
2307   12   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnClass()
2308   13   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnField()
2309   13   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnMethod()
2310   13   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnConstructor()
2311   14   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnParameter()
2312    2   1    0 spoon.test.annotation.AnnotationTest.AbstractFilter$1.matches(CtLocalVariable)
2313   16   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnLocalVariable()
2314   13   1    0 spoon.test.annotation.AnnotationTest.testRepeatSameAnnotationOnPackage()
2315    9   1    0 spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields()
2316   10   1    0 spoon.test.annotation.AnnotationTest.testGetAnnotationOuter()
2317   18   1    0 spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessor()
2318   19   1    0 spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation()
2319    9   1    0 spoon.test.annotation.AnnotationTest.testAnnotationIntrospection()
2320   14   1    0 spoon.test.annotation.AnnotationTest.testFieldAndMethodInAnnotation()
2321   16   1    0 spoon.test.annotation.AnnotationTest.testAnnotationInterfacePreserveMethods()
2322    2   1    0 spoon.test.annotation.AnnotationTest.AbstractElementsProcessor.process(A,E)
2323    2   1    0 spoon.test.annotation.AnnotationTest.GlobalProcessor.process(GlobalAnnotation,CtElement)
2324    2   1    0 spoon.test.annotation.AnnotationTest.TypeAnnotationProcessor.process(TypeAnnotation,CtElement)
2325    3   2    0 spoon.test.annotation.AnnotationTest.TypeAnnotationMethodProcessor.process(TypeAnnotation,CtTypeReference)
2326    2   1    0 spoon.test.annotation.AnnotationTest.getActualClassFromAnnotation(Annotation)
2327    2   1    0 spoon.test.annotation.AnnotationTest.getLiteralValueInAnnotation(CtAnnotation)
2328    2   1    0 spoon.test.annotation.AnnotationTest.getInnerAnnotation(CtAnnotation)
2329    2   1    0 spoon.test.annotation.AnnotationTest.getMiddleAnnotation(CtNewArray,int)
2330   18   1    0 spoon.test.annotation.AnnotationTest.testSpoonSpoonResult()
2331   24   1    0 spoon.test.annotation.AnnotationTest.testGetAnnotationFromParameter()
2332   11   1    0 spoon.test.annotation.AnnotationTest.annotationAddValue()
2333   11   3    0 spoon.test.annotation.AnnotationTest.annotationOverrideFQNIsOK()
2334    6   1    0 spoon.test.annotation.AnnotationTest.testCreateAnnotation()
2335   39   3    0 spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue()
2336    5   1    0 spoon.test.annotation.AnnotationTest.testSpoonManageRecursivelyDefinedAnnotation()
2337   13   2    0 spoon.test.annotation.AnnotationTest.testRepeatableAnnotationAreManaged()
2338   18   2    0 spoon.test.annotation.AnnotationTest.testCreateRepeatableAnnotation()
2339   13   2    0 spoon.test.annotation.AnnotationTest.testRepeatableAnnotationAreManagedWithArrays()
2340   18   2    0 spoon.test.annotation.AnnotationTest.testCreateRepeatableAnnotationWithArrays()
2341   14   2    0 spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation()
2342   21   1    0 spoon.test.annotation.AnnotationTest.testAnnotationTypeAndFieldOnField()
2343   10   1    0 spoon.test.annotation.AnnotationTest.testAnnotationAndShadowDefaultRetentionPolicy()
2344   10   1    0 spoon.test.annotation.AnnotationTest.testAnnotationAndShadowClassRetentionPolicy()
2345   10   1    0 spoon.test.annotation.AnnotationTest.testAnnotationAndShadowRuntimeRetentionPolicy()
2346   34   2    0 spoon.test.annotation.AnnotationTest.testAnnotationArray()
2347   16   1    0 spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit()
2348   13   1    0 spoon.test.annotation.AnnotationValuesTest.testValuesOnJava7Annotation()
2349   14   1    0 spoon.test.annotation.AnnotationValuesTest.testValuesOnJava8Annotation()
2350   13   1    0 spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI()
2351    9   1    0 spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory()
2352    8   1    0 spoon.test.annotation.AnnotationValuesTest.testAnnotateWithEnum()
2353    7   1    0 spoon.test.annotation.AnnotationValuesTest.testAnnotationPrintAnnotation()
2354    4   1    0 spoon.test.annotation.AnnotationValuesTest.Request.on(CtElement)
2355    6   4    0 spoon.test.annotation.AnnotationValuesTest.Request.giveMeAnnotation(A)
2356   10   2    0 spoon.test.annotation.AnnotationValuesTest.Request.giveMeAnnotationValue(String)
2357    5   2    0 spoon.test.annotation.AnnotationValuesTest.Request.isTypedBy(T)
2358    3   1    0 spoon.test.annotation.AnnotationValuesTest.Request.isNotAnnotated()
2359    1   1    0 spoon.test.annotation.testclasses.AnnotationsRepeated.AnnotationsRepeated()
2360    1   1    0 spoon.test.annotation.testclasses.AnnotationsRepeated.method()
2361    1   1    0 spoon.test.annotation.testclasses.AnnotationsRepeated.methodWithParameter(String)
2362    2   1    0 spoon.test.annotation.testclasses.AnnotationsRepeated.methodWithLocalVariable()
2363    1   1    0 spoon.test.annotation.testclasses.repeatable.Repeated.method()
2364    1   1    0 spoon.test.annotation.testclasses.repeatable.Repeated.withoutAnnotation()
2365    1   1    0 spoon.test.annotation.testclasses.shadow.DumbKlass.foo()
2366    1   1    0 spoon.test.annotation.testclasses.shadow.DumbKlass.fooClass()
2367    1   1    0 spoon.test.annotation.testclasses.shadow.DumbKlass.barOneValue()
2368    1   1    0 spoon.test.annotation.testclasses.shadow.DumbKlass.barMultipleValues()
2369    1   1    0 spoon.test.annotation.testclasses.repeatandarrays.RepeatedArrays.method()
2370    1   1    0 spoon.test.annotation.testclasses.repeatandarrays.RepeatedArrays.withoutAnnotation()
2371    1   1    0 spoon.test.annotation.testclasses.Bar.bidule()
2372    1   1    0 spoon.test.annotation.testclasses.Foo.test()
2373    1   1    0 spoon.test.annotation.testclasses.Main.Main()
2374    1   1    0 spoon.test.annotation.testclasses.Main.m(int)
2375    1   1    0 spoon.test.annotation.testclasses.Main.nn(int)
2376    1   1    0 spoon.test.annotation.testclasses.Main.m1()
2377    1   1    0 spoon.test.annotation.testclasses.Main.m2()
2378    1   1    0 spoon.test.annotation.testclasses.Main.m3()
2379    2   1    0 spoon.test.annotation.testclasses.Main.toString()
2380    1   1    0 spoon.test.annotation.testclasses.Main.testValueWithArray()
2381    1   1    0 spoon.test.annotation.testclasses.Main.testValueWithoutArray()
2382    1   1    0 spoon.test.annotation.testclasses.AnnotParam.m(int)
2383    2   1    0 spoon.test.annotation.testclasses.dropwizard.GraphiteReporterFactory.getPort()
2384    2   1    0 spoon.test.annotation.testclasses.dropwizard.GraphiteReporterFactory.setPort(int)
2385    3   1    0 spoon.test.annotation.testclasses.AnnotationIntrospection.m()
2386    2   2    0 spoon.test.annotation.testclasses.Pozole.cook()
2387    1   1    0 spoon.test.imports.testclasses.SuperClass.Item.Item(int,String)
2388    1   1    0 spoon.test.imports.testclasses.internal2.Menudo.m()
2389    1   1    0 spoon.test.imports.testclasses.internal2.Tostada.make()
2390    2   1    0 spoon.test.imports.testclasses.internal3.Foo.bar()
2391    1   1    0 spoon.test.imports.testclasses.internal4.Constants.mamethode()
2392    2   1    0 spoon.test.imports.testclasses.StaticNoOrdered.Test$1.annotationType()
2393    2   1    0 spoon.test.imports.testclasses.StaticNoOrdered.Test$1.expected()
2394    2   1    0 spoon.test.imports.testclasses.StaticNoOrdered.Test$1.timeout()
2395    9   1    0 spoon.test.imports.testclasses.StaticNoOrdered.testMachin()
2396    2   1    0 spoon.test.imports.testclasses.StaticNoOrdered.anotherStaticImoport()
2397    3   1    0 spoon.test.imports.testclasses.NotImportExecutableType.m()
2398    2   1    0 spoon.test.imports.testclasses.internal.PublicSuperClass.visit()
2399    3   1    0 spoon.test.imports.testclasses.internal.ChildClass.m()
2400    2   2    0 spoon.test.imports.testclasses.MultiCatch.test()
2401    2   1    0 spoon.test.imports.testclasses.ClassWithInvocation.ClassWithInvocation()
2402    2   1    0 spoon.test.imports.testclasses.ClassWithInvocation.test(Class)
2403    2   1    0 spoon.test.imports.testclasses.Tacos.m()
2404    2   1    0 spoon.test.imports.testclasses.StaticImportsFromEnum.DataElement.DataElement(String)
2405    2   1    0 spoon.test.imports.testclasses.StaticImportsFromEnum.DataElement.toString()
2406    2   1    0 spoon.test.imports.testclasses.StaticImportsFromEnum.getValues()
2407    2   1    0 spoon.test.imports.testclasses.StaticImportsFromEnum.getBarValues()
2408    2   1    0 spoon.test.imports.testclasses.StaticImportsFromEnum.getLip()
2409    2   1    0 spoon.test.imports.testclasses.DefaultClientClass.visit()
2410    3   1    0 spoon.test.imports.testclasses.Mole.m()
2411    2   1    0 spoon.test.imports.testclasses.SubClass.aMethod()
2412    2   1    0 spoon.test.imports.testclasses.SubClass.Item.Item(String)
2413    2   1    0 spoon.test.imports.testclasses.JavaLongUse.method()
2414    2   1    0 spoon.test.imports.testclasses.JavaLongUse.main(String[])
2415    2   1    1 spoon.test.imports.testclasses.ToBeModified.m()
2416    2   1    0 spoon.test.imports.testclasses.Pozole.m1()
2417   11   1    0 spoon.test.imports.ImportAndExtendWithPackageNameTest.testBuildModel()
2418   17   1    0 spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven()
2419    8   1    0 spoon.test.field.FieldTest.testgetDeclaredFields()
2420   11   1    0 spoon.test.field.FieldTest.testAddFieldsAtTop()
2421    8   1    0 spoon.test.field.FieldTest.testFieldImplicitTarget()
2422    6   1    0 spoon.test.field.FieldTest.createField(Factory,ModifierKind,String)
2423   19   1    0 spoon.test.field.FieldTest.testGetDefaultExpression()
2424   10   1    0 spoon.test.field.FieldTest.getFQNofFieldReference()
2425    1   1    0 spoon.test.field.testclasses.AddFieldAtTop.m()
2426    2   1    0 spoon.test.field.testclasses.AddFieldAtTop.Foo.m()
2427    2   1    0 spoon.test.field.testclasses.A.ClassB.getKey()
2428    7   2    0 spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable()
2429    6   2    0 spoon.test.exceptions.ExceptionTest.testExceptionNoFile()
2430    5   2    0 spoon.test.exceptions.ExceptionTest.testExceptionInSnippet()
2431   13   3    0 spoon.test.exceptions.ExceptionTest.testExceptionInvalidAPI()
2432    4   1    0 spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass()
2433   11   1    0 spoon.test.exceptions.ExceptionTest.testUnionCatchExceptionInsideLambdaInNoClasspath()
2434    2   1    0 spoon.test.ctElement.testclasses.Returner.get()
2435    2   1    0 spoon.test.ctElement.testclasses.Returner.get2()
2436    9   1    0 spoon.test.ctElement.ElementTest.testGetFactory()
2437   14   1    0 spoon.test.ctElement.MetadataTest.testMetadata()
2438    2   1    0 spoon.test.staticFieldAccess.internal.Origin.test()
2439    2   1    0 spoon.test.staticFieldAccess.StaticAccessBug.Callable$1.Runnable$1.run()
2440    5   1    0 spoon.test.staticFieldAccess.StaticAccessBug.Callable$1.call()
2441    7   1    0 spoon.test.staticFieldAccess.StaticAccessBug.test()
2442    4   1    0 spoon.test.staticFieldAccess.StaticAccessBug.references()
2443    2   2    0 spoon.test.staticFieldAccess.processors.InsertBlockProcessor.isToBeProcessed(CtMethod)
2444    4   1    0 spoon.test.staticFieldAccess.processors.InsertBlockProcessor.process(CtMethod)
2445    5   1    0 spoon.test.staticFieldAccess.StaticAccessTest.setUp()
2446    5   1    0 spoon.test.staticFieldAccess.StaticAccessTest.testReferences()
2447    9   1    0 spoon.test.staticFieldAccess.StaticAccessTest.testProcessAndCompile()
2448    3   1    0 spoon.test.staticFieldAccess2.testclasses.GenericsWithAmbiguousStaticField.m1()
2449    2   1    0 spoon.test.staticFieldAccess2.testclasses.GenericsWithAmbiguousStaticField.genericMethod()
2450    4   1    0 spoon.test.staticFieldAccess2.testclasses.GenericsWithAmbiguousMemberField.m1()
2451    2   1    0 spoon.test.staticFieldAccess2.testclasses.GenericsWithAmbiguousMemberField.genericMethod()
2452    2   1    0 spoon.test.staticFieldAccess2.testclasses.AmbiguousImplicitFieldReference.getMemberField()
2453    2   1    0 spoon.test.staticFieldAccess2.testclasses.AmbiguousImplicitFieldReference.setMemberField(String)
2454    2   1    0 spoon.test.staticFieldAccess2.testclasses.AmbiguousImplicitFieldReference.setMemberField2(String)
2455    2   1    0 spoon.test.staticFieldAccess2.testclasses.AmbiguousImplicitFieldReference.testLocalMethodInvocations()
2456    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticFieldReference.reader()
2457    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticFieldReference.writer(String)
2458    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticFieldReference.longReader()
2459    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticFieldReference.longWriter(long)
2460    3   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticFieldReference.testLocalMethodInvocations()
2461    3   1    0 spoon.test.staticFieldAccess2.testclasses.ChildOfGenericsWithAmbiguousStaticField.m1()
2462    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticClassAccess.ImplicitStaticClassAccess()
2463    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticClassAccess.ImplicitStaticClassAccess(Class)
2464    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitStaticClassAccess.testLocalMethodInvocations()
2465    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitFieldReference.getMemberField()
2466    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitFieldReference.setMemberField(String)
2467    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitFieldReference.setMemberField2(String)
2468    2   1    0 spoon.test.staticFieldAccess2.testclasses.ImplicitFieldReference.testLocalMethodInvocations()
2469    8   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitStaticFieldReference()
2470    8   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitStaticFieldReferenceAutoImport()
2471    7   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitFieldReference()
2472    7   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitFieldReferenceAutoImport()
2473    7   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAmbiguousImplicitFieldReference()
2474    7   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAmbiguousImplicitFieldReferenceAutoImport()
2475    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitStaticClassAccess()
2476    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testImplicitStaticClassAccessAutoImport()
2477    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testGenericsWithAmbiguousStaticField()
2478    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testGenericsWithAmbiguousStaticFieldAutoImport()
2479    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testChildOfGenericsWithAmbiguousStaticField()
2480    6   2    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testChildOfGenericsWithAmbiguousStaticFieldAutoImport()
2481    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testGenericsWithAmbiguousMemberField()
2482    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testGenericsWithAmbiguousMemberFieldAutoImport()
2483    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstants()
2484    2   1    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstantsAutoImport()
2485   13   4    0 spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.checkFile(boolean,String)
2486    1   1    0 spoon.test.type.testclasses.TypeMembersOrder.method1()
2487    1   1    0 spoon.test.type.testclasses.TypeMembersOrder.TypeMembersOrder()
2488    1   1    0 spoon.test.type.testclasses.TypeMembersOrder.method4()
2489    1   1    0 spoon.test.type.testclasses.TypeMembersOrder.method8()
2490    4   2    0 spoon.test.condition.testclasses.Foo.m()
2491    3   2    0 spoon.test.condition.testclasses.Foo.m2()
2492   27  11    0 spoon.test.condition.testclasses.Foo.m3()
2493    3   3    0 spoon.test.condition.testclasses.Foo.m4()
2494    4   2    0 spoon.test.condition.testclasses.Foo2.bug()
2495    4   1    0 spoon.test.condition.ConditionalTest.testConditional()
2496    4   1    0 spoon.test.condition.ConditionalTest.testConditionalWithAssignment()
2497   10   4    0 spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop()
2498   11   3    0 spoon.test.condition.ConditionalTest.testNoBlockInConditionAndLoop()
2499    8   1    0 spoon.test.condition.ConditionalTest.testNoThenBlock()
2500    7   1    0 spoon.test.condition.ConditionalTest.testNoThenBlockBug()
2501    9   1    0 spoon.test.properties.PropertiesTest.testNonExistingDirectory()
2502    1   1    0 spoon.test.properties.SimpleProcessor.process(CtMethod)
2503    2   1    0 spoon.test.properties.testclasses.Sample.Sample()
2504    3   1    0 spoon.test.properties.testclasses.Sample.Sample(int)
2505    3   1    0 spoon.test.properties.testclasses.Sample.Sample(int,int)
2506    1   1    0 spoon.test.properties.testclasses.Sample.method()
2507    2   1    0 spoon.test.properties.testclasses.Sample.method2()
2508    2   1    0 spoon.test.properties.testclasses.Sample.method3()
2509    3   1    0 spoon.test.support.ResourceTest.testEqualsFileSystemFile()
2510   11   1    0 spoon.test.support.ResourceTest.testFileSystemFolder()
2511   10   1    0 spoon.test.support.ResourceTest.testVirtualFolder()
2512   22   1    0 spoon.test.support.ResourceTest.testFilteringFolder()
2513   12   1    0 spoon.test.visitor.AssignmentsEqualsTest.testEquals()
2514    2   1    0 spoon.test.visitor.VisitorTest.MyVisitor.MyVisitor(int)
2515    4   1    0 spoon.test.visitor.VisitorTest.MyVisitor.visitCtMethod(T)
2516    3   1    0 spoon.test.visitor.VisitorTest.MyVisitor.visitCtIf(CtIf)
2517    7   1    0 spoon.test.visitor.VisitorTest.testRecursiveDescent()
2518    5   1    0 spoon.test.parent.ParentTest.setup()
2519    9   2    0 spoon.test.parent.ParentTest.testParent()
2520   12   1    0 spoon.test.parent.ParentTest.testParentSet()
2521    8   1    0 spoon.test.parent.ParentTest.testParentPackage()
2522    2   2    0 spoon.test.parent.ParentTest.ReferenceTypeFilter$1.matches(CtTypeReference)
2523   19   1    0 spoon.test.parent.ParentTest.testParentOfCtPackageReference()
2524    8   1    0 spoon.test.parent.ParentTest.testParentOfCtVariableReference()
2525    7   1    0 spoon.test.parent.ParentTest.testParentOfCtExecutableReference()
2526    2   2    0 spoon.test.parent.ParentTest.ReferenceTypeFilter$1.matches(CtTypeReference)
2527    8   1    0 spoon.test.parent.ParentTest.testParentOfGenericInTypeReference()
2528    7   1    0 spoon.test.parent.ParentTest.testParentOfPrimitiveReference()
2529    2   2    0 spoon.test.parent.ParentTest.AbstractFilter$1.matches(CtStatement)
2530    2   2    0 spoon.test.parent.ParentTest.AbstractFilter$1.matches(CtStatement)
2531    2   3    0 spoon.test.parent.ParentTest.AbstractFilter$1.matches(CtType)
2532    2   1    0 spoon.test.parent.ParentTest.AbstractFilter$1.matches(CtStatement)
2533   26   1    0 spoon.test.parent.ParentTest.testGetParentWithFilter()
2534   12   2    0 spoon.test.parent.ParentTest.testHasParent()
2535    2   6    0 spoon.test.parent.ParentTest.IntercessionScanner$1.isToBeProcessed(CtMethod)
2536    7   4    0 spoon.test.parent.ParentTest.IntercessionScanner$1.process(CtMethod)
2537    6   3    0 spoon.test.parent.ParentTest.IntercessionScanner$1.checkAddStrategy(CtMethod)
2538   10   7    0 spoon.test.parent.ParentTest.IntercessionScanner$1.checkSetStrategy(CtMethod)
2539    6   1    1 spoon.test.parent.ParentTest.IntercessionScanner$1.createCheckNull(CtParameter)
2540    2   2    0 spoon.test.parent.ParentTest.IntercessionScanner$1.TypeFilter$1.matches(CtInvocation)
2541    5   2    0 spoon.test.parent.ParentTest.IntercessionScanner$1.searchSetParent(CtBlock)
2542   50   1    0 spoon.test.parent.ParentTest.testParentSetInSetter()
2543    5   1    0 spoon.test.parent.TopLevelTypeTest.setup()
2544   12   1    0 spoon.test.parent.TopLevelTypeTest.testTopLevelType()
2545    2   1    0 spoon.test.parent.ContractOnSettersParametrizedTest.data()
2546    6   3    0 spoon.test.parent.ContractOnSettersParametrizedTest.createReceiverList()
2547    4   1    0 spoon.test.parent.ContractOnSettersParametrizedTest.ModelChangeListener.onAction(Action)
2548   17  10    0 spoon.test.parent.ContractOnSettersParametrizedTest.createCompatibleObject(CtTypeReference)
2549   36  17    0 spoon.test.parent.ContractOnSettersParametrizedTest.testContract()
2550    2   1    0 spoon.test.parent.SetParentTest.data()
2551   24  11    0 spoon.test.parent.SetParentTest.testContract()
2552    3   1    0 spoon.test.parent.Foo.foo()
2553   10   3    0 spoon.test.parent.Foo.nullParent()
2554    4   2    0 spoon.test.parent.Foo.m()
2555    2   1    0 spoon.test.parent.Foo.T.Object$1.m()
2556    4   1    0 spoon.test.parent.Foo.T.m()
2557    6   1    0 spoon.test.parent.Foo.internalClass()
2558   14   1    0 spoon.test.arrays.ArraysTest.testArrayReferences()
2559   19   1    0 spoon.test.arrays.ArraysTest.testInitializeWithNewArray()
2560    9   2    0 spoon.test.arrays.ArraysTest.testCtNewArrayInnerCtNewArray()
2561   10   2    0 spoon.test.arrays.ArraysTest.testCtNewArrayWitComments()
2562    8   1    0 spoon.test.arrays.ArraysTest.testParameterizedVarargReference()
2563    8   1    0 spoon.test.arrays.ArraysTest.testParameterizedArrayReference()
2564   10   1    0 spoon.test.arrays.ArraysTest.testParameterizedArrayVarargReference()
2565    6   1    0 spoon.test.arrays.ArraysTest.testParameterizedTypeReference()
2566    1   1    0 spoon.test.arrays.testclasses.VaragParam.m1(List)
2567    1   1    0 spoon.test.arrays.testclasses.VaragParam.m2(List[])
2568    1   1    0 spoon.test.arrays.testclasses.VaragParam.m3(List[])
2569    1   1    0 spoon.test.arrays.testclasses.VaragParam.m4(List)
2570    3   1    0 spoon.test.arrays.testclasses.Foo.readByteArray(long)
2571   14   1    0 spoon.test.ctBlock.TestCtBlock.testRemoveStatement()
2572   14   2    0 spoon.test.ctBlock.TestCtBlock.testAddStatementInBlock()
2573   21   2    0 spoon.test.ctBlock.TestCtBlock.testAddStatementInCase()
2574    6   2    0 spoon.test.ctBlock.testclasses.Toto.foo()
2575    9   3    0 spoon.test.ctBlock.testclasses.Toto.bar()
2576   11   1    0 spoon.test.model.TypeTest.testGetAllExecutables()
2577    9   1    0 spoon.test.model.TypeTest.testAllTypeMembersFunctionMode()
2578    9   1    0 spoon.test.model.TypeTest.testGetUsedTypes()
2579    6   1    0 spoon.test.model.TypeTest.superclassTest()
2580    3   1    0 spoon.test.model.TypeTest.testGetUsedTypesForTypeInRootPackage()
2581    9   1    0 spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldOnType()
2582    9   1    0 spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldOnTypeRef()
2583    4   1    0 spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldByReflection()
2584   12   1    0 spoon.test.model.TypeTest.testTypeInfoIsInterface()
2585    3   1    0 spoon.test.model.TypeTest.checkIsSomething(String,CtType)
2586    7   1    0 spoon.test.model.TypeTest._checkIsSomething(String,CtTypeInformation)
2587   10   2    0 spoon.test.model.BlockTest.testIterationStatements()
2588   17   1    0 spoon.test.model.BlockTest.testAddEmptyBlock()
2589    5   1    0 spoon.test.model.AnonymousExecutableTest.testStatements()
2590    1   1    0 spoon.test.model.ClassWithSuperAndIFace.ClassWithSuperAndIFace()
2591    1   1    0 spoon.test.model.Foo.fooMethod()
2592    1   1    0 spoon.test.model.Foo.Foo()
2593    1   1    0 spoon.test.model.Foo.m()
2594    1   1    0 spoon.test.model.Foo.useInner(Inner)
2595    1   1    0 spoon.test.model.Baz.bazMethod()
2596    1   1    0 spoon.test.model.Baz.m()
2597   21   9    0 spoon.test.model.testclasses.SwitchStringClass.getTypeOfDayWithSwitchStatement(String)
2598    2   1    0 spoon.test.model.testclasses.InterfaceSuperclass.compareTo(Integer)
2599    2   1    0 spoon.test.model.testclasses.ClassWithSuperOutOfModel.ClassWithSuperOutOfModel(ByteArrayInputStream[])
2600    2   1    0 spoon.test.model.testclasses.ClassWithSuperOutOfModel.ClassWithSuperOutOfModel(p_buf[],int,int)
2601   13   2    0 spoon.test.model.SwitchCaseTest.testIterationStatements()
2602    9   3    0 spoon.test.model.SwitchCaseTest.testSwitchStatementOnAString()
2603   12   1    0 spoon.test.parameters.ParameterTest.testParameterInNoClasspath()
2604    2   2    0 spoon.test.parameters.ParameterTest.TypeFilter$1.matches(CtParameter)
2605    2   2    0 spoon.test.parameters.ParameterTest.TypeFilter$1.matches(CtParameterReference)
2606   17   2    0 spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath()
2607   21   4    0 spoon.test.parameters.ParameterTest.testMultiParameterLambdaTypeReference()
2608   51   3    0 spoon.test.api.NoClasspathTest.test()
2609    9   1    0 spoon.test.api.NoClasspathTest.testBug20141021()
2610   12   1    0 spoon.test.api.NoClasspathTest.testGetStaticDependency()
2611    6   1    0 spoon.test.api.NoClasspathTest.testIssue1747()
2612   22   1    0 spoon.test.api.NoClasspathTest.testInheritanceInNoClassPathWithClasses()
2613    5   1    0 spoon.test.api.FileSystemFolderTest.jarFileIsNotSubfolder()
2614    7   2    0 spoon.test.api.FileSystemFolderTest.testLauncherWithWrongPathAsInput()
2615   14   1    0 spoon.test.api.processors.AwesomeProcessor.process(Bar)
2616    2   1    0 spoon.test.api.processors.AwesomeProcessor.getElements()
2617    2   1    0 spoon.test.api.testclasses.Bar.doSomething()
2618    1   1    0 spoon.test.methodreference.testclasses.Cloud.method(T,U)
2619    1   1    0 spoon.test.methodreference.testclasses.Cloud.method(T,U)
2620    1   1    0 spoon.test.methodreference.testclasses.Cloud.method(T,U)
2621    5   1    0 spoon.test.methodreference.testclasses.Sun.foo()
2622    2   1    0 spoon.test.methodreference.testclasses.AssertJ.assertThat(STREAM)
2623   15   2    0 spoon.test.sourcePosition.SourcePositionTest.equalPositionsHaveSameHashcode()
2624    2   1    0 spoon.test.sourcePosition.SourcePositionTest.factoryFor(String,String)
2625    9   2    0 spoon.test.sourcePosition.SourcePositionTest.testSourcePositionOfSecondPrimitiveType()
2626    2   1    0 spoon.test.sourcePosition.SourcePositionTest.CompilationUnitImpl$1.getOriginalSourceCode()
2627   10   1    0 spoon.test.sourcePosition.SourcePositionTest.testSourcePositionStringFragment()
2628    2   1    0 spoon.test.sourcePosition.testclasses.Brambora.sourcePositionOfMyReturnTypeMustNotBeCopied()
2629   13   1    0 spoon.test.compilationunit.GetBinaryFilesTest.testSingleBinary()
2630   19   2    0 spoon.test.compilationunit.GetBinaryFilesTest.testExistingButNotBuiltBinary()
2631   19   1    0 spoon.test.compilationunit.GetBinaryFilesTest.testMultiClassInSingleFile()
2632   17   1    0 spoon.test.compilationunit.GetBinaryFilesTest.testNestedTypes()
2633   19   1    0 spoon.test.compilationunit.GetBinaryFilesTest.testAnonymousClasses()
2634   20   3    0 spoon.test.comparison.EqualTest.testEqualsEmptyException()
2635    7   1    0 spoon.test.comparison.EqualTest.testEqualsComment()
2636    8   1    0 spoon.test.comparison.EqualTest.testEqualsMultitype()
2637    5   1    0 spoon.test.comparison.EqualTest.testEqualsActualTypeRef()
2638   12   1    0 spoon.test.comparison.EqualTest.testEqualsDetails()
2639    6   1    0 spoon.test.ctBodyHolder.CtBodyHolderTest.testConstructor()
2640    6   1    0 spoon.test.ctBodyHolder.CtBodyHolderTest.testMethod()
2641   12   1    0 spoon.test.ctBodyHolder.CtBodyHolderTest.testTryCatch()
2642    9   1    0 spoon.test.ctBodyHolder.CtBodyHolderTest.testForWithStatement()
2643    9   1    0 spoon.test.ctBodyHolder.CtBodyHolderTest.testForWithBlock()
2644    9   1    0 spoon.test.ctBodyHolder.CtBodyHolderTest.testWhileWithBlock()
2645   30   4    0 spoon.test.ctBodyHolder.CtBodyHolderTest.checkCtBody(CtBodyHolder,String,int)
2646    2   1    0 spoon.test.ctBodyHolder.testclasses.CWBStatementTemplate.CWBStatementTemplate(String)
2647    2   1    0 spoon.test.ctBodyHolder.testclasses.CWBStatementTemplate.statement()
2648    2   1    0 spoon.test.ctBodyHolder.testclasses.ClassWithBodies.ClassWithBodies()
2649    2   1    0 spoon.test.ctBodyHolder.testclasses.ClassWithBodies.method()
2650   10   5    0 spoon.test.ctBodyHolder.testclasses.ClassWithBodies.method2()
2651    2   1    0 spoon.test.testclasses.SampleClass.SampleClass()
2652    3   1    0 spoon.test.testclasses.SampleClass.SampleClass(int)
2653    3   1    0 spoon.test.testclasses.SampleClass.SampleClass(int,int)
2654    1   1    0 spoon.test.testclasses.SampleClass.method()
2655    2   1    0 spoon.test.testclasses.SampleClass.method2()
2656    2   1    0 spoon.test.testclasses.SampleClass.method3()
2657    2   1    0 spoon.test.testclasses.SampleImportClass.SampleImportClass()
2658    4   1    0 spoon.test.testclasses.SampleImportClass.SampleImportClass(int)
2659    3   1    0 spoon.test.testclasses.SampleImportClass.SampleImportClass(int,int)
2660    1   1    0 spoon.test.testclasses.SampleImportClass.method()
2661    2   1    0 spoon.test.testclasses.SampleImportClass.method2()
2662    2   1    0 spoon.test.testclasses.SampleImportClass.method3()
2663   10   1    0 spoon.test.eval.EvalTest.testStringConcatenation()
2664    7   1    0 spoon.test.eval.EvalTest.testArrayLength()
2665    7   1    0 spoon.test.eval.EvalTest.testDoNotSimplify()
2666    7   1    0 spoon.test.eval.EvalTest.testDoNotSimplifyCasts()
2667    9   1    0 spoon.test.eval.EvalTest.testScanAPartiallyEvaluatedElement()
2668    7   1    0 spoon.test.eval.EvalTest.testTryCatchAndStatement()
2669    9   1    0 spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected()
2670   18   1    0 spoon.test.eval.EvalTest.testVisitorPartialEvaluator_binary()
2671    6   1    0 spoon.test.eval.EvalTest.testVisitorPartialEvaluator_if()
2672    9   1    0 spoon.test.eval.EvalTest.testVisitorPartialEvaluatorScanner()
2673    9   5    0 spoon.test.eval.testclasses.ToEvaluate.testStrings()
2674    3   2    0 spoon.test.eval.testclasses.ToEvaluate.testInts()
2675    3   2    0 spoon.test.eval.testclasses.ToEvaluate.testArray()
2676    2   1    0 spoon.test.eval.testclasses.ToEvaluate.testDoNotSimplify(String,String)
2677    2   1    0 spoon.test.eval.testclasses.ToEvaluate.testDoNotSimplifyCasts(CtElement)
2678    2   1    0 spoon.test.eval.testclasses.ToEvaluate.castTarget(CtElement)
2679    5   3    0 spoon.test.eval.testclasses.ToEvaluate.tryCatchAndStatement(CtElement)
2680    4   1    0 spoon.test.eval.testclasses.ToEvaluate.simplifyOnlyWhenPossible(CtElement)
2681    2   3    0 spoon.test.eval.testclasses.Foo.foo()
2682    8   4    0 spoon.test.eval.testclasses.Foo.bar()
2683    4   1    0 spoon.test.replace.ReplaceTest.setup()
2684   16   1    0 spoon.test.replace.ReplaceTest.testReplaceSet()
2685   18   1    0 spoon.test.replace.ReplaceTest.testReplaceBlock()
2686   16   1    0 spoon.test.replace.ReplaceTest.testReplaceReplace()
2687    7   1    0 spoon.test.replace.ReplaceTest.testReplaceStmtByList()
2688    6   1    0 spoon.test.replace.ReplaceTest.testReplaceStmtByListStatements()
2689   12   1    0 spoon.test.replace.ReplaceTest.testReplaceStmtByListStatementsAndNull()
2690   15   1    0 spoon.test.replace.ReplaceTest.testReplaceField()
2691   10   1    0 spoon.test.replace.ReplaceTest.testReplaceMethod()
2692   16   1    0 spoon.test.replace.ReplaceTest.testReplaceTwoMethods()
2693    9   1    0 spoon.test.replace.ReplaceTest.testReplaceExpression()
2694    6   1    0 spoon.test.replace.ReplaceTest.testReplaceStatement()
2695    7   1    0 spoon.test.replace.ReplaceTest.testReplaceIntegerReference()
2696    2   2    0 spoon.test.replace.ReplaceTest.ReferenceTypeFilter$1.matches(CtTypeReference)
2697   11   1    0 spoon.test.replace.ReplaceTest.testReplaceAllTypeRefenceWithGenerics()
2698    2   2    0 spoon.test.replace.ReplaceTest.ReferenceTypeFilter$1.matches(CtTypeReference)
2699   15   1    0 spoon.test.replace.ReplaceTest.testReplaceAPackageReferenceByAnotherOne()
2700   12   1    0 spoon.test.replace.ReplaceTest.testReplaceAParameterReferenceToFieldReference()
2701   14   2    0 spoon.test.replace.ReplaceTest.testReplaceExecutableReferenceByAnotherOne()
2702    7   1    0 spoon.test.replace.ReplaceTest.testReplaceBlockTry()
2703    7   3    0 spoon.test.replace.ReplaceParametrizedTest.data()
2704    7   5    0 spoon.test.replace.ReplaceParametrizedTest.Scanner.scan(CtRole,CtElement)
2705    2   1    0 spoon.test.replace.ReplaceParametrizedTest.Filter$1.matches(CtElement)
2706   59  15    0 spoon.test.replace.ReplaceParametrizedTest.testContract()
2707    8   4    0 spoon.test.replace.ReplaceParametrizedTest.getReport(String)
2708    8   3    0 spoon.test.replace.ReplaceParametrizedTest.invokeSetter(RoleHandler,CtElement,CtElement)
2709    8   5    0 spoon.test.replace.ReplaceParametrizedTest.invokeGetter(RoleHandler,CtElement)
2710    2   1    0 spoon.test.replace.testclasses.Tacos.m()
2711    2   1    0 spoon.test.replace.testclasses.Tacos.m2()
2712    2   1    0 spoon.test.replace.testclasses.Tacos.m3(String)
2713    5   1    0 spoon.test.replace.testclasses.Foo.foo()
2714    2   1    0 spoon.test.replace.testclasses.Foo.bar()
2715    2   1    0 spoon.test.replace.testclasses.Foo.retry()
2716    3   1    0 spoon.test.replace.testclasses.Foo.statements()
2717    3   1    0 spoon.test.replace.testclasses.Mole.m()
2718    2   1    0 spoon.test.refactoring.RefactoringTest.AbstractReferenceFilter$1.matches(CtTypeReference)
2719   20   2    0 spoon.test.refactoring.RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned()
2720    2   1    0 spoon.test.refactoring.RefactoringTest.AbstractFilter$1.matches(CtInvocation)
2721    9   1    0 spoon.test.refactoring.RefactoringTest.testThisInConstructor()
2722    2   1    0 spoon.test.refactoring.RefactoringTest.AbstractFilter$1.matches(CtInvocation)
2723    9   1    0 spoon.test.refactoring.RefactoringTest.testThisInConstructorAfterATransformation()
2724    9   1    0 spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation()
2725    2   1    0 spoon.test.refactoring.processors.ThisTransformationProcessor.process(CtClass)
2726    2   1    0 spoon.test.refactoring.parameter.testclasses.TypeC.method1(Exception)
2727    1   1    0 spoon.test.refactoring.parameter.testclasses.IFaceB.method1(T)
2728    1   1    0 spoon.test.refactoring.parameter.testclasses.TypeR.method1(Double)
2729    1   1    0 spoon.test.refactoring.parameter.testclasses.IFaceT.method1(Double)
2730    1   1    0 spoon.test.refactoring.parameter.testclasses.TypeK.TypeK()
2731    1   1    0 spoon.test.refactoring.parameter.testclasses.TypeA.TypeA()
2732    1   1    0 spoon.test.refactoring.parameter.testclasses.TypeA.method1(Exception)
2733    1   1    0 spoon.test.refactoring.parameter.testclasses.TypeL.method1(Double)
2734    2   1    0 spoon.test.refactoring.testclasses.AClass.AClass()
2735    3   1    0 spoon.test.refactoring.testclasses.AClass.AClass(String)
2736    2   1    0 spoon.test.refactoring.testclasses.AClass.isMySubclass(Object)
2737    1   1    0 spoon.test.refactoring.testclasses.AbstractClass.AbstractClass()
2738    9   1    0 spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess()
2739    9   1    0 spoon.test.targeted.TargetedExpressionTest.testCtThisAccess()
2740    9   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetOfFieldAccess()
2741   10   1    0 spoon.test.targeted.TargetedExpressionTest.testNotTargetedExpression()
2742    7   1    0 spoon.test.targeted.TargetedExpressionTest.testCastWriteWithGenerics()
2743   21   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfFieldAccess()
2744   25   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfStaticFieldAccess()
2745   27   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfFieldAccessInInnerClass()
2746    2   2    0 spoon.test.targeted.TargetedExpressionTest.TypeFilter$1.matches(CtClass)
2747   16   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfFieldInAnonymousClass()
2748   25   1    0 spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfFieldAccessNoClasspath()
2749   24   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfInv()
2750   21   1    0 spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfInv()
2751   31   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfInvInInnerClass()
2752    2   2    0 spoon.test.targeted.TargetedExpressionTest.TypeFilter$1.matches(CtClass)
2753   15   1    0 spoon.test.targeted.TargetedExpressionTest.testTargetsOfInvInAnonymousClass()
2754   23   1    0 spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfInvNoClasspath()
2755   11   1    0 spoon.test.targeted.TargetedExpressionTest.testInitializeFieldAccessInNoclasspathMode()
2756   14   1    0 spoon.test.targeted.TargetedExpressionTest.testClassDeclaredInALambda()
2757   14   5    0 spoon.test.targeted.TargetedExpressionTest.assertEqualsFieldAccess(ExpectedTargetedExpression,CtFieldAccess)
2758    8   3    0 spoon.test.targeted.TargetedExpressionTest.assertEqualsInvocation(ExpectedTargetedExpression,CtInvocation)
2759    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.type(CtExpression)
2760    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.target(CtExpression)
2761    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.target(String)
2762    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.target(CtExpression)
2763    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.declaringType(CtTypeReference)
2764    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.result(String)
2765    3   1    0 spoon.test.targeted.TargetedExpressionTest.ExpectedTargetedExpression.isLocal()
2766    1   1    0 spoon.test.targeted.testclasses.SuperClass.superMethod()
2767    2   1    0 spoon.test.targeted.testclasses.InternalSuperCall.methode()
2768    2   1    0 spoon.test.targeted.testclasses.InternalSuperCall.toString()
2769    1   1    0 spoon.test.targeted.testclasses.Bar.staticMethodBar()
2770    1   1    0 spoon.test.targeted.testclasses.Bar.methodBar()
2771   12   1    0 spoon.test.targeted.testclasses.Foo.m()
2772    8   1    0 spoon.test.targeted.testclasses.Foo.field()
2773    8   1    0 spoon.test.targeted.testclasses.Foo.inv()
2774    9   1    0 spoon.test.targeted.testclasses.Foo.invStatic()
2775    2   1    0 spoon.test.targeted.testclasses.Foo.NestedTypeScanner.checkType(Foo)
2776    3   1    0 spoon.test.targeted.testclasses.Foo.NestedTypeScanner.checkField()
2777    3   1    0 spoon.test.targeted.testclasses.Foo.Foo$1.m()
2778    4   1    0 spoon.test.targeted.testclasses.Foo.Foo$1.invStatic()
2779   17   1    0 spoon.test.targeted.testclasses.Foo.method()
2780    1   1    0 spoon.test.targeted.testclasses.Foo.staticMethod()
2781    3   1    0 spoon.test.targeted.testclasses.Foo.Foo(int,int)
2782    9   1    0 spoon.test.targeted.testclasses.Foo.InnerClass.innerInv()
2783    7   1    0 spoon.test.targeted.testclasses.Foo.InnerClass.innerField()
2784    1   1    0 spoon.test.targeted.testclasses.Foo.InnerClass.method()
2785    1   1    0 spoon.test.targeted.testclasses.Foo.Fii.Fuu.m()
2786    1   1    0 spoon.test.targeted.testclasses.Foo.Fii.Fuu.method()
2787    1   1    0 spoon.test.targeted.testclasses.InnerClassThisAccess.method()
2788    2   1    0 spoon.test.targeted.testclasses.InnerClassThisAccess.InnerClassForTest.method2()
2789    2   1    0 spoon.test.targeted.testclasses.InnerClassThisAccess.InnerClass.InnerClass(boolean)
2790    2   1    0 spoon.test.targeted.testclasses.InnerClassThisAccess.InnerClass.getB()
2791    8   1    0 spoon.test.targeted.testclasses.InnerClassThisAccess.otherMethod()
2792    2   1    0 spoon.test.targeted.testclasses.Pozole.Pozole(T)
2793    9   1    0 spoon.test.intercession.IntercessionTest.testInsertBegin()
2794   12   1    0 spoon.test.intercession.IntercessionTest.testInsertEnd()
2795   12   1    0 spoon.test.intercession.IntercessionTest.testEqualConstructor()
2796    5   1    0 spoon.test.intercession.IntercessionTest.test_setThrownExpression()
2797   20   1    0 spoon.test.intercession.IntercessionTest.testInsertIfIntercession()
2798   12   1    0 spoon.test.intercession.IntercessionTest.testInsertAfter()
2799    5   8    0 spoon.test.intercession.IntercessionTest.AbstractFilter$1.matches(CtMethod)
2800   25   8    0 spoon.test.intercession.IntercessionTest.testSettersAreAllGood()
2801    2   5    0 spoon.test.intercession.IntercessionTest.IntercessionScanner$1.isToBeProcessed(CtMethod)
2802    4   3    0 spoon.test.intercession.IntercessionTest.IntercessionScanner$1.takeSetterCollection(CtMethod)
2803   17   9    0 spoon.test.intercession.IntercessionTest.IntercessionScanner$1.process(CtMethod)
2804   15  11    0 spoon.test.intercession.IntercessionTest.IntercessionScanner$1.hasCallEmptyInv(CtBlock,Collection)
2805   10   1    1 spoon.test.intercession.IntercessionTest.IntercessionScanner$1.createCheckNull(CtParameter)
2806    2   1    0 spoon.test.intercession.IntercessionTest.IntercessionScanner$1.log(CtMethod,String)
2807   63   1    0 spoon.test.intercession.IntercessionTest.testResetCollectionInSetters()
2808    2   1    0 spoon.test.intercession.insertBefore.InsertBeforeExample.InsertBeforeExample()
2809    4   3    0 spoon.test.intercession.insertBefore.InsertBeforeExample.ifWithoutBraces()
2810    4   3    0 spoon.test.intercession.insertBefore.InsertBeforeExample.ifWithBraces()
2811   12   5    0 spoon.test.intercession.insertBefore.InsertBeforeExample.switchMethod()
2812    6   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.setup()
2813   12   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBefore()
2814   12   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfter()
2815    8   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBeforeWithoutBrace()
2816    8   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBeforeWithBrace()
2817    8   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterWithoutBrace()
2818    8   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterWithBrace()
2819   23   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBeforeSwitchCase()
2820   23   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterSwitchCase()
2821   17   1    0 spoon.test.intercession.insertBefore.InsertMethodsTest.insertBeforeAndUpdateParent()
2822    2   3    0 spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest.IntercessionScanner$1.isToBeProcessed(CtMethod)
2823    2   1    0 spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest.IntercessionScanner$1.process(CtMethod)
2824   15   1    0 spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest.data()
2825    6   2    0 spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest.testContract()
2826    7   1    0 spoon.test.intercession.IntercessionScanner.IntercessionScanner(Factory)
2827    1   1    0 spoon.test.intercession.IntercessionScanner.isToBeProcessed(CtMethod)
2828    1   1    0 spoon.test.intercession.IntercessionScanner.process(CtMethod)
2829    4   2    0 spoon.test.intercession.IntercessionScanner.visitCtMethod(T)
2830   12   9    0 spoon.test.intercession.IntercessionScanner.avoidThrowUnsupportedOperationException(CtMethod)
2831    2   1    0 spoon.test.intercession.IntercessionScanner.takeSetterForCtElement(CtMethod)
2832    2   1    0 spoon.test.intercession.IntercessionScanner.avoidInterfaces(CtMethod)
2833    9   2    0 spoon.test.intercession.RemoveTest.testRemoveAllStatements()
2834    8   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport()
2835   14   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImport()
2836    8   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImportNoAutoimport()
2837    9   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testInternalImportWhenNoClasspath()
2838   12   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport()
2839   16   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticStarredImportFromInterface()
2840   15   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticInheritedImport()
2841   14   1    0 spoon.test.jdtimportbuilder.ImportBuilderTest.testWithImportFromItf()
2842    2   1    0 spoon.test.jdtimportbuilder.testclasses.staticimport.Dependency.maMethod()
2843   27   1    0 spoon.test.javadoc.JavaDocTest.testJavaDocReprint()
2844    4   2    0 spoon.test.javadoc.JavaDocTest.CtScanner$1.scan(CtElement)
2845    3   1    0 spoon.test.javadoc.JavaDocTest.CtScanner$1.visitCtComment(CtComment)
2846   15   1    0 spoon.test.javadoc.JavaDocTest.testJavadocNotPresentInAST()
2847    5   1    0 spoon.test.javadoc.JavaDocTest.testBugSetContent()
2848    2   1    1 spoon.test.javadoc.testclasses.Bar.create(CtPackage,String)
2849    2   1    0 spoon.test.main.testclasses.Test.m(Parameter)
2850    8   1    0 spoon.test.compilation.CompilationTest.compileCommandLineTest()
2851   29   2    0 spoon.test.compilation.CompilationTest.compileTest()
2852   15   2    0 spoon.test.compilation.CompilationTest.testNewInstanceFromExistingClass()
2853   11   2    0 spoon.test.compilation.CompilationTest.testNewInstance()
2854    6   3    0 spoon.test.compilation.CompilationTest.Launcher$1.JDTBasedSpoonCompiler$1.JDTBatchCompiler$1.getCompilationUnits()
2855    8   1    0 spoon.test.compilation.CompilationTest.Launcher$1.JDTBasedSpoonCompiler$1.createBatchCompiler()
2856   10   1    0 spoon.test.compilation.CompilationTest.Launcher$1.createCompiler()
2857   19   2    0 spoon.test.compilation.CompilationTest.testFilterResourcesFile()
2858    6   3    0 spoon.test.compilation.CompilationTest.Launcher$1.JDTBasedSpoonCompiler$1.JDTBatchCompiler$1.getCompilationUnits()
2859    8   1    0 spoon.test.compilation.CompilationTest.Launcher$1.JDTBasedSpoonCompiler$1.createBatchCompiler()
2860   10   1    0 spoon.test.compilation.CompilationTest.Launcher$1.createCompiler()
2861   19   2    0 spoon.test.compilation.CompilationTest.testFilterResourcesDir()
2862   18   2    0 spoon.test.compilation.CompilationTest.testPrecompile()
2863   11   3    0 spoon.test.compilation.CompilationTest.testClassLoader()
2864   27   4    0 spoon.test.compilation.CompilationTest.testSingleClassLoader()
2865    3   1    0 spoon.test.compilation.CompilationTest.MyClassLoader.loadClass(String,boolean)
2866    3   2    0 spoon.test.compilation.CompilationTest.CtScanner$1.visitCtTypeReference(T)
2867   18   1    0 spoon.test.compilation.CompilationTest.testExoticClassLoader()
2868   11   1    0 spoon.test.compilation.CompilationTest.testURLClassLoader()
2869   12   2    0 spoon.test.compilation.CompilationTest.testURLClassLoaderWithOtherResourcesThanOnlyFiles()
2870   12   1    0 spoon.test.compilation.CompilationTest.testCompilationInEmptyDir()
2871    2   1    0 spoon.test.compilation.testclasses.Bar.m()
2872    1   1    0 spoon.test.compilation.testclasses.IBar.m()
2873    1   1    0 spoon.test.compilation.testclasses.Ifoo.foo()
2874   13   1    0 spoon.test.varargs.VarArgsTest.testModelBuildingInitializer()
2875    1   1    0 spoon.test.varargs.testclasses.VarArgsSample.foo(int,String)
2876   26   1    0 spoon.test.ctClass.CtClassTest.getConstructor()
2877   16   1    0 spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass()
2878   10   1    0 spoon.test.ctClass.CtClassTest.testNoClasspathWithSuperClassOfAClassInAnInterface()
2879   34   1    0 spoon.test.ctClass.CtClassTest.testAllTypeReferencesToALocalTypeShouldNotStartWithNumber()
2880   10   1    0 spoon.test.ctClass.CtClassTest.testSpoonShouldInferImplicitPackageInNoClasspath()
2881   11   1    0 spoon.test.ctClass.CtClassTest.testDefaultConstructorAreOk()
2882   15   1    0 spoon.test.ctClass.CtClassTest.testCloneAnonymousClassInvocation()
2883   15   1    0 spoon.test.ctClass.CtClassTest.testCloneAnonymousClassInvocationWithAutoimports()
2884    1   1    0 spoon.test.ctClass.testclasses.Foo.Foo(String)
2885    1   1    0 spoon.test.ctClass.testclasses.Foo.Foo(String[])
2886    1   1    0 spoon.test.ctClass.testclasses.Foo.Foo(String[][])
2887    2   1    0 spoon.test.ctClass.testclasses.AnonymousClass.Comparator$1.compare(Integer,Integer)
2888    2   1    0 spoon.test.ctClass.testclasses.issue1306.test.BooleanArrays.arrayOf(boolean)
2889    2   1    0 spoon.test.ctClass.testclasses.issue1306.test.BooleanArrays.emptyArray()
2890    1   1    0 spoon.test.ctClass.testclasses.issue1306.test.BooleanArrays.BooleanArrays()
2891    3   1    0 spoon.test.ctClass.testclasses.issue1306.internal.BooleanArraysBaseTest.setUp()
2892    2   1    1 spoon.test.ctClass.testclasses.issue1306.internal.BooleanArrays.instance()
2893    1   1    0 spoon.test.ctClass.testclasses.issue1306.internal.BooleanArrays.BooleanArrays()
2894    1   1    0 spoon.test.ctClass.testclasses.Pozole.Cook.Cook()
2895    2   1    0 spoon.test.ctClass.testclasses.Pozole.Cook.m()
2896    6   1    0 spoon.test.ctClass.testclasses.Pozole.m()
2897    2   1    0 spoon.test.logging.LogTest.data()
2898   12   1    0 spoon.test.logging.LogTest.testAllLevelsForLogs()
2899    1   1    0 spoon.test.method.testclasses.Methods.objectMethod1(T)
2900    1   1    0 spoon.test.method.testclasses.Methods.objectMethod2(T)
2901    1   1    0 spoon.test.method.testclasses.Methods.objectMethod3(U)
2902    1   1    0 spoon.test.method.testclasses.Methods.objectMethod4(Object)
2903    1   1    0 spoon.test.method.testclasses.Methods.stringMethod1(T)
2904    1   1    0 spoon.test.method.testclasses.Methods.stringMethod2(String)
2905    1   1    0 spoon.test.method.testclasses.Methods.stringMethod3(V)
2906    1   1    0 spoon.test.method.testclasses.Methods.listMethod1(T)
2907    1   1    0 spoon.test.method.testclasses.Methods.listMethod2(T)
2908    1   1    0 spoon.test.method.testclasses.Methods.listMethod3(T)
2909    1   1    0 spoon.test.method.testclasses.Methods.listMethod4(List)
2910    1   1    0 spoon.test.method.testclasses.Methods.listMethod5(List)
2911    1   1    0 spoon.test.method.testclasses.Methods.listMethod6(String)
2912    1   1    0 spoon.test.method.testclasses.Methods.listMethod7(String)
2913    1   1    0 spoon.test.method.testclasses.Methods.listMethod8(String)
2914    1   1    0 spoon.test.method.testclasses.Methods.listMethod9(T)
2915    1   1    0 spoon.test.method.testclasses.Tacos.method1(T)
2916    1   1    0 spoon.test.method.testclasses.Tacos.method1(T)
2917    1   1    0 spoon.test.method.testclasses.Tacos.method1(T)
2918   15   1    0 spoon.test.control.ControlTest.testModelBuildingFor()
2919    8   1    0 spoon.test.control.ControlTest.testModelBuildingDoWhile()
2920    4   2    0 spoon.test.control.testclasses.DoWhile.methode()
2921    2   2    0 spoon.test.control.testclasses.Fors.normalFor()
2922    2   2    0 spoon.test.control.testclasses.Fors.multipleInit()
2923    3   2    0 spoon.test.control.testclasses.Fors.empty1()
2924    3   2    0 spoon.test.control.testclasses.Fors.empty2()
2925   15   1    0 spoon.test.factory.ExecutableFactoryTest.testCreateReference()
2926   10   1    0 spoon.test.factory.FactoryTest.testClone()
2927    4   1    0 spoon.test.factory.FactoryTest.DefaultCoreFactory$1.createMethod()
2928    2   1    0 spoon.test.factory.FactoryTest.Launcher$1.createFactory()
2929   13   1    0 spoon.test.factory.FactoryTest.testFactoryOverriding()
2930   15   1    0 spoon.test.factory.FactoryTest.testClassAccessCreatedFromFactories()
2931    2   1    0 spoon.test.factory.FactoryTest.AbstractProcessor$1.process(CtType)
2932   28   2    0 spoon.test.factory.FactoryTest.testCtModel()
2933    1   1    0 spoon.test.factory.FactoryTest.testIncrementalModel()
2934    5   2    0 spoon.test.factory.FactoryTest.specificationCoreFactoryCreate()
2935   10   1    0 spoon.test.factory.AnnotationFactoryTest.testAnnotate()
2936   13   1    0 spoon.test.factory.TypeFactoryTest.testCreateTypeRef()
2937    6   1    0 spoon.test.factory.TypeFactoryTest.reflectionAPI()
2938    5   1    0 spoon.test.factory.TypeFactoryTest.reflectionAPIWithTypeParameter()
2939   11   1    0 spoon.test.factory.TypeFactoryTest.testGetClassInAnInterface()
2940    7   1    0 spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass()
2941    7   1    0 spoon.test.factory.ClassFactoryTest.testDeclaringClass()
2942    7   1    0 spoon.test.factory.ClassFactoryTest.testTopLevelClass()
2943    7   1    0 spoon.test.factory.CodeFactoryTest.testThisAccess()
2944   18   1    0 spoon.test.factory.ConstructorFactoryTest.testCreate()
2945    8   1    0 spoon.test.factory.ConstructorFactoryTest.testCreateDefault()
2946   14   1    0 spoon.test.factory.FieldFactoryTest.testCreate()
2947   15   1    0 spoon.test.factory.FieldFactoryTest.testCreateFromSource()
2948   10   1    0 spoon.test.reference.AnnotationFieldReferenceTest.testAnnotationFieldReference()
2949    3   1    0 spoon.test.reference.ElasticsearchStackoverflowTest.Scanner.visitCtExecutableReference(T)
2950   21   3    0 spoon.test.reference.ElasticsearchStackoverflowTest.testStackOverflow()
2951    1   1    0 spoon.test.reference.Foo.foo()
2952    1   1    0 spoon.test.reference.Sup.sup()
2953    2   1    0 spoon.test.reference.Enum.getFirst()
2954    5   1    0 spoon.test.reference.ExecutableReferenceGenericTest.setUp()
2955   13   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testReferencesBetweenConstructors()
2956   18   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testReferencesBetweenConstructorsInOtherClass()
2957    7   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testOneReferenceBetweenMethodsInSameClass()
2958   11   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testMultiReferenceBetweenMethodsWithGenericInSameClass()
2959    9   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testMultiReferencesBetweenMethodsWithoutGenericInSameClass()
2960    5   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testMethodWithoutReferences()
2961    5   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testMethodGenericWithoutReferences()
2962    9   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testOneReferenceWithGenericMethodOutOfTheClass()
2963    8   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testOneReferenceWithMethodNotGenericOutOfTheClass()
2964   10   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testMultiReferenceWithGenericMethodOutOfTheClass()
2965   11   1    0 spoon.test.reference.ExecutableReferenceGenericTest.testReferencesBetweenMethods()
2966    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.AbstractReferenceFilter$1.matches(CtExecutableReference)
2967    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.AbstractReferenceFilter$1.matches(CtExecutableReference)
2968   21   5    0 spoon.test.reference.ExecutableReferenceGenericTest.testExecutableReferences()
2969    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.Filter$1.matches(CtConstructor)
2970    4   1    0 spoon.test.reference.ExecutableReferenceGenericTest.getConstructorsByClass(String)
2971    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.AbstractReferenceFilter$1.matches(CtExecutableReference)
2972   11   7    0 spoon.test.reference.ExecutableReferenceGenericTest.getCtConstructorsByCtConstructor(CtConstructor)
2973    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.AbstractReferenceFilter$1.matches(CtExecutableReference)
2974    4   1    0 spoon.test.reference.ExecutableReferenceGenericTest.getCtConstructorsReferencedInCtConstructor(CtConstructor)
2975    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.Filter$1.matches(CtClass)
2976    4   1    0 spoon.test.reference.ExecutableReferenceGenericTest.getCtClassByName(String)
2977    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.getReferencesOfAMethod(CtMethod)
2978    2   1    0 spoon.test.reference.ExecutableReferenceGenericTest.getCtMethodByNameFromCtClass(CtClass,String)
2979    2   2    0 spoon.test.reference.ExecutableReferenceTest.ReferenceTypeFilter$1.matches(CtExecutableReference)
2980    2   2    0 spoon.test.reference.ExecutableReferenceTest.TypeFilter$1.matches(CtInvocation)
2981   40   1    0 spoon.test.reference.ExecutableReferenceTest.testCallMethodOfClassNotPresent()
2982   10   2    0 spoon.test.reference.ExecutableReferenceTest.testSuperClassInGetAllExecutables()
2983   16   1    0 spoon.test.reference.ExecutableReferenceTest.testSpecifyGetAllExecutablesMethod()
2984    5   2    0 spoon.test.reference.ExecutableReferenceTest.TypeFilter$1.matches(CtExecutable)
2985   12   1    0 spoon.test.reference.ExecutableReferenceTest.testCreateReferenceForAnonymousExecutable()
2986    2   2    0 spoon.test.reference.ExecutableReferenceTest.TypeFilter$1.matches(CtInvocation)
2987   10   1    0 spoon.test.reference.ExecutableReferenceTest.testInvokeEnumMethod()
2988    5   1    0 spoon.test.reference.ExecutableReferenceTest.testLambdaNoClasspath()
2989   17   1    0 spoon.test.reference.ExecutableReferenceTest.testHashcodeWorksWithReference()
2990   12   1    0 spoon.test.reference.ExecutableReferenceTest.testPbWithStream()
2991    1   1    0 spoon.test.reference.testclasses.MyClass3.methodI(T)
2992    1   1    0 spoon.test.reference.testclasses.MyClass3.methodII(T,K)
2993    1   1    0 spoon.test.reference.testclasses.EnumValue.EnumValue()
2994    2   1    0 spoon.test.reference.testclasses.EnumValue.asEnum()
2995    2   1    0 spoon.test.reference.testclasses.EnumValue.unwrap()
2996    2   1    0 spoon.test.reference.testclasses.MyClass.MyClass()
2997    2   1    0 spoon.test.reference.testclasses.MyClass.MyClass(String)
2998    1   1    0 spoon.test.reference.testclasses.MyClass.MyClass(String,int)
2999    2   1    0 spoon.test.reference.testclasses.MyClass.method1(T)
3000    2   1    0 spoon.test.reference.testclasses.MyClass.method1(T)
3001    4   1    0 spoon.test.reference.testclasses.MyClass.method2()
3002    3   1    0 spoon.test.reference.testclasses.MyClass.method3()
3003    1   1    0 spoon.test.reference.testclasses.MyClass.method4(String)
3004    1   1    0 spoon.test.reference.testclasses.MyClass.method5(S,String)
3005    2   1    0 spoon.test.reference.testclasses.Panini.Itr$1.output(K,V)
3006    4   1    0 spoon.test.reference.testclasses.Panini.entryIterator()
3007    2   1    0 spoon.test.reference.testclasses.Panini.Itr.next()
3008    2   1    0 spoon.test.reference.testclasses.Panini.Itr.hasNext()
3009    1   1    0 spoon.test.reference.testclasses.Panini.Itr.remove()
3010    1   1    0 spoon.test.reference.testclasses.Panini.Itr.output(K,V)
3011    1   1    0 spoon.test.reference.testclasses.Bar.Bar(int)
3012    2   1    0 spoon.test.reference.testclasses.Tacos.toSortedList()
3013    2   1    0 spoon.test.reference.testclasses.Burritos.m()
3014    3   1    0 spoon.test.reference.testclasses.MyClass2.MyClass2()
3015    2   1    0 spoon.test.reference.testclasses.MyClass2.methodA()
3016    2   1    0 spoon.test.reference.testclasses.MyClass2.methodB()
3017    3   1    0 spoon.test.reference.testclasses.MyClass2.methodC()
3018    2   1    0 spoon.test.reference.testclasses.MyClass2.methodD()
3019    2   1    0 spoon.test.reference.testclasses.MyClass2.methodE(String)
3020    1   1    0 spoon.test.reference.testclasses.MyClass2.methodF(int,String)
3021    1   1    0 spoon.test.reference.testclasses.Foo.m()
3022    2   1    0 spoon.test.reference.testclasses.Mole.make(Parameter)
3023    2   1    0 spoon.test.reference.testclasses.SuperAccess.method()
3024    1   1    0 spoon.test.reference.testclasses.Parent.method()
3025    2   1    0 spoon.test.reference.testclasses.FooBar.Foo$1.printString(String)
3026    4   1    0 spoon.test.reference.testclasses.FooBar.getFoo()
3027    2   1    0 spoon.test.reference.testclasses.FooBar.Bar$1.printString(String)
3028    4   1    0 spoon.test.reference.testclasses.FooBar.getBar()
3029    2   2    0 spoon.test.reference.testclasses.ParamRefs.ParamRefs(int)
3030    3   1    0 spoon.test.reference.testclasses.Tortillas.make(String)
3031    1   1    0 spoon.test.reference.testclasses.SuperFoo.m()
3032    2   1    0 spoon.test.reference.testclasses.Pozole.m()
3033    3   1    0 spoon.test.reference.testclasses.Pozole.m2()
3034    7   1    0 spoon.test.loop.LoopTest.testAnnotationInForLoop()
3035    7   1    0 spoon.test.loop.LoopTest.testForeachShouldHaveAlwaysABlockInItsBody()
3036    6   4    1 spoon.test.loop.testclasses.Join.Join(T)
3037    2   1    0 spoon.test.loop.testclasses.Join.conditionsIsNull()
3038    2   1    0 spoon.test.loop.testclasses.Join.notNull(T)
3039    2   1    1 spoon.test.loop.testclasses.Join.conditions()
3040    5   1    0 spoon.test.constructor.ConstructorTest.setUp()
3041    4   1    0 spoon.test.constructor.ConstructorTest.testImplicitConstructor()
3042    6   1    0 spoon.test.constructor.ConstructorTest.testTransformationOnConstructorWithInsertBegin()
3043    7   2    0 spoon.test.constructor.ConstructorTest.testTransformationOnConstructorWithInsertBefore()
3044    4   1    0 spoon.test.constructor.ConstructorTest.callParamConstructor()
3045    6   1    0 spoon.test.constructor.ConstructorTest.testConstructorCallFactory()
3046    8   1    0 spoon.test.constructor.ConstructorTest.testTypeAnnotationOnExceptionDeclaredInConstructors()
3047    7   1    0 spoon.test.constructor.ConstructorTest.testTypeAnnotationWithConstructorsOnFormalType()
3048   15   1    0 spoon.test.constructor.ConstructorTest.assertIntersectionTypeInConstructor(CtTypeReference)
3049    8   1    0 spoon.test.interfaces.InterfaceTest.setUp()
3050    6   1    0 spoon.test.interfaces.InterfaceTest.testDefaultMethodInInterface()
3051    4   1    0 spoon.test.interfaces.InterfaceTest.testDefaultMethodInConsumer()
3052    7   1    0 spoon.test.interfaces.InterfaceTest.testExtendsDefaultMethodInSubInterface()
3053    7   1    0 spoon.test.interfaces.InterfaceTest.testRedefinesDefaultMethodInSubInterface()
3054    7   1    0 spoon.test.interfaces.InterfaceTest.testExtendsStaticMethodInSubInterface()
3055    7   1    0 spoon.test.interfaces.InterfaceTest.testRedefinesStaticMethodInSubInterface()
3056   68   4    0 spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod()
3057   13   1    0 spoon.test.interfaces.TestInterfaceWithoutSetup.testInterfacePrettyPrinting()
3058    2   1    0 spoon.test.interfaces.testclasses.ExtendsStaticMethodInterface.getZoneId(String)
3059    1   1    0 spoon.test.interfaces.testclasses.RedefinesDefaultMethodInterface.getZonedDateTime(String)
3060    1   1    0 spoon.test.interfaces.testclasses.RedefinesStaticMethodInterface.getZoneId(String)
3061    8   1    0 spoon.test.initializers.InitializerTest.testModelBuildingStaticInitializer()
3062   15   1    0 spoon.test.initializers.InitializerTest.testModelBuildingInitializer()
3063    1   1    0 spoon.test.pkg.test_templates.FakeTemplate.FakeTemplate()
3064    3   2    0 spoon.test.pkg.processors.ElementProcessor.process(CtElement)
3065   11   2    0 spoon.processing.ProcessingTest.testInterruptAProcessor()
3066    5   1    0 spoon.processing.ProcessingTest.testSpoonTagger()
3067   13   1    0 spoon.reflect.visitor.CtInheritanceScannerMethodsTest.testMethodsInInheritanceScanner()
3068    2   1    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.CheckVisitorTestProcessor(T)
3069    2   5    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.isToBeProcessed(CtClass)
3070    9   3    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.process(CtClass)
3071    3   1    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.withScanners()
3072    3   1    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.withVisitors()
3073    6   6    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.checkPresenceScanMethods(CtVisitor,Object,boolean)
3074    6   6    0 spoon.reflect.visitor.processors.CheckVisitorTestProcessor.checkPresenceVisitMethods(CtVisitor,Object,boolean)
3075    2   6    0 spoon.reflect.visitor.processors.CheckScannerTestProcessor.isToBeProcessed(CtClass)
3076   13   5    0 spoon.reflect.visitor.processors.CheckScannerTestProcessor.process(CtClass)
3077    5   5    0 spoon.reflect.visitor.processors.CheckScannerTestProcessor.checkInvocation(String,CtStatement)
3078   13   1    0 spoon.reflect.visitor.CtVisitorTest.testMethodsInVisitor()
3079    6   5    0 spoon.reflect.visitor.CtInheritanceScannerTest.data()
3080   25  12    1 spoon.reflect.visitor.CtInheritanceScannerTest.getMethodToInvoke(Class)
3081   13   6    1 spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner()
3082    4   1    0 spoon.reflect.declaration.UnknownDeclarationTest.ExecutableReferenceVisitor.visitCtExecutableReference(T)
3083    9   1    0 spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls()
3084    2   1    0 spoon.reflect.declaration.testclasses.Subclass.compareTo(Object)
3085    2   2    0 spoon.reflect.declaration.testclasses.Subclass.foo()
3086    1   1    0 spoon.reflect.declaration.testclasses.ExtendsArrayList.m()
3087    1   1    0 spoon.reflect.declaration.testclasses.Subinterface.foo()
3088    2   1    0 spoon.reflect.declaration.CtTypeInformationTest.setUp()
3089   45   1    0 spoon.reflect.declaration.CtTypeInformationTest.testClassTypingContextContinueScanning()
3090    4   1    0 spoon.reflect.declaration.CtTypeInformationTest.getLastResolvedSuperclass(ClassTypingContext)
3091    8   1    0 spoon.reflect.declaration.CtTypeInformationTest.testGetAllMethodsReturnsTheRightNumber()
3092   23   1    0 spoon.reflect.declaration.CtTypeInformationTest.testGetSuperclass()
3093   11   3    0 spoon.reflect.declaration.CtTypeInformationTest.testGetAllMethodsWontReturnOverriddenMethod()
3094    9   1    0 spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElement()
3095    3   1    0 spoon.testing.CtElementAssertTest.testEqualityBetweenACtElementAndAString()
3096    2   1    0 spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent()
3097    2   1    0 spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent()
3098    6   1    0 spoon.testing.CtElementAssertTest.testEqualityBetweenTwoDifferentCtElement()
3099    3   1    0 spoon.testing.FileAssertTest.testEqualsBetweenTwoSameFile()
3100    2   1    0 spoon.testing.FileAssertTest.testEqualsBetweenTwoDifferentFile()
3101    1   1    0 spoon.testing.processors.FooToBarProcessor.FooToBarProcessor()
3102    2   1    0 spoon.testing.processors.FooToBarProcessor.isToBeProcessed(CtClass)
3103    2   1    0 spoon.testing.processors.FooToBarProcessor.process(CtClass)
3104    2   1    0 spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated()
3105    2   1    0 spoon.testing.AbstractAssertTest.testTransformationWithProcessorClass()
3106    2   1    0 spoon.testing.AbstractAssertTest.testTransformationWithProcessorName()
3107    2   1    0 spoon.testing.AbstractAssertTest.MyProcessor.process(CtField)
3108    6   1    0 spoon.testing.AbstractAssertTest.testTransformationFromCtElementWithProcessor()
3109   12   1    0 spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage()
3110    2   1    0 spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoDifferentCtPackage()
3111    5   1    0 spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackageWithDifferentTypes()
3112   19   2    0 spoon.testing.CtPackageAssertTest.testAddTypeToPackage()
3113    2   1    0 spoon.support.compiler.classpath.ComputeClasspathTest.Launcher$1.createCompiler(Factory)
3114    8   1    0 spoon.support.compiler.classpath.ComputeClasspathTest.setUp()
3115    3   1    0 spoon.support.compiler.classpath.ComputeClasspathTest.testSourceClasspath()
3116   13   4    0 spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest.testOrderCompilationUnits()
3117    9   2    0 spoon.support.compiler.jdt.ExtendedStringLiteralTest.Launcher$1.JDTBasedSpoonCompiler$1.JDTBatchCompiler$1.getUnits()
3118   11   1    0 spoon.support.compiler.jdt.ExtendedStringLiteralTest.Launcher$1.JDTBasedSpoonCompiler$1.createBatchCompiler()
3119   13   1    0 spoon.support.compiler.jdt.ExtendedStringLiteralTest.Launcher$1.createCompiler()
3120   22   1    0 spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral()
3121   16   1    0 spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder()
3122   10   1    0 spoon.support.compiler.jdt.JDTBatchCompilerTest.testCompileGeneratedJavaFile()
3123    1   1    1 spoon.SpoonAPI.run(String[])
3124    1   1    1 spoon.SpoonAPI.addInputResource(String)
3125    1   1    1 spoon.SpoonAPI.setSourceOutputDirectory(String)
3126    1   1    1 spoon.SpoonAPI.setSourceOutputDirectory(File)
3127    1   1    1 spoon.SpoonAPI.setOutputFilter(CtType)
3128    1   1    1 spoon.SpoonAPI.setOutputFilter(String)
3129    1   1    1 spoon.SpoonAPI.setBinaryOutputDirectory(String)
3130    1   1    1 spoon.SpoonAPI.setBinaryOutputDirectory(File)
3131    1   1    1 spoon.SpoonAPI.addProcessor(String)
3132    1   1    0 spoon.SpoonAPI.addProcessor(T)
3133    1   1    1 spoon.SpoonAPI.buildModel()
3134    1   1    1 spoon.SpoonAPI.process()
3135    1   1    1 spoon.SpoonAPI.prettyprint()
3136    1   1    1 spoon.SpoonAPI.run()
3137    1   1    1 spoon.SpoonAPI.getFactory()
3138    1   1    1 spoon.SpoonAPI.getEnvironment()
3139    1   1    1 spoon.SpoonAPI.createFactory()
3140    1   1    1 spoon.SpoonAPI.createEnvironment()
3141    1   1    1 spoon.SpoonAPI.createCompiler()
3142    1   1    1 spoon.SpoonAPI.getModel()
3143    1   1    0 spoon.SpoonException.SpoonException()
3144    2   1    0 spoon.SpoonException.SpoonException(String)
3145    2   1    0 spoon.SpoonException.SpoonException(Throwable)
3146    2   1    0 spoon.SpoonException.SpoonException(String,Throwable)
3147    1   1    1 spoon.SpoonModelBuilder.build()
3148    1   1    1 spoon.SpoonModelBuilder.build(JDTBuilder)
3149    1   1    1 spoon.SpoonModelBuilder.InputType.initializeCompiler(JDTBatchCompiler)
3150    1   1    1 spoon.SpoonModelBuilder.compile(InputType)
3151    1   1    1 spoon.SpoonModelBuilder.instantiateAndProcess(String)
3152    1   1    1 spoon.SpoonModelBuilder.process(CtElement)
3153    1   1    1 spoon.SpoonModelBuilder.generateProcessedSourceFiles(OutputType)
3154    1   1    1 spoon.SpoonModelBuilder.generateProcessedSourceFiles(OutputType,CtType)
3155    1   1    1 spoon.SpoonModelBuilder.addInputSource(File)
3156    1   1    1 spoon.SpoonModelBuilder.addInputSource(SpoonResource)
3157    1   1    1 spoon.SpoonModelBuilder.addInputSources(SpoonResource)
3158    1   1    1 spoon.SpoonModelBuilder.getInputSources()
3159    1   1    1 spoon.SpoonModelBuilder.addTemplateSource(File)
3160    1   1    1 spoon.SpoonModelBuilder.addTemplateSource(SpoonResource)
3161    1   1    1 spoon.SpoonModelBuilder.addTemplateSources(SpoonResource)
3162    1   1    1 spoon.SpoonModelBuilder.getTemplateSources()
3163    1   1    1 spoon.SpoonModelBuilder.getSourceOutputDirectory()
3164    1   1    1 spoon.SpoonModelBuilder.setBinaryOutputDirectory(File)
3165    1   1    1 spoon.SpoonModelBuilder.getBinaryOutputDirectory()
3166    1   1    1 spoon.SpoonModelBuilder.getSourceClasspath()
3167    1   1    1 spoon.SpoonModelBuilder.setSourceClasspath(String)
3168    1   1    1 spoon.SpoonModelBuilder.getTemplateClasspath()
3169    1   1    1 spoon.SpoonModelBuilder.setTemplateClasspath(String)
3170    1   1    1 spoon.SpoonModelBuilder.getFactory()
3171    1   1    1 spoon.SpoonModelBuilder.addCompilationUnitFilter(CompilationUnitFilter)
3172    1   1    1 spoon.SpoonModelBuilder.removeCompilationUnitFilter(CompilationUnitFilter)
3173    1   1    1 spoon.SpoonModelBuilder.getCompilationUnitFilter()
3174    8   6    1 spoon.processing.AbstractProcessor.AbstractProcessor()
3175    2   1    1 spoon.processing.AbstractProcessor.addProcessedElementType(CtElement)
3176    2   1    1 spoon.processing.AbstractProcessor.clearProcessedElementType()
3177    2   1    0 spoon.processing.AbstractProcessor.getEnvironment()
3178    2   1    0 spoon.processing.AbstractProcessor.getFactory()
3179    2   1    0 spoon.processing.AbstractProcessor.getProcessedElementTypes()
3180    8   2    1 spoon.processing.AbstractProcessor.loadProperties()
3181    2   1    0 spoon.processing.AbstractProcessor.getTraversalStrategy()
3182    2   1    0 spoon.processing.AbstractProcessor.init()
3183    2   1    0 spoon.processing.AbstractProcessor.isToBeProcessed(E)
3184    2   1    1 spoon.processing.AbstractProcessor.initProperties(ProcessorProperties)
3185    1   1    1 spoon.processing.AbstractProcessor.process()
3186    1   1    0 spoon.processing.AbstractProcessor.processingDone()
3187    2   1    1 spoon.processing.AbstractProcessor.removeProcessedElementType(CtElement)
3188    2   1    0 spoon.processing.AbstractProcessor.setFactory(Factory)
3189    2   2    0 spoon.processing.AbstractProcessor.interrupt()
3190    8   5    0 spoon.processing.ProcessorPropertiesImpl.get(T,String)
3191    2   1    0 spoon.processing.ProcessorPropertiesImpl.set(String,Object)
3192    2   1    1 spoon.processing.ProcessorPropertiesImpl.getProcessorName()
3193    1   1    1 spoon.processing.FactoryAccessor.getFactory()
3194    1   1    1 spoon.processing.FactoryAccessor.setFactory(Factory)
3195   14  10    1 spoon.processing.AbstractAnnotationProcessor.AbstractAnnotationProcessor()
3196    3   1    1 spoon.processing.AbstractAnnotationProcessor.addConsumedAnnotationType(A)
3197    2   1    1 spoon.processing.AbstractAnnotationProcessor.addProcessedAnnotationType(A)
3198    2   1    1 spoon.processing.AbstractAnnotationProcessor.removeProcessedAnnotationType(A)
3199    2   1    1 spoon.processing.AbstractAnnotationProcessor.clearProcessedAnnotationTypes()
3200    2   1    1 spoon.processing.AbstractAnnotationProcessor.clearConsumedAnnotationTypes()
3201    2   1    1 spoon.processing.AbstractAnnotationProcessor.removeConsumedAnnotationType(A)
3202    2   1    0 spoon.processing.AbstractAnnotationProcessor.getConsumedAnnotationTypes()
3203    2   1    0 spoon.processing.AbstractAnnotationProcessor.getProcessedAnnotationTypes()
3204    2   1    0 spoon.processing.AbstractAnnotationProcessor.inferConsumedAnnotationType()
3205    6   6    1 spoon.processing.AbstractAnnotationProcessor.isToBeProcessed(E)
3206    8   5    0 spoon.processing.AbstractAnnotationProcessor.process(E)
3207    2   1    1 spoon.processing.AbstractAnnotationProcessor.shoudBeConsumed(Annotation)
3208    2   1    0 spoon.processing.AbstractAnnotationProcessor.shoudBeProcessed(Annotation)
3209    1   1    0 spoon.processing.ProcessInterruption.ProcessInterruption()
3210    2   1    0 spoon.processing.ProcessInterruption.ProcessInterruption(String)
3211    2   1    0 spoon.processing.ProcessInterruption.ProcessInterruption(String,Throwable)
3212    2   1    0 spoon.processing.ProcessInterruption.ProcessInterruption(Throwable)
3213    1   1    1 spoon.processing.ProcessingManager.addProcessor(Processor)
3214    1   1    1 spoon.processing.ProcessingManager.addProcessor(Processor)
3215    1   1    1 spoon.processing.ProcessingManager.addProcessor(String)
3216    1   1    1 spoon.processing.ProcessingManager.getProcessors()
3217    1   1    1 spoon.processing.ProcessingManager.process(CtElement)
3218    1   1    1 spoon.processing.ProcessingManager.process(CtElement)
3219    2   1    0 spoon.processing.SpoonTagger.process()
3220    1   1    1 spoon.processing.Processor.getTraversalStrategy()
3221    1   1    1 spoon.processing.Processor.getEnvironment()
3222    1   1    1 spoon.processing.Processor.isToBeProcessed(E)
3223    1   1    1 spoon.processing.Processor.process(E)
3224    1   1    1 spoon.processing.Processor.process()
3225    1   1    1 spoon.processing.Processor.getProcessedElementTypes()
3226    1   1    1 spoon.processing.Processor.processingDone()
3227    1   1    1 spoon.processing.Processor.init()
3228    1   1    1 spoon.processing.Processor.initProperties(ProcessorProperties)
3229    1   1    1 spoon.processing.Processor.interrupt()
3230    1   1    1 spoon.processing.AbstractProblemFixer.AbstractProblemFixer()
3231    2   1    0 spoon.processing.AbstractProblemFixer.getFactory()
3232    2   1    0 spoon.processing.AbstractProblemFixer.setFactory(Factory)
3233    1   1    1 spoon.processing.AbstractManualProcessor.AbstractManualProcessor()
3234    1   1    1 spoon.processing.AbstractManualProcessor.addProcessedElementType(CtElement)
3235    2   1    0 spoon.processing.AbstractManualProcessor.getEnvironment()
3236    2   1    0 spoon.processing.AbstractManualProcessor.getFactory()
3237    2   1    1 spoon.processing.AbstractManualProcessor.getProcessedElementTypes()
3238    2   1    1 spoon.processing.AbstractManualProcessor.getTraversalStrategy()
3239    1   1    0 spoon.processing.AbstractManualProcessor.init()
3240    2   1    1 spoon.processing.AbstractManualProcessor.isPrivileged()
3241    2   1    1 spoon.processing.AbstractManualProcessor.isToBeProcessed(CtElement)
3242    1   1    1 spoon.processing.AbstractManualProcessor.process(CtElement)
3243    1   1    0 spoon.processing.AbstractManualProcessor.processingDone()
3244    2   1    0 spoon.processing.AbstractManualProcessor.setFactory(Factory)
3245    2   1    0 spoon.processing.AbstractManualProcessor.initProperties(ProcessorProperties)
3246    2   2    0 spoon.processing.AbstractManualProcessor.interrupt()
3247    1   1    1 spoon.processing.AnnotationProcessor.process(A,E)
3248    1   1    1 spoon.processing.AnnotationProcessor.getProcessedAnnotationTypes()
3249    1   1    1 spoon.processing.AnnotationProcessor.getConsumedAnnotationTypes()
3250    1   1    1 spoon.processing.AnnotationProcessor.inferConsumedAnnotationType()
3251    1   1    1 spoon.processing.AnnotationProcessor.shoudBeConsumed(Annotation)
3252    1   1    0 spoon.processing.ProcessorProperties.get(T,String)
3253    1   1    1 spoon.processing.ProcessorProperties.set(String,Object)
3254    1   1    1 spoon.processing.ProcessorProperties.getProcessorName()
3255    1   1    1 spoon.processing.ProblemFixer.getDescription()
3256    1   1    1 spoon.processing.ProblemFixer.getLabel()
3257    1   1    1 spoon.processing.ProblemFixer.run(T)
3258    1   1    1 spoon.processing.FileGenerator.getOutputDirectory()
3259    1   1    1 spoon.processing.FileGenerator.getCreatedFiles()
3260    2   1    1 spoon.MavenLauncher.getPomFile()
3261    2   1    1 spoon.MavenLauncher.MavenLauncher(String,SOURCE_TYPE)
3262    2   1    1 spoon.MavenLauncher.MavenLauncher(String,SOURCE_TYPE,boolean)
3263    2   1    1 spoon.MavenLauncher.MavenLauncher(String,SOURCE_TYPE,String)
3264    5   1    1 spoon.MavenLauncher.MavenLauncher(String,SOURCE_TYPE,String,boolean)
3265    3   1    1 spoon.MavenLauncher.MavenLauncher(String,SOURCE_TYPE,String[])
3266   19  12    0 spoon.MavenLauncher.init(String,String[])
3267    1   1    1 spoon.reflect.CtModel.getRootPackage()
3268    1   1    1 spoon.reflect.CtModel.getAllTypes()
3269    1   1    1 spoon.reflect.CtModel.getAllPackages()
3270    1   1    1 spoon.reflect.CtModel.getUnnamedModule()
3271    1   1    1 spoon.reflect.CtModel.getAllModules()
3272    1   1    1 spoon.reflect.CtModel.processWith(Processor)
3273    1   1    0 spoon.reflect.CtModel.getElements(E)
3274    1   1    1 spoon.reflect.CtModel.isBuildModelFinished()
3275    1   1    0 spoon.reflect.CtModel.setBuildModelIsFinished(boolean)
3276    1   1    1 spoon.reflect.ModelStreamer.save(Factory,OutputStream)
3277    1   1    1 spoon.reflect.ModelStreamer.load(InputStream)
3278    1   1    1 spoon.reflect.Changes.Changes()
3279    4   2    1 spoon.reflect.Changes.getAdded()
3280    4   2    1 spoon.reflect.Changes.getRemoved()
3281    4   2    1 spoon.reflect.Changes.getModified()
3282    2   2    1 spoon.reflect.Changes.hasAdded()
3283    2   2    1 spoon.reflect.Changes.hasModified()
3284    2   2    1 spoon.reflect.Changes.hasRemoved()
3285    1   1    1 spoon.reflect.cu.SourcePosition.isValidPosition()
3286    1   1    1 spoon.reflect.cu.SourcePosition.toString()
3287    1   1    1 spoon.reflect.cu.SourcePosition.getFile()
3288    1   1    1 spoon.reflect.cu.SourcePosition.getCompilationUnit()
3289    1   1    1 spoon.reflect.cu.SourcePosition.getLine()
3290    1   1    1 spoon.reflect.cu.SourcePosition.getEndLine()
3291    1   1    1 spoon.reflect.cu.SourcePosition.getColumn()
3292    1   1    1 spoon.reflect.cu.SourcePosition.getEndColumn()
3293    1   1    1 spoon.reflect.cu.SourcePosition.getSourceEnd()
3294    1   1    1 spoon.reflect.cu.SourcePosition.getSourceStart()
3295    1   1    0 spoon.reflect.cu.position.DeclarationSourcePosition.getModifierSourceStart()
3296    1   1    0 spoon.reflect.cu.position.DeclarationSourcePosition.getModifierSourceEnd()
3297    1   1    0 spoon.reflect.cu.position.CompoundSourcePosition.getNameStart()
3298    1   1    0 spoon.reflect.cu.position.CompoundSourcePosition.getNameEnd()
3299    2   1    0 spoon.reflect.cu.position.NoSourcePosition.getFile()
3300    2   1    0 spoon.reflect.cu.position.NoSourcePosition.getCompilationUnit()
3301    2   1    0 spoon.reflect.cu.position.NoSourcePosition.isValidPosition()
3302    2   2    0 spoon.reflect.cu.position.NoSourcePosition.getLine()
3303    2   2    0 spoon.reflect.cu.position.NoSourcePosition.getEndLine()
3304    2   2    0 spoon.reflect.cu.position.NoSourcePosition.getColumn()
3305    2   2    0 spoon.reflect.cu.position.NoSourcePosition.getEndColumn()
3306    2   2    0 spoon.reflect.cu.position.NoSourcePosition.getSourceEnd()
3307    2   2    0 spoon.reflect.cu.position.NoSourcePosition.getSourceStart()
3308    2   1    0 spoon.reflect.cu.position.NoSourcePosition.toString()
3309    1   1    0 spoon.reflect.cu.position.BodyHolderSourcePosition.getBodyStart()
3310    1   1    0 spoon.reflect.cu.position.BodyHolderSourcePosition.getBodyEnd()
3311    1   1    1 spoon.reflect.cu.CompilationUnit.beginOfLineIndex(int)
3312    1   1    1 spoon.reflect.cu.CompilationUnit.nextLineIndex(int)
3313    1   1    1 spoon.reflect.cu.CompilationUnit.getTabCount(int)
3314    2   1    0 spoon.reflect.path.impl.CtRolePathElement.CtRolePathElement(CtRole)
3315    2   1    0 spoon.reflect.path.impl.CtRolePathElement.getRole()
3316    2   1    0 spoon.reflect.path.impl.CtRolePathElement.toString()
3317   12   9    0 spoon.reflect.path.impl.CtRolePathElement.getFromSet(Collection,String)
3318   52  18    0 spoon.reflect.path.impl.CtRolePathElement.getElements(CtElement)
3319    1   1    1 spoon.reflect.path.impl.CtPathElement.getElements(P)
3320    1   1    0 spoon.reflect.path.impl.CtPathElement.addArgument(String,String)
3321    2   1    0 spoon.reflect.path.impl.CtNamedPathElement.CtNamedPathElement(String)
3322    8   5    0 spoon.reflect.path.impl.CtNamedPathElement.CtNamedPathElement(String,boolean)
3323    2   1    0 spoon.reflect.path.impl.CtNamedPathElement.canBeRegExpPattern(String)
3324    2   1    0 spoon.reflect.path.impl.CtNamedPathElement.getPattern()
3325    2   1    0 spoon.reflect.path.impl.CtNamedPathElement.toString()
3326    5   2    0 spoon.reflect.path.impl.CtNamedPathElement.getElements(CtElement)
3327    7   2    0 spoon.reflect.path.impl.CtNamedPathElement.scanElements(CtElement)
3328    1   1    0 spoon.reflect.path.impl.CtNamedPathElement.NameScanner.NameScanner()
3329   12   9    0 spoon.reflect.path.impl.CtNamedPathElement.NameScanner.scanCtElement(CtElement)
3330    4   4    0 spoon.reflect.path.impl.CtNamedPathElement.NameScanner.matchPattern(String)
3331    4   2    0 spoon.reflect.path.impl.CtNamedPathElement.NameScanner.recurse(CtElement)
3332    2   1    0 spoon.reflect.path.impl.CtNamedPathElement.NameScanner.getResults()
3333    6   3    0 spoon.reflect.path.impl.CtNamedPathElement.getSignature(CtExecutable)
3334    2   1    0 spoon.reflect.path.impl.CtPathImpl.getElements()
3335    5   2    0 spoon.reflect.path.impl.CtPathImpl.evaluateOn(CtElement)
3336   11   3    0 spoon.reflect.path.impl.CtPathImpl.relativePath(CtElement)
3337    3   1    0 spoon.reflect.path.impl.CtPathImpl.addFirst(CtPathElement)
3338    3   1    0 spoon.reflect.path.impl.CtPathImpl.addLast(CtPathElement)
3339    5   2    0 spoon.reflect.path.impl.CtPathImpl.toString()
3340    2   1    0 spoon.reflect.path.impl.CtTypedNameElement.CtTypedNameElement(T)
3341    2   1    0 spoon.reflect.path.impl.CtTypedNameElement.getType()
3342    2   1    0 spoon.reflect.path.impl.CtTypedNameElement.toString()
3343    7   4    0 spoon.reflect.path.impl.CtTypedNameElement.getElements(P)
3344    2   2    0 spoon.reflect.path.impl.CtTypedNameElement.match(CtElement)
3345    2   1    0 spoon.reflect.path.impl.AbstractPathElement.getArguments()
3346    3   1    0 spoon.reflect.path.impl.AbstractPathElement.addArgument(String,String)
3347    2   1    0 spoon.reflect.path.impl.AbstractPathElement.CtScanner$1.scan(CtElement)
3348    7   2    0 spoon.reflect.path.impl.AbstractPathElement.getChildren(CtElement)
3349   10   5    0 spoon.reflect.path.impl.AbstractPathElement.getParamString()
3350    1   1    0 spoon.reflect.path.CtPath.evaluateOn(CtElement)
3351    1   1    1 spoon.reflect.path.CtPath.relativePath(CtElement)
3352    7   3    1 spoon.reflect.path.CtPathBuilder.name(String,String[])
3353    2   1    1 spoon.reflect.path.CtPathBuilder.wildcard()
3354    2   1    1 spoon.reflect.path.CtPathBuilder.recursiveWildcard()
3355    7   3    1 spoon.reflect.path.CtPathBuilder.type(T,String[])
3356    7   3    1 spoon.reflect.path.CtPathBuilder.role(CtRole,String[])
3357    5   2    1 spoon.reflect.path.CtPathBuilder.build()
3358    8   8    0 spoon.reflect.path.CtPathStringBuilder.load(String)
3359   35  17    1 spoon.reflect.path.CtPathStringBuilder.fromString(String)
3360   23  14    1 spoon.reflect.path.CtPathStringBuilder.parseArgumentValue(Tokenizer,String,CtPathElement)
3361    4   1    0 spoon.reflect.path.CtPathStringBuilder.Tokenizer.Tokenizer(String)
3362    8   6    0 spoon.reflect.path.CtPathStringBuilder.Tokenizer.getNextToken(String)
3363    1   1    0 spoon.reflect.path.CtPathException.CtPathException()
3364    2   1    0 spoon.reflect.path.CtPathException.CtPathException(Throwable)
3365    2   1    0 spoon.reflect.path.CtPathException.CtPathException(String)
3366    2   1    1 spoon.reflect.path.CtElementPathBuilder.fromElement(CtElement)
3367   73  28    1 spoon.reflect.path.CtElementPathBuilder.fromElement(CtElement,CtElement)
3368   13   4    0 spoon.reflect.path.CtElementPathBuilder.getArg(CtElement)
3369    6   3    0 spoon.reflect.path.CtElementPathBuilder.getSignature(CtExecutable)
3370    3   1    1 spoon.reflect.path.CtElementPathBuilder.setUseNamesInPath(boolean)
3371    1   1    1 spoon.reflect.code.CtLambda.getExpression()
3372    1   1    1 spoon.reflect.code.CtLambda.getOverriddenMethod()
3373    1   1    1 spoon.reflect.code.CtLambda.setExpression(T)
3374    1   1    0 spoon.reflect.code.CtLambda.clone()
3375    1   1    0 spoon.reflect.code.CtLambda.setThrownTypes(Throwable)
3376    1   1    0 spoon.reflect.code.CtCatchVariable.getReference()
3377    1   1    0 spoon.reflect.code.CtCatchVariable.clone()
3378    1   1    0 spoon.reflect.code.CtCatchVariable.setDefaultExpression(T)
3379    1   1    1 spoon.reflect.code.CtCatchVariable.getType()
3380    1   1    0 spoon.reflect.code.CtCatchVariable.setType(T)
3381    1   1    1 spoon.reflect.code.CtTargetedExpression.getTarget()
3382    1   1    1 spoon.reflect.code.CtTargetedExpression.setTarget(E)
3383    1   1    0 spoon.reflect.code.CtTargetedExpression.clone()
3384    1   1    0 spoon.reflect.code.CtBreak.clone()
3385    1   1    1 spoon.reflect.code.CtExpression.getTypeCasts()
3386    1   1    1 spoon.reflect.code.CtExpression.setTypeCasts(CtTypeReference)
3387    1   1    1 spoon.reflect.code.CtExpression.addTypeCast(CtTypeReference)
3388    1   1    0 spoon.reflect.code.CtExpression.clone()
3389    1   1    1 spoon.reflect.code.CtAbstractInvocation.getArguments()
3390    1   1    1 spoon.reflect.code.CtAbstractInvocation.addArgument(CtExpression)
3391    1   1    1 spoon.reflect.code.CtAbstractInvocation.removeArgument(CtExpression)
3392    1   1    1 spoon.reflect.code.CtAbstractInvocation.setArguments(CtExpression)
3393    1   1    1 spoon.reflect.code.CtAbstractInvocation.getExecutable()
3394    1   1    1 spoon.reflect.code.CtAbstractInvocation.setExecutable(T)
3395    1   1    1 spoon.reflect.code.CtDo.getLoopingExpression()
3396    1   1    1 spoon.reflect.code.CtDo.setLoopingExpression(Boolean)
3397    1   1    0 spoon.reflect.code.CtDo.clone()
3398    1   1    1 spoon.reflect.code.CtFor.getExpression()
3399    1   1    1 spoon.reflect.code.CtFor.setExpression(Boolean)
3400    1   1    1 spoon.reflect.code.CtFor.getForInit()
3401    1   1    1 spoon.reflect.code.CtFor.addForInit(CtStatement)
3402    1   1    1 spoon.reflect.code.CtFor.setForInit(CtStatement)
3403    1   1    1 spoon.reflect.code.CtFor.removeForInit(CtStatement)
3404    1   1    1 spoon.reflect.code.CtFor.getForUpdate()
3405    1   1    1 spoon.reflect.code.CtFor.addForUpdate(CtStatement)
3406    1   1    1 spoon.reflect.code.CtFor.setForUpdate(CtStatement)
3407    1   1    1 spoon.reflect.code.CtFor.removeForUpdate(CtStatement)
3408    1   1    0 spoon.reflect.code.CtFor.clone()
3409    1   1    1 spoon.reflect.code.CtLoop.getBody()
3410    1   1    0 spoon.reflect.code.CtLoop.clone()
3411    1   1    1 spoon.reflect.code.CtTry.getCatchers()
3412    1   1    1 spoon.reflect.code.CtTry.setCatchers(CtCatch)
3413    1   1    1 spoon.reflect.code.CtTry.addCatcher(CtCatch)
3414    1   1    1 spoon.reflect.code.CtTry.removeCatcher(CtCatch)
3415    1   1    1 spoon.reflect.code.CtTry.getBody()
3416    1   1    1 spoon.reflect.code.CtTry.getFinalizer()
3417    1   1    1 spoon.reflect.code.CtTry.setFinalizer(CtBlock)
3418    1   1    0 spoon.reflect.code.CtTry.clone()
3419    1   1    1 spoon.reflect.code.CtTryWithResource.getResources()
3420    1   1    1 spoon.reflect.code.CtTryWithResource.setResources(CtLocalVariable)
3421    1   1    1 spoon.reflect.code.CtTryWithResource.addResource(CtLocalVariable)
3422    1   1    1 spoon.reflect.code.CtTryWithResource.removeResource(CtLocalVariable)
3423    1   1    0 spoon.reflect.code.CtTryWithResource.clone()
3424    1   1    0 spoon.reflect.code.CtThisAccess.clone()
3425    1   1    0 spoon.reflect.code.CtFieldRead.clone()
3426    1   1    1 spoon.reflect.code.CtRHSReceiver.getAssignment()
3427    1   1    1 spoon.reflect.code.CtRHSReceiver.setAssignment(A)
3428    1   1    0 spoon.reflect.code.CtBlock.clone()
3429    1   1    1 spoon.reflect.code.CtIf.getCondition()
3430    1   1    1 spoon.reflect.code.CtIf.getElseStatement()
3431    1   1    1 spoon.reflect.code.CtIf.getThenStatement()
3432    1   1    1 spoon.reflect.code.CtIf.setCondition(Boolean)
3433    1   1    1 spoon.reflect.code.CtIf.setElseStatement(CtStatement)
3434    1   1    1 spoon.reflect.code.CtIf.setThenStatement(CtStatement)
3435    1   1    0 spoon.reflect.code.CtIf.clone()
3436    1   1    0 spoon.reflect.code.CtFieldWrite.clone()
3437    1   1    1 spoon.reflect.code.CtUnaryOperator.getOperand()
3438    1   1    1 spoon.reflect.code.CtUnaryOperator.setOperand(T)
3439    1   1    1 spoon.reflect.code.CtUnaryOperator.setKind(UnaryOperatorKind)
3440    1   1    1 spoon.reflect.code.CtUnaryOperator.getKind()
3441    1   1    0 spoon.reflect.code.CtUnaryOperator.clone()
3442    1   1    0 spoon.reflect.code.CtContinue.clone()
3443    1   1    0 spoon.reflect.code.CtStatement.insertAfter(CtStatement)
3444    1   1    0 spoon.reflect.code.CtStatement.insertAfter(CtStatementList)
3445    1   1    0 spoon.reflect.code.CtStatement.insertBefore(CtStatement)
3446    1   1    0 spoon.reflect.code.CtStatement.insertBefore(CtStatementList)
3447    1   1    1 spoon.reflect.code.CtStatement.getLabel()
3448    1   1    1 spoon.reflect.code.CtStatement.setLabel(String)
3449    1   1    0 spoon.reflect.code.CtStatement.clone()
3450    1   1    1 spoon.reflect.code.CtInvocation.getActualTypeArguments()
3451    1   1    1 spoon.reflect.code.CtInvocation.setActualTypeArguments(CtTypeReference)
3452    1   1    1 spoon.reflect.code.CtInvocation.addActualTypeArgument(CtTypeReference)
3453    1   1    1 spoon.reflect.code.CtInvocation.getType()
3454    1   1    0 spoon.reflect.code.CtInvocation.clone()
3455    1   1    1 spoon.reflect.code.CtAssert.getAssertExpression()
3456    1   1    1 spoon.reflect.code.CtAssert.setAssertExpression(Boolean)
3457    1   1    1 spoon.reflect.code.CtAssert.getExpression()
3458    1   1    1 spoon.reflect.code.CtAssert.setExpression(T)
3459    1   1    0 spoon.reflect.code.CtAssert.clone()
3460    1   1    0 spoon.reflect.code.CtVariableRead.clone()
3461    1   1    1 spoon.reflect.code.CtNewArray.getDimensionExpressions()
3462    1   1    1 spoon.reflect.code.CtNewArray.setDimensionExpressions(Integer)
3463    1   1    1 spoon.reflect.code.CtNewArray.addDimensionExpression(Integer)
3464    1   1    1 spoon.reflect.code.CtNewArray.removeDimensionExpression(Integer)
3465    1   1    1 spoon.reflect.code.CtNewArray.getElements()
3466    1   1    1 spoon.reflect.code.CtNewArray.setElements(CtExpression)
3467    1   1    1 spoon.reflect.code.CtNewArray.addElement(CtExpression)
3468    1   1    1 spoon.reflect.code.CtNewArray.removeElement(CtExpression)
3469    1   1    0 spoon.reflect.code.CtNewArray.clone()
3470    1   1    1 spoon.reflect.code.CtSynchronized.getExpression()
3471    1   1    1 spoon.reflect.code.CtSynchronized.setExpression(CtExpression)
3472    1   1    1 spoon.reflect.code.CtSynchronized.getBlock()
3473    1   1    1 spoon.reflect.code.CtSynchronized.setBlock(CtBlock)
3474    1   1    0 spoon.reflect.code.CtSynchronized.clone()
3475    1   1    0 spoon.reflect.code.CtFieldAccess.getVariable()
3476    1   1    0 spoon.reflect.code.CtFieldAccess.clone()
3477    2   2    0 spoon.reflect.code.CtJavaDocTag.TagType.hasParam()
3478    5   4    0 spoon.reflect.code.CtJavaDocTag.TagType.tagFromName(String)
3479    2   1    0 spoon.reflect.code.CtJavaDocTag.TagType.toString()
3480    1   1    1 spoon.reflect.code.CtJavaDocTag.getType()
3481    1   1    1 spoon.reflect.code.CtJavaDocTag.setType(String)
3482    1   1    1 spoon.reflect.code.CtJavaDocTag.setType(TagType)
3483    1   1    1 spoon.reflect.code.CtJavaDocTag.getContent()
3484    1   1    1 spoon.reflect.code.CtJavaDocTag.setContent(String)
3485    1   1    1 spoon.reflect.code.CtJavaDocTag.getParam()
3486    1   1    1 spoon.reflect.code.CtJavaDocTag.setParam(String)
3487    1   1    0 spoon.reflect.code.CtJavaDocTag.clone()
3488    1   1    1 spoon.reflect.code.CtOperatorAssignment.setKind(BinaryOperatorKind)
3489    1   1    1 spoon.reflect.code.CtOperatorAssignment.getKind()
3490    1   1    0 spoon.reflect.code.CtOperatorAssignment.clone()
3491    1   1    1 spoon.reflect.code.CtNewClass.getActualTypeArguments()
3492    1   1    1 spoon.reflect.code.CtNewClass.setActualTypeArguments(CtTypeReference)
3493    1   1    1 spoon.reflect.code.CtNewClass.addActualTypeArgument(CtTypeReference)
3494    1   1    1 spoon.reflect.code.CtNewClass.getAnonymousClass()
3495    1   1    1 spoon.reflect.code.CtNewClass.setAnonymousClass(CtClass)
3496    1   1    0 spoon.reflect.code.CtNewClass.clone()
3497    1   1    0 spoon.reflect.code.CtArrayWrite.clone()
3498    1   1    1 spoon.reflect.code.CtBodyHolder.getBody()
3499    1   1    1 spoon.reflect.code.CtBodyHolder.setBody(CtStatement)
3500    1   1    1 spoon.reflect.code.CtComment.getContent()
3501    1   1    0 spoon.reflect.code.CtComment.setContent(String)
3502    1   1    1 spoon.reflect.code.CtComment.getRawContent()
3503    1   1    1 spoon.reflect.code.CtComment.getCommentType()
3504    1   1    0 spoon.reflect.code.CtComment.setCommentType(CommentType)
3505    1   1    0 spoon.reflect.code.CtComment.clone()
3506    1   1    1 spoon.reflect.code.CtComment.asJavaDoc()
3507    1   1    0 spoon.reflect.code.CtCodeSnippetExpression.compile()
3508    1   1    0 spoon.reflect.code.CtCodeSnippetExpression.clone()
3509    1   1    0 spoon.reflect.code.CtArrayRead.clone()
3510    1   1    0 spoon.reflect.code.CtSuperAccess.clone()
3511    1   1    0 spoon.reflect.code.CtSuperAccess.getType()
3512    1   1    1 spoon.reflect.code.CtLiteral.getValue()
3513    1   1    1 spoon.reflect.code.CtLiteral.setValue(T)
3514    1   1    1 spoon.reflect.code.CtLiteral.clone()
3515    1   1    1 spoon.reflect.code.CtExecutableReferenceExpression.getExecutable()
3516    1   1    1 spoon.reflect.code.CtExecutableReferenceExpression.setExecutable(T)
3517    1   1    0 spoon.reflect.code.CtExecutableReferenceExpression.clone()
3518    1   1    1 spoon.reflect.code.CtCatch.getParameter()
3519    1   1    1 spoon.reflect.code.CtCatch.setParameter(Throwable)
3520    1   1    1 spoon.reflect.code.CtCatch.getBody()
3521    1   1    0 spoon.reflect.code.CtCatch.clone()
3522    1   1    1 spoon.reflect.code.CtBinaryOperator.getLeftHandOperand()
3523    1   1    1 spoon.reflect.code.CtBinaryOperator.getRightHandOperand()
3524    1   1    1 spoon.reflect.code.CtBinaryOperator.setLeftHandOperand(CtExpression)
3525    1   1    1 spoon.reflect.code.CtBinaryOperator.setRightHandOperand(CtExpression)
3526    1   1    1 spoon.reflect.code.CtBinaryOperator.setKind(BinaryOperatorKind)
3527    1   1    1 spoon.reflect.code.CtBinaryOperator.getKind()
3528    1   1    0 spoon.reflect.code.CtBinaryOperator.clone()
3529    1   1    1 spoon.reflect.code.CtForEach.getExpression()
3530    1   1    1 spoon.reflect.code.CtForEach.getVariable()
3531    1   1    1 spoon.reflect.code.CtForEach.setExpression(CtExpression)
3532    1   1    1 spoon.reflect.code.CtForEach.setVariable(CtLocalVariable)
3533    1   1    0 spoon.reflect.code.CtForEach.clone()
3534    1   1    1 spoon.reflect.code.CtAssignment.getAssigned()
3535    1   1    1 spoon.reflect.code.CtAssignment.setAssigned(T)
3536    1   1    0 spoon.reflect.code.CtAssignment.clone()
3537    1   1    1 spoon.reflect.code.CtJavaDoc.getTags()
3538    1   1    1 spoon.reflect.code.CtJavaDoc.setTags(CtJavaDocTag)
3539    1   1    1 spoon.reflect.code.CtJavaDoc.addTag(CtJavaDocTag)
3540    1   1    1 spoon.reflect.code.CtJavaDoc.addTag(int,CtJavaDocTag)
3541    1   1    1 spoon.reflect.code.CtJavaDoc.removeTag(int)
3542    1   1    1 spoon.reflect.code.CtJavaDoc.removeTag(CtJavaDocTag)
3543    1   1    1 spoon.reflect.code.CtJavaDoc.getShortDescription()
3544    1   1    1 spoon.reflect.code.CtJavaDoc.getLongDescription()
3545    1   1    0 spoon.reflect.code.CtJavaDoc.clone()
3546    1   1    1 spoon.reflect.code.CtJavaDoc.getJavadocElements()
3547    1   1    1 spoon.reflect.code.CtThrow.getThrownExpression()
3548    1   1    1 spoon.reflect.code.CtThrow.setThrownExpression(Throwable)
3549    1   1    0 spoon.reflect.code.CtThrow.clone()
3550    1   1    1 spoon.reflect.code.CtStatementList.getStatements()
3551    1   1    1 spoon.reflect.code.CtStatementList.setStatements(CtStatement)
3552    1   1    1 spoon.reflect.code.CtStatementList.addStatement(CtStatement)
3553    1   1    1 spoon.reflect.code.CtStatementList.addStatement(int,CtStatement)
3554    1   1    1 spoon.reflect.code.CtStatementList.insertBegin(CtStatement)
3555    1   1    1 spoon.reflect.code.CtStatementList.insertBegin(CtStatementList)
3556    1   1    1 spoon.reflect.code.CtStatementList.insertEnd(CtStatement)
3557    1   1    1 spoon.reflect.code.CtStatementList.insertEnd(CtStatementList)
3558    1   1    1 spoon.reflect.code.CtStatementList.insertBefore(CtStatement,CtStatement)
3559    1   1    1 spoon.reflect.code.CtStatementList.insertBefore(CtStatement,CtStatementList)
3560    1   1    1 spoon.reflect.code.CtStatementList.insertAfter(CtStatement,CtStatement)
3561    1   1    1 spoon.reflect.code.CtStatementList.insertAfter(CtStatement,CtStatementList)
3562    1   1    1 spoon.reflect.code.CtStatementList.getStatement(int)
3563    1   1    1 spoon.reflect.code.CtStatementList.getLastStatement()
3564    1   1    1 spoon.reflect.code.CtStatementList.removeStatement(CtStatement)
3565    1   1    0 spoon.reflect.code.CtStatementList.clone()
3566    1   1    1 spoon.reflect.code.CtCase.getCaseExpression()
3567    1   1    1 spoon.reflect.code.CtCase.setCaseExpression(S)
3568    1   1    0 spoon.reflect.code.CtCase.clone()
3569    1   1    1 spoon.reflect.code.CtConditional.getElseExpression()
3570    1   1    1 spoon.reflect.code.CtConditional.getThenExpression()
3571    1   1    1 spoon.reflect.code.CtConditional.getCondition()
3572    1   1    1 spoon.reflect.code.CtConditional.setElseExpression(T)
3573    1   1    1 spoon.reflect.code.CtConditional.setThenExpression(T)
3574    1   1    1 spoon.reflect.code.CtConditional.setCondition(Boolean)
3575    1   1    0 spoon.reflect.code.CtConditional.clone()
3576    1   1    1 spoon.reflect.code.CtSwitch.getSelector()
3577    1   1    1 spoon.reflect.code.CtSwitch.setSelector(S)
3578    1   1    1 spoon.reflect.code.CtSwitch.getCases()
3579    1   1    1 spoon.reflect.code.CtSwitch.setCases(S)
3580    1   1    1 spoon.reflect.code.CtSwitch.addCase(S)
3581    1   1    1 spoon.reflect.code.CtSwitch.removeCase(S)
3582    1   1    0 spoon.reflect.code.CtSwitch.clone()
3583    1   1    1 spoon.reflect.code.CtArrayAccess.setIndexExpression(Integer)
3584    1   1    1 spoon.reflect.code.CtArrayAccess.getIndexExpression()
3585    1   1    0 spoon.reflect.code.CtArrayAccess.clone()
3586    1   1    0 spoon.reflect.code.CtCodeSnippetStatement.compile()
3587    1   1    0 spoon.reflect.code.CtCodeSnippetStatement.clone()
3588    1   1    0 spoon.reflect.code.CtAnnotationFieldAccess.getVariable()
3589    1   1    0 spoon.reflect.code.CtAnnotationFieldAccess.clone()
3590    1   1    1 spoon.reflect.code.CtReturn.getReturnedExpression()
3591    1   1    1 spoon.reflect.code.CtReturn.setReturnedExpression(R)
3592    1   1    0 spoon.reflect.code.CtReturn.clone()
3593    1   1    1 spoon.reflect.code.CtLabelledFlowBreak.getTargetLabel()
3594    1   1    1 spoon.reflect.code.CtLabelledFlowBreak.setTargetLabel(String)
3595    1   1    0 spoon.reflect.code.CtLabelledFlowBreak.getLabelledStatement()
3596    1   1    1 spoon.reflect.code.CtWhile.getLoopingExpression()
3597    1   1    1 spoon.reflect.code.CtWhile.setLoopingExpression(Boolean)
3598    1   1    0 spoon.reflect.code.CtWhile.clone()
3599    1   1    0 spoon.reflect.code.CtCodeElement.partiallyEvaluate()
3600    1   1    0 spoon.reflect.code.CtCodeElement.clone()
3601    1   1    0 spoon.reflect.code.CtVariableWrite.clone()
3602    1   1    1 spoon.reflect.code.CtConstructorCall.getActualTypeArguments()
3603    1   1    1 spoon.reflect.code.CtConstructorCall.setActualTypeArguments(CtTypeReference)
3604    1   1    1 spoon.reflect.code.CtConstructorCall.addActualTypeArgument(CtTypeReference)
3605    1   1    0 spoon.reflect.code.CtConstructorCall.clone()
3606    1   1    0 spoon.reflect.code.CtConstructorCall.getType()
3607    1   1    0 spoon.reflect.code.CtLocalVariable.getReference()
3608    1   1    1 spoon.reflect.code.CtLocalVariable.getAssignment()
3609    1   1    0 spoon.reflect.code.CtLocalVariable.clone()
3610    1   1    0 spoon.reflect.code.CtLocalVariable.setAssignment(T)
3611    1   1    1 spoon.reflect.code.CtLocalVariable.isInferred()
3612    1   1    1 spoon.reflect.code.CtLocalVariable.setInferred(boolean)
3613    1   1    1 spoon.reflect.code.CtVariableAccess.getVariable()
3614    1   1    1 spoon.reflect.code.CtVariableAccess.setVariable(T)
3615    1   1    0 spoon.reflect.code.CtVariableAccess.clone()
3616    1   1    0 spoon.reflect.code.CtVariableAccess.getType()
3617    1   1    1 spoon.reflect.code.CtTypeAccess.getAccessedType()
3618    1   1    1 spoon.reflect.code.CtTypeAccess.setAccessedType(A)
3619    1   1    1 spoon.reflect.code.CtTypeAccess.getType()
3620    1   1    0 spoon.reflect.code.CtTypeAccess.setType(Void)
3621    1   1    1 spoon.reflect.code.CtTypeAccess.isImplicit()
3622    1   1    1 spoon.reflect.code.CtTypeAccess.setImplicit(boolean)
3623    1   1    0 spoon.reflect.code.CtTypeAccess.clone()
3624    4   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.AbstractRoleHandler(CtRole,T,Class)
3625    2   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.getRole()
3626    2   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.getTargetType()
3627    2   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.castTarget(Object)
3628    2   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.castValue(Object)
3629    3   2    0 spoon.reflect.meta.impl.AbstractRoleHandler.checkItemsClass(Iterable)
3630    4   4    0 spoon.reflect.meta.impl.AbstractRoleHandler.castItemValue(Object)
3631    2   2    0 spoon.reflect.meta.impl.AbstractRoleHandler.setValue(W,X)
3632    2   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.getValueClass()
3633    2   2    0 spoon.reflect.meta.impl.AbstractRoleHandler.asList(W)
3634    2   2    0 spoon.reflect.meta.impl.AbstractRoleHandler.asSet(W)
3635    2   2    0 spoon.reflect.meta.impl.AbstractRoleHandler.asMap(W)
3636    2   1    0 spoon.reflect.meta.impl.AbstractRoleHandler.toString()
3637    2   1    0 spoon.reflect.meta.impl.SingleHandler.SingleHandler(CtRole,T,Class)
3638    2   1    0 spoon.reflect.meta.impl.SingleHandler.getContainerKind()
3639    2   1    0 spoon.reflect.meta.impl.SingleHandler.asCollection(W)
3640    2   2    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.size()
3641    4   4    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.get(int)
3642    6   4    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.set(int,X)
3643    6   3    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.add(X)
3644    8   5    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.remove(int)
3645   10   6    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.remove(Object)
3646    6   5    0 spoon.reflect.meta.impl.SingleHandler.AbstractList$1.equals(Object,Object)
3647   46   1    0 spoon.reflect.meta.impl.SingleHandler.asList(W)
3648    2   1    0 spoon.reflect.meta.impl.SingleHandler.asSet(W)
3649    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler.CtTypeAccess_ACCESSED_TYPE_RoleHandler()
3650    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler.getValue(T)
3651    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler.setValue(T,U)
3652    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler()
3653    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler.getValue(T)
3654    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler.setValue(T,U)
3655    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler.CtElement_ANNOTATION_RoleHandler()
3656    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler.getValue(T)
3657    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler.setValue(T,U)
3658    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler.CtAnnotation_ANNOTATION_TYPE_RoleHandler()
3659    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler.getValue(T)
3660    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler.setValue(T,U)
3661    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler.CtAbstractInvocation_ARGUMENT_RoleHandler()
3662    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler.getValue(T)
3663    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler.setValue(T,U)
3664    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler.CtExecutableReference_ARGUMENT_TYPE_RoleHandler()
3665    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler.getValue(T)
3666    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler.setValue(T,U)
3667    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler.CtAssignment_ASSIGNED_RoleHandler()
3668    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler.getValue(T)
3669    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler.setValue(T,U)
3670    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler.CtRHSReceiver_ASSIGNMENT_RoleHandler()
3671    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler.getValue(T)
3672    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler.setValue(T,U)
3673    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler.CtBodyHolder_BODY_RoleHandler()
3674    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler.getValue(T)
3675    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler.setValue(T,U)
3676    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler.CtSynchronized_BODY_RoleHandler()
3677    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler.getValue(T)
3678    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler.setValue(T,U)
3679    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler.CtIntersectionTypeReference_BOUND_RoleHandler()
3680    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler.getValue(T)
3681    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler.setValue(T,U)
3682    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_BOUNDING_TYPE_RoleHandler.CtWildcardReference_BOUNDING_TYPE_RoleHandler()
3683    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_BOUNDING_TYPE_RoleHandler.getValue(T)
3684    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_BOUNDING_TYPE_RoleHandler.setValue(T,U)
3685    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler.CtSwitch_CASE_RoleHandler()
3686    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler.getValue(T)
3687    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler.setValue(T,U)
3688    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler.CtExpression_CAST_RoleHandler()
3689    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler.getValue(T)
3690    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler.setValue(T,U)
3691    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler.CtTry_CATCH_RoleHandler()
3692    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler.getValue(T)
3693    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler.setValue(T,U)
3694    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler.CtElement_COMMENT_RoleHandler()
3695    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler.getValue(T)
3696    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler.setValue(T,U)
3697    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler.CtComment_COMMENT_CONTENT_RoleHandler()
3698    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler.getValue(T)
3699    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler.setValue(T,U)
3700    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler.CtJavaDocTag_COMMENT_CONTENT_RoleHandler()
3701    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler.getValue(T)
3702    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler.setValue(T,U)
3703    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler.CtJavaDoc_COMMENT_TAG_RoleHandler()
3704    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler.getValue(T)
3705    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler.setValue(T,U)
3706    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler.CtComment_COMMENT_TYPE_RoleHandler()
3707    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler.getValue(T)
3708    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler.setValue(T,U)
3709    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler.CtAssert_CONDITION_RoleHandler()
3710    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler.getValue(T)
3711    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler.setValue(T,U)
3712    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler.CtConditional_CONDITION_RoleHandler()
3713    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler.getValue(T)
3714    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler.setValue(T,U)
3715    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler.CtIf_CONDITION_RoleHandler()
3716    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler.getValue(T)
3717    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler.setValue(T,U)
3718    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler.CtClass_CONSTRUCTOR_RoleHandler()
3719    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler.getValue(T)
3720    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler.setValue(T,U)
3721    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler.CtPackage_CONTAINED_TYPE_RoleHandler()
3722    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler.getValue(T)
3723    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler.setValue(T,U)
3724    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_IMPORT_RoleHandler.CtCompilationUnit_DECLARED_IMPORT_RoleHandler()
3725    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_IMPORT_RoleHandler.getValue(T)
3726    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_IMPORT_RoleHandler.setValue(T,U)
3727    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_MODULE_RoleHandler.CtCompilationUnit_DECLARED_MODULE_RoleHandler()
3728    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_MODULE_RoleHandler.getValue(T)
3729    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_MODULE_REF_RoleHandler.CtCompilationUnit_DECLARED_MODULE_REF_RoleHandler()
3730    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_MODULE_REF_RoleHandler.getValue(T)
3731    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_MODULE_REF_RoleHandler.setValue(T,U)
3732    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_TYPE_RoleHandler.CtCompilationUnit_DECLARED_TYPE_RoleHandler()
3733    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_TYPE_RoleHandler.getValue(T)
3734    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_TYPE_REF_RoleHandler.CtCompilationUnit_DECLARED_TYPE_REF_RoleHandler()
3735    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_TYPE_REF_RoleHandler.getValue(T)
3736    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_DECLARED_TYPE_REF_RoleHandler.setValue(T,U)
3737    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler.CtExecutableReference_DECLARING_TYPE_RoleHandler()
3738    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler.getValue(T)
3739    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler.setValue(T,U)
3740    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler.CtFieldReference_DECLARING_TYPE_RoleHandler()
3741    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler.getValue(T)
3742    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler.setValue(T,U)
3743    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler.CtTypeReference_DECLARING_TYPE_RoleHandler()
3744    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler.getValue(T)
3745    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler.setValue(T,U)
3746    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler()
3747    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler.getValue(T)
3748    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler.setValue(T,U)
3749    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler.CtVariable_DEFAULT_EXPRESSION_RoleHandler()
3750    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler.getValue(T)
3751    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler.setValue(T,U)
3752    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler.CtNewArray_DIMENSION_RoleHandler()
3753    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler.getValue(T)
3754    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler.setValue(T,U)
3755    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler()
3756    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler.getValue(T)
3757    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler.setValue(T,U)
3758    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler.CtConditional_ELSE_RoleHandler()
3759    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler.getValue(T)
3760    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler.setValue(T,U)
3761    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler.CtIf_ELSE_RoleHandler()
3762    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler.getValue(T)
3763    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler.setValue(T,U)
3764    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler()
3765    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler.getValue(T)
3766    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler.setValue(T,U)
3767    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler()
3768    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler.getValue(T)
3769    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler.setValue(T,U)
3770    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler.CtModule_EXPORTED_PACKAGE_RoleHandler()
3771    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler.getValue(T)
3772    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler.setValue(T,U)
3773    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler.CtArrayAccess_EXPRESSION_RoleHandler()
3774    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler.getValue(T)
3775    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler.setValue(T,U)
3776    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler.CtAssert_EXPRESSION_RoleHandler()
3777    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler.getValue(T)
3778    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler.setValue(T,U)
3779    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler.CtCase_EXPRESSION_RoleHandler()
3780    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler.getValue(T)
3781    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler.setValue(T,U)
3782    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler.CtDo_EXPRESSION_RoleHandler()
3783    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler.getValue(T)
3784    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler.setValue(T,U)
3785    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler.CtFor_EXPRESSION_RoleHandler()
3786    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler.getValue(T)
3787    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler.setValue(T,U)
3788    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler.CtForEach_EXPRESSION_RoleHandler()
3789    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler.getValue(T)
3790    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler.setValue(T,U)
3791    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler.CtLambda_EXPRESSION_RoleHandler()
3792    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler.getValue(T)
3793    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler.setValue(T,U)
3794    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler.CtNewArray_EXPRESSION_RoleHandler()
3795    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler.getValue(T)
3796    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler.setValue(T,U)
3797    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler.CtReturn_EXPRESSION_RoleHandler()
3798    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler.getValue(T)
3799    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler.setValue(T,U)
3800    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler.CtSwitch_EXPRESSION_RoleHandler()
3801    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler.getValue(T)
3802    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler.setValue(T,U)
3803    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler.CtSynchronized_EXPRESSION_RoleHandler()
3804    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler.getValue(T)
3805    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler.setValue(T,U)
3806    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler.CtThrow_EXPRESSION_RoleHandler()
3807    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler.getValue(T)
3808    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler.setValue(T,U)
3809    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler.CtUnaryOperator_EXPRESSION_RoleHandler()
3810    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler.getValue(T)
3811    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler.setValue(T,U)
3812    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler.CtWhile_EXPRESSION_RoleHandler()
3813    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler.getValue(T)
3814    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler.setValue(T,U)
3815    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler.CtType_FIELD_RoleHandler()
3816    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler.getValue(T)
3817    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler.setValue(T,U)
3818    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler.CtTry_FINALIZER_RoleHandler()
3819    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler.getValue(T)
3820    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler.setValue(T,U)
3821    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler.CtForEach_FOREACH_VARIABLE_RoleHandler()
3822    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler.getValue(T)
3823    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler.setValue(T,U)
3824    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler.CtFor_FOR_INIT_RoleHandler()
3825    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler.getValue(T)
3826    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler.setValue(T,U)
3827    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler.CtFor_FOR_UPDATE_RoleHandler()
3828    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler.getValue(T)
3829    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler.setValue(T,U)
3830    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler()
3831    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler.getValue(T)
3832    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler.setValue(T,U)
3833    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler.CtImport_IMPORT_REFERENCE_RoleHandler()
3834    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler.getValue(T)
3835    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler.setValue(T,U)
3836    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler.CtType_INTERFACE_RoleHandler()
3837    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler.getValue(T)
3838    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler.setValue(T,U)
3839    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler.CtTypeInformation_INTERFACE_RoleHandler()
3840    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler.getValue(T)
3841    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler.CtMethod_IS_DEFAULT_RoleHandler()
3842    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler.getValue(T)
3843    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler.setValue(T,U)
3844    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler.CtFieldReference_IS_FINAL_RoleHandler()
3845    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler.getValue(T)
3846    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler.setValue(T,U)
3847    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler.CtElement_IS_IMPLICIT_RoleHandler()
3848    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler.getValue(T)
3849    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler.setValue(T,U)
3850    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler.CtLocalVariable_IS_INFERRED_RoleHandler()
3851    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler.getValue(T)
3852    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler.setValue(T,U)
3853    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler.CtShadowable_IS_SHADOW_RoleHandler()
3854    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler.getValue(T)
3855    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler.setValue(T,U)
3856    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler.CtExecutableReference_IS_STATIC_RoleHandler()
3857    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler.getValue(T)
3858    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler.setValue(T,U)
3859    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler.CtFieldReference_IS_STATIC_RoleHandler()
3860    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler.getValue(T)
3861    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler.setValue(T,U)
3862    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_IS_UPPER_RoleHandler.CtWildcardReference_IS_UPPER_RoleHandler()
3863    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_IS_UPPER_RoleHandler.getValue(T)
3864    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_IS_UPPER_RoleHandler.setValue(T,U)
3865    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler.CtParameter_IS_VARARGS_RoleHandler()
3866    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler.getValue(T)
3867    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler.setValue(T,U)
3868    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler()
3869    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler.getValue(T)
3870    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler.setValue(T,U)
3871    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler.CtStatement_LABEL_RoleHandler()
3872    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler.getValue(T)
3873    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler.setValue(T,U)
3874    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler.CtBinaryOperator_LEFT_OPERAND_RoleHandler()
3875    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler.getValue(T)
3876    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler.setValue(T,U)
3877    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler.CtType_METHOD_RoleHandler()
3878    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler.getValue(T)
3879    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler.setValue(T,U)
3880    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler.CtModifiable_MODIFIER_RoleHandler()
3881    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler.getValue(T)
3882    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler.setValue(T,U)
3883    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler.CtModule_MODIFIER_RoleHandler()
3884    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler.getValue(T)
3885    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler.setValue(T,U)
3886    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler.CtModuleRequirement_MODIFIER_RoleHandler()
3887    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler.getValue(T)
3888    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler.setValue(T,U)
3889    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler.CtTypeInformation_MODIFIER_RoleHandler()
3890    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler.getValue(T)
3891    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler.CtModule_MODULE_DIRECTIVE_RoleHandler()
3892    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler.getValue(T)
3893    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler.setValue(T,U)
3894    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler.CtModuleRequirement_MODULE_REF_RoleHandler()
3895    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler.getValue(T)
3896    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler.setValue(T,U)
3897    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler.CtPackageExport_MODULE_REF_RoleHandler()
3898    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler.getValue(T)
3899    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler.setValue(T,U)
3900    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler.CtMultiTypedElement_MULTI_TYPE_RoleHandler()
3901    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler.getValue(T)
3902    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler.setValue(T,U)
3903    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler.CtNamedElement_NAME_RoleHandler()
3904    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler.getValue(T)
3905    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler.setValue(T,U)
3906    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler.CtReference_NAME_RoleHandler()
3907    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler.getValue(T)
3908    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler.setValue(T,U)
3909    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler.CtNewClass_NESTED_TYPE_RoleHandler()
3910    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler.getValue(T)
3911    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler.setValue(T,U)
3912    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler.CtType_NESTED_TYPE_RoleHandler()
3913    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler.getValue(T)
3914    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler.setValue(T,U)
3915    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler.CtModule_OPENED_PACKAGE_RoleHandler()
3916    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler.getValue(T)
3917    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler.setValue(T,U)
3918    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler.CtPackageExport_OPENED_PACKAGE_RoleHandler()
3919    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler.getValue(T)
3920    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler.setValue(T,U)
3921    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler.CtBinaryOperator_OPERATOR_KIND_RoleHandler()
3922    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler.getValue(T)
3923    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler.setValue(T,U)
3924    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler.CtOperatorAssignment_OPERATOR_KIND_RoleHandler()
3925    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler.getValue(T)
3926    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler.setValue(T,U)
3927    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler.CtUnaryOperator_OPERATOR_KIND_RoleHandler()
3928    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler.getValue(T)
3929    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler.setValue(T,U)
3930    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_PACKAGE_DECLARATION_RoleHandler.CtCompilationUnit_PACKAGE_DECLARATION_RoleHandler()
3931    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_PACKAGE_DECLARATION_RoleHandler.getValue(T)
3932    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCompilationUnit_PACKAGE_DECLARATION_RoleHandler.setValue(T,U)
3933    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageDeclaration_PACKAGE_REF_RoleHandler.CtPackageDeclaration_PACKAGE_REF_RoleHandler()
3934    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageDeclaration_PACKAGE_REF_RoleHandler.getValue(T)
3935    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageDeclaration_PACKAGE_REF_RoleHandler.setValue(T,U)
3936    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler.CtPackageExport_PACKAGE_REF_RoleHandler()
3937    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler.getValue(T)
3938    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler.setValue(T,U)
3939    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler.CtTypeReference_PACKAGE_REF_RoleHandler()
3940    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler.getValue(T)
3941    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler.setValue(T,U)
3942    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler.CtCatch_PARAMETER_RoleHandler()
3943    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler.getValue(T)
3944    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler.setValue(T,U)
3945    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler.CtExecutable_PARAMETER_RoleHandler()
3946    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler.getValue(T)
3947    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler.setValue(T,U)
3948    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler.CtElement_POSITION_RoleHandler()
3949    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler.getValue(T)
3950    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler.setValue(T,U)
3951    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler.CtModule_PROVIDED_SERVICE_RoleHandler()
3952    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler.getValue(T)
3953    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler.setValue(T,U)
3954    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler.CtModule_REQUIRED_MODULE_RoleHandler()
3955    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler.getValue(T)
3956    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler.setValue(T,U)
3957    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler.CtBinaryOperator_RIGHT_OPERAND_RoleHandler()
3958    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler.getValue(T)
3959    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler.setValue(T,U)
3960    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler.CtModule_SERVICE_TYPE_RoleHandler()
3961    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler.getValue(T)
3962    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler.setValue(T,U)
3963    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler.CtProvidedService_SERVICE_TYPE_RoleHandler()
3964    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler.getValue(T)
3965    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler.setValue(T,U)
3966    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler.CtUsedService_SERVICE_TYPE_RoleHandler()
3967    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler.getValue(T)
3968    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler.setValue(T,U)
3969    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler.CtCodeSnippet_SNIPPET_RoleHandler()
3970    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler.getValue(T)
3971    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler.setValue(T,U)
3972    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler.CtStatementList_STATEMENT_RoleHandler()
3973    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler.getValue(T)
3974    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler.setValue(T,U)
3975    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler.CtModule_SUB_PACKAGE_RoleHandler()
3976    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler.getValue(T)
3977    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler.setValue(T,U)
3978    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler.CtPackage_SUB_PACKAGE_RoleHandler()
3979    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler.getValue(T)
3980    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler.setValue(T,U)
3981    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler.CtType_SUPER_TYPE_RoleHandler()
3982    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler.getValue(T)
3983    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler.setValue(T,U)
3984    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler.CtTypeInformation_SUPER_TYPE_RoleHandler()
3985    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler.getValue(T)
3986    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler.CtTargetedExpression_TARGET_RoleHandler()
3987    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler.getValue(T)
3988    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler.setValue(T,U)
3989    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLabelledFlowBreak_TARGET_LABEL_RoleHandler.CtLabelledFlowBreak_TARGET_LABEL_RoleHandler()
3990    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLabelledFlowBreak_TARGET_LABEL_RoleHandler.getValue(T)
3991    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLabelledFlowBreak_TARGET_LABEL_RoleHandler.setValue(T,U)
3992    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_THEN_RoleHandler.CtConditional_THEN_RoleHandler()
3993    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_THEN_RoleHandler.getValue(T)
3994    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_THEN_RoleHandler.setValue(T,U)
3995    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_THEN_RoleHandler.CtIf_THEN_RoleHandler()
3996    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_THEN_RoleHandler.getValue(T)
3997    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_THEN_RoleHandler.setValue(T,U)
3998    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_THROWN_RoleHandler.CtExecutable_THROWN_RoleHandler()
3999    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_THROWN_RoleHandler.getValue(T)
4000    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_THROWN_RoleHandler.setValue(T,U)
4001    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTryWithResource_TRY_RESOURCE_RoleHandler.CtTryWithResource_TRY_RESOURCE_RoleHandler()
4002    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTryWithResource_TRY_RESOURCE_RoleHandler.getValue(T)
4003    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTryWithResource_TRY_RESOURCE_RoleHandler.setValue(T,U)
4004    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayTypeReference_TYPE_RoleHandler.CtArrayTypeReference_TYPE_RoleHandler()
4005    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayTypeReference_TYPE_RoleHandler.getValue(T)
4006    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayTypeReference_TYPE_RoleHandler.setValue(T,U)
4007    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_TYPE_RoleHandler.CtExecutableReference_TYPE_RoleHandler()
4008    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_TYPE_RoleHandler.getValue(T)
4009    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_TYPE_RoleHandler.setValue(T,U)
4010    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypedElement_TYPE_RoleHandler.CtTypedElement_TYPE_RoleHandler()
4011    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypedElement_TYPE_RoleHandler.getValue(T)
4012    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypedElement_TYPE_RoleHandler.setValue(T,U)
4013    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableReference_TYPE_RoleHandler.CtVariableReference_TYPE_RoleHandler()
4014    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableReference_TYPE_RoleHandler.getValue(T)
4015    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableReference_TYPE_RoleHandler.setValue(T,U)
4016    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler.CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler()
4017    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler.getValue(T)
4018    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler.setValue(T,U)
4019    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_TYPE_MEMBER_RoleHandler.CtType_TYPE_MEMBER_RoleHandler()
4020    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_TYPE_MEMBER_RoleHandler.getValue(T)
4021    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtType_TYPE_MEMBER_RoleHandler.setValue(T,U)
4022    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler.CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler()
4023    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler.getValue(T)
4024    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler.setValue(T,U)
4025    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeMemberWildcardImportReference_TYPE_REF_RoleHandler.CtTypeMemberWildcardImportReference_TYPE_REF_RoleHandler()
4026    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeMemberWildcardImportReference_TYPE_REF_RoleHandler.getValue(T)
4027    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeMemberWildcardImportReference_TYPE_REF_RoleHandler.setValue(T,U)
4028    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_VALUE_RoleHandler.CtAnnotation_VALUE_RoleHandler()
4029    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_VALUE_RoleHandler.getValue(T)
4030    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_VALUE_RoleHandler.setValue(T,U)
4031    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtEnum_VALUE_RoleHandler.CtEnum_VALUE_RoleHandler()
4032    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtEnum_VALUE_RoleHandler.getValue(T)
4033    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtEnum_VALUE_RoleHandler.setValue(T,U)
4034    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLiteral_VALUE_RoleHandler.CtLiteral_VALUE_RoleHandler()
4035    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLiteral_VALUE_RoleHandler.getValue(T)
4036    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtLiteral_VALUE_RoleHandler.setValue(T,U)
4037    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableAccess_VARIABLE_RoleHandler.CtVariableAccess_VARIABLE_RoleHandler()
4038    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableAccess_VARIABLE_RoleHandler.getValue(T)
4039    2   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableAccess_VARIABLE_RoleHandler.setValue(T,U)
4040    1   1    0 spoon.reflect.meta.impl.ModelRoleHandlers.ModelRoleHandlers()
4041    1   1    0 spoon.reflect.meta.RoleHandler.getValue(T)
4042    1   1    0 spoon.reflect.meta.RoleHandler.setValue(T,U)
4043    1   1    1 spoon.reflect.meta.RoleHandler.getRole()
4044    1   1    1 spoon.reflect.meta.RoleHandler.getTargetType()
4045    1   1    1 spoon.reflect.meta.RoleHandler.getValueClass()
4046    1   1    1 spoon.reflect.meta.RoleHandler.getContainerKind()
4047    1   1    0 spoon.reflect.meta.RoleHandler.asCollection(T)
4048    1   1    0 spoon.reflect.meta.RoleHandler.asSet(T)
4049    1   1    0 spoon.reflect.meta.RoleHandler.asList(T)
4050    1   1    0 spoon.reflect.meta.RoleHandler.asMap(T)
4051    1   1    0 spoon.reflect.ModelElementContainerDefaultCapacities.ModelElementContainerDefaultCapacities()
4052    1   1    1 spoon.reflect.visitor.CtScanner.CtScanner()
4053    1   1    1 spoon.reflect.visitor.CtScanner.enter(CtElement)
4054    1   1    1 spoon.reflect.visitor.CtScanner.exit(CtElement)
4055    4   3    1 spoon.reflect.visitor.CtScanner.scan(CtRole,CtElement)
4056    4   3    1 spoon.reflect.visitor.CtScanner.scan(CtRole,CtElement)
4057    2   1    1 spoon.reflect.visitor.CtScanner.scan(CtElement)
4058    2   1    1 spoon.reflect.visitor.CtScanner.scan(CtRole,CtElement)
4059    3   2    1 spoon.reflect.visitor.CtScanner.scan(CtElement)
4060    8   1    0 spoon.reflect.visitor.CtScanner.visitCtAnnotation(A)
4061    2   1    1 spoon.reflect.visitor.CtScanner.scan(Object)
4062    7   4    1 spoon.reflect.visitor.CtScanner.scan(CtRole,Object)
4063    6   1    0 spoon.reflect.visitor.CtScanner.visitCtAnnotationType(A)
4064    6   1    0 spoon.reflect.visitor.CtScanner.visitCtAnonymousExecutable(CtAnonymousExecutable)
4065    9   1    0 spoon.reflect.visitor.CtScanner.visitCtArrayRead(T)
4066    9   1    0 spoon.reflect.visitor.CtScanner.visitCtArrayWrite(T)
4067    8   1    0 spoon.reflect.visitor.CtScanner.visitCtArrayTypeReference(T)
4068    7   1    0 spoon.reflect.visitor.CtScanner.visitCtAssert(T)
4069    9   1    0 spoon.reflect.visitor.CtScanner.visitCtAssignment(A)
4070    9   1    0 spoon.reflect.visitor.CtScanner.visitCtBinaryOperator(T)
4071    6   1    0 spoon.reflect.visitor.CtScanner.visitCtBlock(R)
4072    5   1    0 spoon.reflect.visitor.CtScanner.visitCtBreak(CtBreak)
4073    7   1    0 spoon.reflect.visitor.CtScanner.visitCtCase(S)
4074    7   1    0 spoon.reflect.visitor.CtScanner.visitCtCatch(CtCatch)
4075    9   1    0 spoon.reflect.visitor.CtScanner.visitCtClass(T)
4076    6   1    0 spoon.reflect.visitor.CtScanner.visitCtTypeParameter(CtTypeParameter)
4077   10   1    0 spoon.reflect.visitor.CtScanner.visitCtConditional(T)
4078    9   1    0 spoon.reflect.visitor.CtScanner.visitCtConstructor(T)
4079    5   1    0 spoon.reflect.visitor.CtScanner.visitCtContinue(CtContinue)
4080    7   1    0 spoon.reflect.visitor.CtScanner.visitCtDo(CtDo)
4081    8   1    0 spoon.reflect.visitor.CtScanner.visitCtEnum(T)
4082    9   1    0 spoon.reflect.visitor.CtScanner.visitCtExecutableReference(T)
4083    7   1    0 spoon.reflect.visitor.CtScanner.visitCtField(T)
4084    7   1    0 spoon.reflect.visitor.CtScanner.visitCtEnumValue(T)
4085    8   1    0 spoon.reflect.visitor.CtScanner.visitCtThisAccess(T)
4086    8   1    0 spoon.reflect.visitor.CtScanner.visitCtAnnotationFieldAccess(T)
4087    6   1    0 spoon.reflect.visitor.CtScanner.visitCtFieldReference(T)
4088    9   1    0 spoon.reflect.visitor.CtScanner.visitCtFor(CtFor)
4089    8   1    0 spoon.reflect.visitor.CtScanner.visitCtForEach(CtForEach)
4090    8   1    0 spoon.reflect.visitor.CtScanner.visitCtIf(CtIf)
4091    8   1    0 spoon.reflect.visitor.CtScanner.visitCtInterface(T)
4092    9   1    0 spoon.reflect.visitor.CtScanner.visitCtInvocation(T)
4093    7   1    0 spoon.reflect.visitor.CtScanner.visitCtLiteral(T)
4094    7   1    0 spoon.reflect.visitor.CtScanner.visitCtLocalVariable(T)
4095    5   1    0 spoon.reflect.visitor.CtScanner.visitCtLocalVariableReference(T)
4096    6   1    0 spoon.reflect.visitor.CtScanner.visitCtCatchVariable(T)
4097    5   1    0 spoon.reflect.visitor.CtScanner.visitCtCatchVariableReference(T)
4098   10   1    0 spoon.reflect.visitor.CtScanner.visitCtMethod(T)
4099    7   1    0 spoon.reflect.visitor.CtScanner.visitCtAnnotationMethod(T)
4100    9   1    0 spoon.reflect.visitor.CtScanner.visitCtNewArray(T)
4101    9   1    0 spoon.reflect.visitor.CtScanner.visitCtConstructorCall(T)
4102   10   1    0 spoon.reflect.visitor.CtScanner.visitCtNewClass(T)
4103   10   1    0 spoon.reflect.visitor.CtScanner.visitCtLambda(T)
4104    9   1    0 spoon.reflect.visitor.CtScanner.visitCtExecutableReferenceExpression(E)
4105    9   1    0 spoon.reflect.visitor.CtScanner.visitCtOperatorAssignment(A)
4106    7   1    0 spoon.reflect.visitor.CtScanner.visitCtPackage(CtPackage)
4107    4   1    0 spoon.reflect.visitor.CtScanner.visitCtPackageReference(CtPackageReference)
4108    6   1    0 spoon.reflect.visitor.CtScanner.visitCtParameter(T)
4109    5   1    0 spoon.reflect.visitor.CtScanner.visitCtParameterReference(T)
4110    6   1    0 spoon.reflect.visitor.CtScanner.visitCtReturn(R)
4111    6   1    0 spoon.reflect.visitor.CtScanner.visitCtStatementList(CtStatementList)
4112    7   1    0 spoon.reflect.visitor.CtScanner.visitCtSwitch(S)
4113    7   1    0 spoon.reflect.visitor.CtScanner.visitCtSynchronized(CtSynchronized)
4114    6   1    0 spoon.reflect.visitor.CtScanner.visitCtThrow(CtThrow)
4115    8   1    0 spoon.reflect.visitor.CtScanner.visitCtTry(CtTry)
4116    9   1    0 spoon.reflect.visitor.CtScanner.visitCtTryWithResource(CtTryWithResource)
4117    6   1    0 spoon.reflect.visitor.CtScanner.visitCtTypeParameterReference(CtTypeParameterReference)
4118    7   1    0 spoon.reflect.visitor.CtScanner.visitCtWildcardReference(CtWildcardReference)
4119    8   1    0 spoon.reflect.visitor.CtScanner.visitCtIntersectionTypeReference(T)
4120    8   1    0 spoon.reflect.visitor.CtScanner.visitCtTypeReference(T)
4121    7   1    0 spoon.reflect.visitor.CtScanner.visitCtTypeAccess(T)
4122    8   1    0 spoon.reflect.visitor.CtScanner.visitCtUnaryOperator(T)
4123    7   1    0 spoon.reflect.visitor.CtScanner.visitCtVariableRead(T)
4124    7   1    0 spoon.reflect.visitor.CtScanner.visitCtVariableWrite(T)
4125    7   1    0 spoon.reflect.visitor.CtScanner.visitCtWhile(CtWhile)
4126    7   1    0 spoon.reflect.visitor.CtScanner.visitCtCodeSnippetExpression(T)
4127    5   1    0 spoon.reflect.visitor.CtScanner.visitCtCodeSnippetStatement(CtCodeSnippetStatement)
4128    4   1    0 spoon.reflect.visitor.CtScanner.visitCtUnboundVariableReference(T)
4129    8   1    0 spoon.reflect.visitor.CtScanner.visitCtFieldRead(T)
4130    8   1    0 spoon.reflect.visitor.CtScanner.visitCtFieldWrite(T)
4131    8   1    0 spoon.reflect.visitor.CtScanner.visitCtSuperAccess(T)
4132    5   1    0 spoon.reflect.visitor.CtScanner.visitCtComment(CtComment)
4133    6   1    0 spoon.reflect.visitor.CtScanner.visitCtJavaDoc(CtJavaDoc)
4134    5   1    0 spoon.reflect.visitor.CtScanner.visitCtJavaDocTag(CtJavaDocTag)
4135    6   1    0 spoon.reflect.visitor.CtScanner.visitCtImport(CtImport)
4136    7   1    0 spoon.reflect.visitor.CtScanner.visitCtModule(CtModule)
4137    4   1    0 spoon.reflect.visitor.CtScanner.visitCtModuleReference(CtModuleReference)
4138    7   1    0 spoon.reflect.visitor.CtScanner.visitCtPackageExport(CtPackageExport)
4139    6   1    0 spoon.reflect.visitor.CtScanner.visitCtModuleRequirement(CtModuleRequirement)
4140    7   1    0 spoon.reflect.visitor.CtScanner.visitCtProvidedService(CtProvidedService)
4141    6   1    0 spoon.reflect.visitor.CtScanner.visitCtUsedService(CtUsedService)
4142    9   1    0 spoon.reflect.visitor.CtScanner.visitCtCompilationUnit(CtCompilationUnit)
4143    6   1    0 spoon.reflect.visitor.CtScanner.visitCtPackageDeclaration(CtPackageDeclaration)
4144    4   1    0 spoon.reflect.visitor.CtScanner.visitCtTypeMemberWildcardImportReference(CtTypeMemberWildcardImportReference)
4145    1   1    0 spoon.reflect.visitor.CtImportVisitor.visitTypeImport(T)
4146    1   1    0 spoon.reflect.visitor.CtImportVisitor.visitMethodImport(T)
4147    1   1    0 spoon.reflect.visitor.CtImportVisitor.visitFieldImport(T)
4148    1   1    1 spoon.reflect.visitor.CtImportVisitor.visitAllTypesImport(CtPackageReference)
4149    1   1    0 spoon.reflect.visitor.CtImportVisitor.visitAllStaticMembersImport(CtTypeMemberWildcardImportReference)
4150    1   1    1 spoon.reflect.visitor.PrettyPrinter.printPackageInfo(CtPackage)
4151    1   1    1 spoon.reflect.visitor.PrettyPrinter.printModuleInfo(CtModule)
4152    1   1    1 spoon.reflect.visitor.PrettyPrinter.getResult()
4153    1   1    1 spoon.reflect.visitor.PrettyPrinter.calculate(CtCompilationUnit,CtType)
4154    1   1    1 spoon.reflect.visitor.PrettyPrinter.getLineNumberMapping()
4155    2   1    0 spoon.reflect.visitor.PrinterHelper.PrinterHelper(Environment)
4156    7   1    1 spoon.reflect.visitor.PrinterHelper.reset()
4157    6   3    1 spoon.reflect.visitor.PrinterHelper.write(String)
4158   22   6    1 spoon.reflect.visitor.PrinterHelper.write(char)
4159    3   1    1 spoon.reflect.visitor.PrinterHelper.writeln()
4160    9   4    0 spoon.reflect.visitor.PrinterHelper.writeTabsInternal()
4161    4   2    0 spoon.reflect.visitor.PrinterHelper.autoWriteTabs()
4162    3   1    1 spoon.reflect.visitor.PrinterHelper.incTab()
4163    3   1    1 spoon.reflect.visitor.PrinterHelper.decTab()
4164    2   1    1 spoon.reflect.visitor.PrinterHelper.getTabCount()
4165    3   1    1 spoon.reflect.visitor.PrinterHelper.setTabCount(int)
4166   15   9    0 spoon.reflect.visitor.PrinterHelper.removeLine()
4167    2   4    0 spoon.reflect.visitor.PrinterHelper.isWhite(char)
4168    8   6    1 spoon.reflect.visitor.PrinterHelper.adjustStartPosition(CtElement)
4169    5   4    0 spoon.reflect.visitor.PrinterHelper.adjustEndPosition(CtElement)
4170    3   2    0 spoon.reflect.visitor.PrinterHelper.undefineLine()
4171    6   4    0 spoon.reflect.visitor.PrinterHelper.mapLine(CtElement,CtCompilationUnit)
4172    2   1    0 spoon.reflect.visitor.PrinterHelper.putLineNumberMapping(int)
4173    2   1    0 spoon.reflect.visitor.PrinterHelper.getLineNumberMapping()
4174    2   1    0 spoon.reflect.visitor.PrinterHelper.toString()
4175    2   1    1 spoon.reflect.visitor.PrinterHelper.getLineSeparator()
4176    2   1    1 spoon.reflect.visitor.PrinterHelper.setLineSeparator(String)
4177    2   1    1 spoon.reflect.visitor.PrinterHelper.writeSpace()
4178    2   1    1 spoon.reflect.visitor.PrintingContext.isFirstForVariable()
4179    2   1    1 spoon.reflect.visitor.PrintingContext.isNextForVariable()
4180    2   1    0 spoon.reflect.visitor.PrintingContext.ignoreGenerics()
4181    2   1    0 spoon.reflect.visitor.PrintingContext.skipArray()
4182    2   1    0 spoon.reflect.visitor.PrintingContext.ignoreStaticAccess()
4183    2   1    0 spoon.reflect.visitor.PrintingContext.ignoreEnclosingClass()
4184    2   1    0 spoon.reflect.visitor.PrintingContext.forceWildcardGenerics()
4185    2   1    1 spoon.reflect.visitor.PrintingContext.isStatement(CtStatement)
4186    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.Writable()
4187    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.close()
4188    3   1    1 spoon.reflect.visitor.PrintingContext.Writable.isFirstForVariable(boolean)
4189    3   1    1 spoon.reflect.visitor.PrintingContext.Writable.isNextForVariable(boolean)
4190    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.ignoreGenerics(boolean)
4191    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.skipArray(boolean)
4192    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.ignoreStaticAccess(boolean)
4193    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.ignoreEnclosingClass(boolean)
4194    3   1    0 spoon.reflect.visitor.PrintingContext.Writable.forceWildcardGenerics(boolean)
4195    3   1    1 spoon.reflect.visitor.PrintingContext.Writable.setStatement(CtStatement)
4196    2   2    0 spoon.reflect.visitor.PrintingContext.Writable.setState(long,boolean)
4197    2   1    0 spoon.reflect.visitor.PrintingContext.modify()
4198    7   5    1 spoon.reflect.visitor.PrintingContext.getCurrentTypeReference()
4199    4   4    0 spoon.reflect.visitor.PrintingContext.getCurrentTypeContext()
4200    2   1    0 spoon.reflect.visitor.PrintingContext.pushCurrentThis(CtType)
4201    2   1    0 spoon.reflect.visitor.PrintingContext.popCurrentThis()
4202    2   1    0 spoon.reflect.visitor.PrintingContext.toString()
4203    3   1    1 spoon.reflect.visitor.PrintingContext.isInCurrentScope(CtTypeReference)
4204    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.CtInheritanceScanner()
4205    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCodeSnippetExpression(T)
4206    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCodeSnippetStatement(CtCodeSnippetStatement)
4207    4   3    1 spoon.reflect.visitor.CtInheritanceScanner.scan(CtElement)
4208    3   2    1 spoon.reflect.visitor.CtInheritanceScanner.scan(CtElement)
4209    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtAbstractInvocation(T)
4210    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtCFlowBreak(CtCFlowBreak)
4211    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtLabelledFlowBreak(CtLabelledFlowBreak)
4212    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtCodeElement(CtCodeElement)
4213    1   1    0 spoon.reflect.visitor.CtInheritanceScanner.scanCtTypeMember(CtTypeMember)
4214    1   1    0 spoon.reflect.visitor.CtInheritanceScanner.scanCtModuleDirective(CtModuleDirective)
4215    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtElement(CtElement)
4216    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtExecutable(R)
4217    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtExpression(T)
4218    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtFormalTypeDeclarer(CtFormalTypeDeclarer)
4219    1   1    0 spoon.reflect.visitor.CtInheritanceScanner.scanCtVisitable(CtVisitable)
4220    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtActualTypeContainer(CtActualTypeContainer)
4221    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtLoop(CtLoop)
4222    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtModifiable(CtModifiable)
4223    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtNamedElement(CtNamedElement)
4224    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtReference(CtReference)
4225    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtStatement(CtStatement)
4226    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtTargetedExpression(E)
4227    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtType(T)
4228    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtTypedElement(T)
4229    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtVariable(T)
4230    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtArrayAccess(E)
4231    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtFieldAccess(T)
4232    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtVariableAccess(T)
4233    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtRHSReceiver(T)
4234    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtShadowable(CtShadowable)
4235    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtBodyHolder(CtBodyHolder)
4236    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtFieldRead(T)
4237    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtFieldWrite(T)
4238    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtSuperAccess(T)
4239    1   1    0 spoon.reflect.visitor.CtInheritanceScanner.scanCtMultiTypedElement(CtMultiTypedElement)
4240    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtOperatorAssignment(A)
4241    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtVariableReference(T)
4242    1   1    1 spoon.reflect.visitor.CtInheritanceScanner.scanCtTypeInformation(CtTypeInformation)
4243    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAnnotation(A)
4244   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAnnotationType(A)
4245    9   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAnonymousExecutable(CtAnonymousExecutable)
4246    8   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtArrayRead(T)
4247    8   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtArrayWrite(T)
4248    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtArrayTypeReference(T)
4249    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAssert(T)
4250    8   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAssignment(A)
4251    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtBinaryOperator(T)
4252    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtBlock(R)
4253    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtBreak(CtBreak)
4254    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCase(E)
4255    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCatch(CtCatch)
4256   12   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtClass(T)
4257   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTypeParameter(CtTypeParameter)
4258    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtConditional(T)
4259   11   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtConstructor(T)
4260    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtContinue(CtContinue)
4261    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtDo(CtDo)
4262    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtEnum(T)
4263    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtExecutableReference(T)
4264   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtField(T)
4265    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtEnumValue(T)
4266    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtThisAccess(T)
4267    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtFieldReference(T)
4268    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtFor(CtFor)
4269    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtForEach(CtForEach)
4270    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtIf(CtIf)
4271   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtInterface(T)
4272   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtInvocation(T)
4273    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtLiteral(T)
4274   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtLocalVariable(T)
4275    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtLocalVariableReference(T)
4276    9   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCatchVariable(T)
4277    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCatchVariableReference(T)
4278   11   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtMethod(T)
4279    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAnnotationMethod(T)
4280    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtNewArray(T)
4281   10   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtConstructorCall(T)
4282    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtNewClass(T)
4283    9   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtLambda(T)
4284    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtExecutableReferenceExpression(E)
4285    1   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtOperatorAssignement(A)
4286    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtPackage(CtPackage)
4287    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtPackageReference(CtPackageReference)
4288    8   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtParameter(T)
4289    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtParameterReference(T)
4290    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtReturn(R)
4291    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtStatementList(CtStatementList)
4292    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtSwitch(E)
4293    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtSynchronized(CtSynchronized)
4294    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtThrow(CtThrow)
4295    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTry(CtTry)
4296    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTryWithResource(CtTryWithResource)
4297    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTypeParameterReference(CtTypeParameterReference)
4298    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtWildcardReference(CtWildcardReference)
4299    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtIntersectionTypeReference(T)
4300    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTypeReference(T)
4301    6   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTypeAccess(T)
4302    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtUnaryOperator(T)
4303    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtVariableRead(T)
4304    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtVariableWrite(T)
4305    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtComment(CtComment)
4306    2   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtJavaDoc(CtJavaDoc)
4307    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtJavaDocTag(CtJavaDocTag)
4308    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtAnnotationFieldAccess(T)
4309    7   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtWhile(CtWhile)
4310    5   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtUnboundVariableReference(T)
4311    1   1    0 spoon.reflect.visitor.CtInheritanceScanner.scanCtCodeSnippet(CtCodeSnippet)
4312    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtImport(CtImport)
4313    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtModule(CtModule)
4314    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtModuleReference(CtModuleReference)
4315    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtPackageExport(CtPackageExport)
4316    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtModuleRequirement(CtModuleRequirement)
4317    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtProvidedService(CtProvidedService)
4318    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtUsedService(CtUsedService)
4319    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtCompilationUnit(CtCompilationUnit)
4320    3   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtPackageDeclaration(CtPackageDeclaration)
4321    4   1    0 spoon.reflect.visitor.CtInheritanceScanner.visitCtTypeMemberWildcardImportReference(CtTypeMemberWildcardImportReference)
4322    2   1    0 spoon.reflect.visitor.DefaultTokenWriter.DefaultTokenWriter(PrinterHelper)
4323    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeOperator(String)
4324    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeSeparator(String)
4325    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeLiteral(String)
4326    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeKeyword(String)
4327    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeIdentifier(String)
4328    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeCodeSnippet(String)
4329    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeComment(CtComment)
4330    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeln()
4331    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.incTab()
4332    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.decTab()
4333    2   1    0 spoon.reflect.visitor.DefaultTokenWriter.reset()
4334    3   1    0 spoon.reflect.visitor.DefaultTokenWriter.writeSpace()
4335    2   1    0 spoon.reflect.visitor.DefaultTokenWriter.getPrinterHelper()
4336    2   1    0 spoon.reflect.visitor.DefaultTokenWriter.toString()
4337    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAnnotation(A)
4338    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCodeSnippetExpression(T)
4339    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCodeSnippetStatement(CtCodeSnippetStatement)
4340    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAnnotationType(A)
4341    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAnonymousExecutable(CtAnonymousExecutable)
4342    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtArrayRead(T)
4343    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtArrayWrite(T)
4344    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtArrayTypeReference(T)
4345    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAssert(T)
4346    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAssignment(A)
4347    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtBinaryOperator(T)
4348    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtBlock(R)
4349    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtBreak(CtBreak)
4350    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCase(S)
4351    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCatch(CtCatch)
4352    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtClass(T)
4353    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTypeParameter(CtTypeParameter)
4354    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtConditional(T)
4355    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtConstructor(T)
4356    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtContinue(CtContinue)
4357    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtDo(CtDo)
4358    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtEnum(T)
4359    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtExecutableReference(T)
4360    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtField(T)
4361    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtEnumValue(T)
4362    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtFieldReference(T)
4363    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtFor(CtFor)
4364    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtForEach(CtForEach)
4365    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtIf(CtIf)
4366    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtInterface(T)
4367    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtInvocation(T)
4368    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtLiteral(T)
4369    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtLocalVariable(T)
4370    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtLocalVariableReference(T)
4371    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCatchVariable(T)
4372    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtMethod(T)
4373    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAnnotationMethod(T)
4374    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtNewArray(T)
4375    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtConstructorCall(T)
4376    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtNewClass(T)
4377    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtLambda(T)
4378    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtExecutableReferenceExpression(E)
4379    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtOperatorAssignment(A)
4380    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtPackage(CtPackage)
4381    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtPackageReference(CtPackageReference)
4382    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtParameter(T)
4383    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtParameterReference(T)
4384    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtReturn(R)
4385    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtStatementList(CtStatementList)
4386    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtSwitch(S)
4387    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtSynchronized(CtSynchronized)
4388    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtThrow(CtThrow)
4389    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTry(CtTry)
4390    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTryWithResource(CtTryWithResource)
4391    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTypeParameterReference(CtTypeParameterReference)
4392    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtWildcardReference(CtWildcardReference)
4393    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtIntersectionTypeReference(T)
4394    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTypeReference(T)
4395    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTypeAccess(T)
4396    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtUnaryOperator(T)
4397    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtVariableRead(T)
4398    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtVariableWrite(T)
4399    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtWhile(CtWhile)
4400    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtAnnotationFieldAccess(T)
4401    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtThisAccess(T)
4402    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCatchVariableReference(T)
4403    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtUnboundVariableReference(T)
4404    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtFieldRead(T)
4405    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtFieldWrite(T)
4406    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtSuperAccess(T)
4407    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtComment(CtComment)
4408    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtJavaDoc(CtJavaDoc)
4409    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtJavaDocTag(CtJavaDocTag)
4410    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtImport(CtImport)
4411    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtModule(CtModule)
4412    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtModuleReference(CtModuleReference)
4413    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtPackageExport(CtPackageExport)
4414    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtModuleRequirement(CtModuleRequirement)
4415    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtProvidedService(CtProvidedService)
4416    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtUsedService(CtUsedService)
4417    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtCompilationUnit(CtCompilationUnit)
4418    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtPackageDeclaration(CtPackageDeclaration)
4419    1   1    0 spoon.reflect.visitor.CtAbstractVisitor.visitCtTypeMemberWildcardImportReference(CtTypeMemberWildcardImportReference)
4420    1   1    0 spoon.reflect.visitor.LiteralHelper.LiteralHelper()
4421   34  15    1 spoon.reflect.visitor.LiteralHelper.getLiteralToken(T)
4422   43  15    0 spoon.reflect.visitor.LiteralHelper.appendCharLiteral(StringBuilder,Character,boolean)
4423    8   4    0 spoon.reflect.visitor.LiteralHelper.getStringLiteral(String,boolean)
4424    4   1    1 spoon.reflect.visitor.ModelConsistencyChecker.ModelConsistencyChecker(Environment,boolean,boolean)
4425   10  10    1 spoon.reflect.visitor.ModelConsistencyChecker.enter(CtElement)
4426    2   1    1 spoon.reflect.visitor.ModelConsistencyChecker.exit(CtElement)
4427    4   3    0 spoon.reflect.visitor.ModelConsistencyChecker.dumpStack()
4428    4   3    1 spoon.reflect.visitor.MinimalImportScanner.shouldTypeBeImported(CtReference)
4429    6   3    0 spoon.reflect.visitor.MinimalImportScanner.addClassImport(CtTypeReference)
4430   12   8    0 spoon.reflect.visitor.MinimalImportScanner.addFieldImport(CtFieldReference)
4431   16  11    0 spoon.reflect.visitor.MinimalImportScanner.addMethodImport(CtExecutableReference)
4432    5   4    0 spoon.reflect.visitor.MinimalImportScanner.isImportedInClassImports(CtTypeReference)
4433    1   1    1 spoon.reflect.visitor.CtAbstractBiScanner.biScan(CtElement,CtElement)
4434    1   1    1 spoon.reflect.visitor.CtAbstractBiScanner.biScan(CtRole,CtElement,CtElement)
4435    1   1    1 spoon.reflect.visitor.CtDequeScanner.CtDequeScanner()
4436    5   3    1 spoon.reflect.visitor.CtDequeScanner.exit(CtElement)
4437    3   1    1 spoon.reflect.visitor.CtDequeScanner.enter(CtElement)
4438    1   1    1 spoon.reflect.visitor.chain.CtConsumableFunction.apply(T,Object)
4439    1   1    1 spoon.reflect.visitor.chain.CtQuery.filterChildren(R)
4440    1   1    0 spoon.reflect.visitor.chain.CtQuery.select(R)
4441    1   1    1 spoon.reflect.visitor.chain.CtQuery.map(R)
4442    1   1    0 spoon.reflect.visitor.chain.CtQuery.setInput(Object)
4443    1   1    0 spoon.reflect.visitor.chain.CtQuery.forEach(R)
4444    1   1    0 spoon.reflect.visitor.chain.CtQuery.list()
4445    1   1    0 spoon.reflect.visitor.chain.CtQuery.list(R)
4446    1   1    0 spoon.reflect.visitor.chain.CtQuery.first()
4447    1   1    0 spoon.reflect.visitor.chain.CtQuery.first(R)
4448    1   1    1 spoon.reflect.visitor.chain.CtQuery.failurePolicy(QueryFailurePolicy)
4449    1   1    1 spoon.reflect.visitor.chain.CtQuery.name(String)
4450    1   1    1 spoon.reflect.visitor.chain.CtQuery.map(I)
4451    1   1    1 spoon.reflect.visitor.chain.CtQuery.terminate()
4452    1   1    1 spoon.reflect.visitor.chain.CtQuery.isTerminated()
4453    1   1    0 spoon.reflect.visitor.chain.CtQueryable.filterChildren(R)
4454    1   1    0 spoon.reflect.visitor.chain.CtQueryable.map(R)
4455    1   1    0 spoon.reflect.visitor.chain.CtQueryable.map(I)
4456    1   1    1 spoon.reflect.visitor.chain.CtConsumer.accept(T)
4457    3   1    0 spoon.reflect.visitor.chain.ScanningMode.ScanningMode(boolean,boolean)
4458    1   1    1 spoon.reflect.visitor.chain.CtFunction.apply(T)
4459    1   1    1 spoon.reflect.visitor.chain.CtQueryAware.setQuery(CtQuery)
4460    1   1    1 spoon.reflect.visitor.CtVisitable.accept(CtVisitor)
4461    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtAnnotation(A)
4462    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtCodeSnippetExpression(T)
4463    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtCodeSnippetStatement(CtCodeSnippetStatement)
4464    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtAnnotationType(A)
4465    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtAnonymousExecutable(CtAnonymousExecutable)
4466    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtArrayRead(T)
4467    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtArrayWrite(T)
4468    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtArrayTypeReference(T)
4469    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtAssert(T)
4470    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtAssignment(A)
4471    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtBinaryOperator(T)
4472    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtBlock(R)
4473    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtBreak(CtBreak)
4474    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtCase(S)
4475    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtCatch(CtCatch)
4476    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtClass(T)
4477    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtTypeParameter(CtTypeParameter)
4478    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtConditional(T)
4479    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtConstructor(T)
4480    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtContinue(CtContinue)
4481    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtDo(CtDo)
4482    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtEnum(T)
4483    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtExecutableReference(T)
4484    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtField(T)
4485    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtEnumValue(T)
4486    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtThisAccess(T)
4487    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtFieldReference(T)
4488    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtUnboundVariableReference(T)
4489    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtFor(CtFor)
4490    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtForEach(CtForEach)
4491    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtIf(CtIf)
4492    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtInterface(T)
4493    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtInvocation(T)
4494    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtLiteral(T)
4495    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtLocalVariable(T)
4496    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtLocalVariableReference(T)
4497    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtCatchVariable(T)
4498    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtCatchVariableReference(T)
4499    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtMethod(T)
4500    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtAnnotationMethod(T)
4501    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtNewArray(T)
4502    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtConstructorCall(T)
4503    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtNewClass(T)
4504    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtLambda(T)
4505    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtExecutableReferenceExpression(E)
4506    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtOperatorAssignment(A)
4507    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtPackage(CtPackage)
4508    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtPackageReference(CtPackageReference)
4509    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtParameter(T)
4510    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtParameterReference(T)
4511    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtReturn(R)
4512    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtStatementList(CtStatementList)
4513    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtSwitch(S)
4514    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtSynchronized(CtSynchronized)
4515    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtThrow(CtThrow)
4516    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtTry(CtTry)
4517    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtTryWithResource(CtTryWithResource)
4518    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtTypeParameterReference(CtTypeParameterReference)
4519    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtWildcardReference(CtWildcardReference)
4520    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtIntersectionTypeReference(T)
4521    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtTypeReference(T)
4522    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtTypeAccess(T)
4523    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtUnaryOperator(T)
4524    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtVariableRead(T)
4525    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtVariableWrite(T)
4526    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtWhile(CtWhile)
4527    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtAnnotationFieldAccess(T)
4528    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtFieldRead(T)
4529    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtFieldWrite(T)
4530    1   1    0 spoon.reflect.visitor.CtVisitor.visitCtSuperAccess(T)
4531    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtComment(CtComment)
4532    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtJavaDoc(CtJavaDoc)
4533    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtJavaDocTag(CtJavaDocTag)
4534    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtImport(CtImport)
4535    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtModule(CtModule)
4536    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtModuleReference(CtModuleReference)
4537    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtPackageExport(CtPackageExport)
4538    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtModuleRequirement(CtModuleRequirement)
4539    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtProvidedService(CtProvidedService)
4540    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtUsedService(CtUsedService)
4541    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtCompilationUnit(CtCompilationUnit)
4542    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtPackageDeclaration(CtPackageDeclaration)
4543    1   1    1 spoon.reflect.visitor.CtVisitor.visitCtTypeMemberWildcardImportReference(CtTypeMemberWildcardImportReference)
4544    3   1    0 spoon.reflect.visitor.CacheBasedConflictFinder.CacheBasedConflictFinder(CtType)
4545    7   3    1 spoon.reflect.visitor.CacheBasedConflictFinder.hasFieldConflict(String)
4546    7   3    1 spoon.reflect.visitor.CacheBasedConflictFinder.hasNestedTypeConflict(String)
4547    2   1    0 spoon.reflect.visitor.CacheBasedConflictFinder.getSimpleName()
4548    2   1    0 spoon.reflect.visitor.CacheBasedConflictFinder.getPackage()
4549    7   7    0 spoon.reflect.visitor.JavaIdentifiers.isJavaIdentifier(String)
4550    4   4    0 spoon.reflect.visitor.JavaIdentifiers.isLegalJavaIdentifier(String)
4551    9   6    0 spoon.reflect.visitor.JavaIdentifiers.isLegalJavaPackageIdentifier(String)
4552    6   5    0 spoon.reflect.visitor.JavaIdentifiers.isLegalJavaExecutableIdentifier(String)
4553    1   1    1 spoon.reflect.visitor.TokenWriter.writeSeparator(String)
4554    1   1    1 spoon.reflect.visitor.TokenWriter.writeOperator(String)
4555    1   1    1 spoon.reflect.visitor.TokenWriter.writeLiteral(String)
4556    1   1    1 spoon.reflect.visitor.TokenWriter.writeKeyword(String)
4557    1   1    1 spoon.reflect.visitor.TokenWriter.writeIdentifier(String)
4558    1   1    1 spoon.reflect.visitor.TokenWriter.writeCodeSnippet(String)
4559    1   1    1 spoon.reflect.visitor.TokenWriter.writeComment(CtComment)
4560    1   1    1 spoon.reflect.visitor.TokenWriter.writeln()
4561    1   1    1 spoon.reflect.visitor.TokenWriter.incTab()
4562    1   1    1 spoon.reflect.visitor.TokenWriter.decTab()
4563    1   1    1 spoon.reflect.visitor.TokenWriter.getPrinterHelper()
4564    1   1    1 spoon.reflect.visitor.TokenWriter.reset()
4565    1   1    1 spoon.reflect.visitor.TokenWriter.writeSpace()
4566    1   1    1 spoon.reflect.visitor.ImportScanner.computeImports(CtElement)
4567    1   1    1 spoon.reflect.visitor.ImportScanner.getAllImports()
4568    1   1    1 spoon.reflect.visitor.ImportScanner.isImported(CtReference)
4569    1   1    1 spoon.reflect.visitor.ImportScanner.initWithImports(CtImport)
4570    1   1    0 spoon.reflect.visitor.OperatorHelper.OperatorHelper()
4571    2   1    0 spoon.reflect.visitor.OperatorHelper.isPrefixOperator(UnaryOperatorKind)
4572    2   1    0 spoon.reflect.visitor.OperatorHelper.isSufixOperator(UnaryOperatorKind)
4573   20  18    1 spoon.reflect.visitor.OperatorHelper.getOperatorText(UnaryOperatorKind)
4574   44  42    1 spoon.reflect.visitor.OperatorHelper.getOperatorText(BinaryOperatorKind)
4575   13   5    0 spoon.reflect.visitor.ListPrinter.ListPrinter(TokenWriter,boolean,String,boolean,boolean,String,boolean,boolean,String)
4576   10   6    1 spoon.reflect.visitor.ListPrinter.printSeparatorIfAppropriate()
4577    5   4    0 spoon.reflect.visitor.ListPrinter.close()
4578    1   1    0 spoon.reflect.visitor.CtBiScannerDefault.enter(spoon.reflect.declaration.CtElement)
4579    1   1    0 spoon.reflect.visitor.CtBiScannerDefault.exit(spoon.reflect.declaration.CtElement)
4580    7   3    0 spoon.reflect.visitor.CtBiScannerDefault.biScan(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
4581    2   1    0 spoon.reflect.visitor.CtBiScannerDefault.biScan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
4582    3   3    0 spoon.reflect.visitor.CtBiScannerDefault.biScan(spoon.reflect.path.CtRole,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
4583    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAnnotation(A)
4584    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAnnotationType(A)
4585    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
4586   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtArrayRead(T)
4587   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtArrayWrite(T)
4588    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtArrayTypeReference(T)
4589    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAssert(T)
4590   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAssignment(A)
4591   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtBinaryOperator(T)
4592    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtBlock(R)
4593    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtBreak(spoon.reflect.code.CtBreak)
4594    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCase(S)
4595    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCatch(spoon.reflect.code.CtCatch)
4596   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtClass(T)
4597    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
4598   11   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtConditional(T)
4599   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtConstructor(T)
4600    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtContinue(spoon.reflect.code.CtContinue)
4601    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtDo(spoon.reflect.code.CtDo)
4602    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtEnum(T)
4603   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtExecutableReference(T)
4604    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtField(T)
4605    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtEnumValue(T)
4606    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtThisAccess(T)
4607    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAnnotationFieldAccess(T)
4608    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtFieldReference(T)
4609   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtFor(spoon.reflect.code.CtFor)
4610    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtForEach(spoon.reflect.code.CtForEach)
4611    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtIf(spoon.reflect.code.CtIf)
4612    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtInterface(T)
4613   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtInvocation(T)
4614    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtLiteral(T)
4615    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtLocalVariable(T)
4616    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtLocalVariableReference(T)
4617    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCatchVariable(T)
4618    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCatchVariableReference(T)
4619   11   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtMethod(T)
4620    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtAnnotationMethod(T)
4621   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtNewArray(T)
4622   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtConstructorCall(T)
4623   11   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtNewClass(T)
4624   11   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtLambda(T)
4625   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtExecutableReferenceExpression(E)
4626   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtOperatorAssignment(A)
4627    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtPackage(spoon.reflect.declaration.CtPackage)
4628    5   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
4629    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtParameter(T)
4630    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtParameterReference(T)
4631    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtReturn(R)
4632    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtStatementList(spoon.reflect.code.CtStatementList)
4633    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtSwitch(S)
4634    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtSynchronized(spoon.reflect.code.CtSynchronized)
4635    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtThrow(spoon.reflect.code.CtThrow)
4636    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTry(spoon.reflect.code.CtTry)
4637   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
4638    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
4639    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
4640    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtIntersectionTypeReference(T)
4641    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTypeReference(T)
4642    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTypeAccess(T)
4643    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtUnaryOperator(T)
4644    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtVariableRead(T)
4645    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtVariableWrite(T)
4646    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtWhile(spoon.reflect.code.CtWhile)
4647    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCodeSnippetExpression(T)
4648    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
4649    5   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtUnboundVariableReference(T)
4650    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtFieldRead(T)
4651    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtFieldWrite(T)
4652    9   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtSuperAccess(T)
4653    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtComment(spoon.reflect.code.CtComment)
4654    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
4655    6   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
4656    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtImport(spoon.reflect.declaration.CtImport)
4657    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtModule(spoon.reflect.declaration.CtModule)
4658    5   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
4659    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
4660    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
4661    8   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
4662    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtUsedService(spoon.reflect.declaration.CtUsedService)
4663   10   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtCompilationUnit(spoon.reflect.declaration.CtCompilationUnit)
4664    7   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtPackageDeclaration(spoon.reflect.declaration.CtPackageDeclaration)
4665    5   1    0 spoon.reflect.visitor.CtBiScannerDefault.visitCtTypeMemberWildcardImportReference(spoon.reflect.reference.CtTypeMemberWildcardImportReference)
4666    1   1    0 spoon.reflect.visitor.Query.Query()
4667    2   1    1 spoon.reflect.visitor.Query.getElements(Factory,E)
4668    2   1    1 spoon.reflect.visitor.Query.getElements(CtElement,E)
4669    2   1    1 spoon.reflect.visitor.Query.getReferences(CtElement,T)
4670    2   1    1 spoon.reflect.visitor.Query.getReferences(Factory,R)
4671    2   1    0 spoon.reflect.visitor.EarlyTerminatingScanner.terminate()
4672    2   1    0 spoon.reflect.visitor.EarlyTerminatingScanner.isTerminated()
4673    2   1    0 spoon.reflect.visitor.EarlyTerminatingScanner.setResult(T)
4674    2   1    1 spoon.reflect.visitor.EarlyTerminatingScanner.getResult()
4675    2   1    1 spoon.reflect.visitor.EarlyTerminatingScanner.getListener()
4676    3   1    1 spoon.reflect.visitor.EarlyTerminatingScanner.setListener(CtScannerListener)
4677    7   6    0 spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,CtElement)
4678    7   6    0 spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,CtElement)
4679    3   1    0 spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,CtElement)
4680   10   6    0 spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtElement)
4681    5   3    1 spoon.reflect.visitor.EarlyTerminatingScanner.doScan(CtRole,CtElement,ScanningMode)
4682   12   2    0 spoon.reflect.visitor.EarlyTerminatingScanner.visitCtCompilationUnit(CtCompilationUnit)
4683    1   1    1 spoon.reflect.visitor.EarlyTerminatingScanner.onElement(CtRole,CtElement)
4684   14   9    0 spoon.reflect.visitor.EarlyTerminatingScanner.scan(CtRole,Object)
4685    2   1    1 spoon.reflect.visitor.EarlyTerminatingScanner.isVisitCompilationUnitContent()
4686    3   1    1 spoon.reflect.visitor.EarlyTerminatingScanner.setVisitCompilationUnitContent(boolean)
4687    4   2    1 spoon.reflect.visitor.CtIterator.ArrayDeque$1.addAll(Collection)
4688    3   2    1 spoon.reflect.visitor.CtIterator.CtIterator(CtElement)
4689    3   2    1 spoon.reflect.visitor.CtIterator.scan(CtElement)
4690    2   1    0 spoon.reflect.visitor.CtIterator.hasNext()
4691    6   1    1 spoon.reflect.visitor.CtIterator.next()
4692    2   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.AccessibleVariablesFinder(CtElement)
4693    4   3    0 spoon.reflect.visitor.AccessibleVariablesFinder.find()
4694    8   6    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtStatementList(CtStatementList)
4695   19   9    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.scanCtType(T)
4696    3   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtTryWithResource(CtTryWithResource)
4697    3   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.scanCtExecutable(CtExecutable)
4698    4   2    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtFor(CtFor)
4699    3   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtForEach(CtForEach)
4700    3   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtMethod(CtMethod)
4701    3   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtLocalVariable(CtLocalVariable)
4702    3   1    0 spoon.reflect.visitor.AccessibleVariablesFinder.VariableScanner.visitCtCatch(CtCatch)
4703   56   3    0 spoon.reflect.visitor.AccessibleVariablesFinder.getVariable(CtElement)
4704    9   7    0 spoon.reflect.visitor.AstParentConsistencyChecker.scan(CtElement)
4705    2   1    0 spoon.reflect.visitor.AstParentConsistencyChecker.toDebugString(CtElement)
4706    1   1    0 spoon.reflect.visitor.CtAbstractImportVisitor.visitTypeImport(T)
4707    1   1    0 spoon.reflect.visitor.CtAbstractImportVisitor.visitMethodImport(T)
4708    1   1    0 spoon.reflect.visitor.CtAbstractImportVisitor.visitFieldImport(T)
4709    1   1    0 spoon.reflect.visitor.CtAbstractImportVisitor.visitAllTypesImport(CtPackageReference)
4710    1   1    0 spoon.reflect.visitor.CtAbstractImportVisitor.visitAllStaticMembersImport(CtTypeMemberWildcardImportReference)
4711    2   1    1 spoon.reflect.visitor.filter.InvocationFilter.InvocationFilter(CtExecutableReference)
4712    2   1    1 spoon.reflect.visitor.filter.InvocationFilter.InvocationFilter(CtMethod)
4713    2   1    0 spoon.reflect.visitor.filter.InvocationFilter.matches(CtInvocation)
4714    3   1    0 spoon.reflect.visitor.filter.OverriddenMethodQuery.apply(CtMethod,Object)
4715    4   3    0 spoon.reflect.visitor.filter.RegexFilter.RegexFilter(String)
4716    3   1    0 spoon.reflect.visitor.filter.RegexFilter.matches(E)
4717    2   1    0 spoon.reflect.visitor.filter.RegexFilter.getType()
4718    2   1    1 spoon.reflect.visitor.filter.AbstractReferenceFilter.AbstractReferenceFilter(T)
4719    1   1    1 spoon.reflect.visitor.filter.AbstractReferenceFilter.AbstractReferenceFilter()
4720    1   1    0 spoon.reflect.visitor.filter.ParentFunction.ParentFunction()
4721    3   1    1 spoon.reflect.visitor.filter.ParentFunction.includingSelf(boolean)
4722   10   8    0 spoon.reflect.visitor.filter.ParentFunction.apply(CtElement,Object)
4723    2   1    0 spoon.reflect.visitor.filter.ParentFunction.setQuery(CtQuery)
4724    2   1    1 spoon.reflect.visitor.filter.TypeFilter.TypeFilter(T)
4725    2   1    0 spoon.reflect.visitor.filter.CtScannerFunction.CtScannerFunction()
4726    3   1    1 spoon.reflect.visitor.filter.CtScannerFunction.includingSelf(boolean)
4727    3   1    1 spoon.reflect.visitor.filter.CtScannerFunction.setListener(CtScannerListener)
4728    6   2    0 spoon.reflect.visitor.filter.CtScannerFunction.apply(CtElement,Object)
4729    2   1    0 spoon.reflect.visitor.filter.CtScannerFunction.setQuery(CtQuery)
4730    3   1    0 spoon.reflect.visitor.filter.CtScannerFunction.Scanner.onElement(CtRole,CtElement)
4731    2   1    0 spoon.reflect.visitor.filter.CtScannerFunction.Scanner.isTerminated()
4732    2   1    0 spoon.reflect.visitor.filter.ParameterReferenceFunction.ParameterReferenceFunction()
4733    2   1    1 spoon.reflect.visitor.filter.ParameterReferenceFunction.ParameterReferenceFunction(CtParameter)
4734    2   1    1 spoon.reflect.visitor.filter.LineFilter.LineFilter()
4735   21  16    0 spoon.reflect.visitor.filter.LineFilter.matches(CtStatement)
4736    2   1    0 spoon.reflect.visitor.filter.ParameterScopeFunction.ParameterScopeFunction()
4737    2   1    0 spoon.reflect.visitor.filter.ParameterScopeFunction.ParameterScopeFunction(CtScannerListener)
4738    5   3    0 spoon.reflect.visitor.filter.ParameterScopeFunction.apply(CtParameter,Object)
4739    2   2    0 spoon.reflect.visitor.filter.ReturnOrThrowFilter.matches(CtCFlowBreak)
4740    4   3    1 spoon.reflect.visitor.filter.VariableAccessFilter.VariableAccessFilter(CtVariableReference)
4741    2   1    0 spoon.reflect.visitor.filter.VariableAccessFilter.matches(T)
4742    2   1    1 spoon.reflect.visitor.filter.FieldAccessFilter.FieldAccessFilter(CtFieldReference)
4743    1   1    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.AllMethodsSameSignatureFunction()
4744    3   1    1 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.includingSelf(boolean)
4745    3   1    1 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.includingLambdas(boolean)
4746    2   1    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.Filter$1.matches(CtLambda)
4747    7   1    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.CtConsumer$1.accept(CtMethod)
4748    2   1    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.CtConsumer$1.accept(CtType)
4749   62  20    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.apply(CtExecutable,Object)
4750    7   5    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.CtConsumer$1.accept(CtMethod)
4751   10   1    1 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.forEachOverridenMethod(ClassTypingContext,CtMethod,String,CtMethod)
4752    6   5    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.getTargetMethodOfHierarchy(CtMethod,ClassTypingContext)
4753    2   1    0 spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction.setQuery(CtQuery)
4754    2   1    0 spoon.reflect.visitor.filter.SubtypeFilter.SubtypeFilter(CtTypeReference)
4755    6   2    1 spoon.reflect.visitor.filter.SubtypeFilter.includingSelf(boolean)
4756    4   4    0 spoon.reflect.visitor.filter.SubtypeFilter.matches(CtType)
4757   23  20    1 spoon.reflect.visitor.filter.CompositeFilter.matches(T)
4758    3   1    1 spoon.reflect.visitor.filter.CompositeFilter.CompositeFilter(FilteringOperator,T)
4759    4   3    0 spoon.reflect.visitor.filter.CompositeFilter.hasMatch(T,T)
4760    2   1    0 spoon.reflect.visitor.filter.CompositeFilter.getType()
4761    5   4    1 spoon.reflect.visitor.filter.NamedElementFilter.NamedElementFilter(T,String)
4762    4   4    0 spoon.reflect.visitor.filter.NamedElementFilter.matches(T)
4763    2   1    0 spoon.reflect.visitor.filter.NamedElementFilter.getType()
4764    1   1    1 spoon.reflect.visitor.filter.ExecutableReferenceFilter.ExecutableReferenceFilter()
4765    2   1    1 spoon.reflect.visitor.filter.ExecutableReferenceFilter.ExecutableReferenceFilter(CtExecutable)
4766   10   5    1 spoon.reflect.visitor.filter.ExecutableReferenceFilter.addExecutable(CtExecutable)
4767    9   8    0 spoon.reflect.visitor.filter.ExecutableReferenceFilter.matches(CtExecutableReference)
4768    3   1    1 spoon.reflect.visitor.filter.OverriddenMethodFilter.OverriddenMethodFilter(CtMethod)
4769    3   1    1 spoon.reflect.visitor.filter.OverriddenMethodFilter.includingSelf(boolean)
4770    4   3    0 spoon.reflect.visitor.filter.OverriddenMethodFilter.matches(CtMethod)
4771    2   1    1 spoon.reflect.visitor.filter.AbstractFilter.AbstractFilter(T)
4772    5   3    1 spoon.reflect.visitor.filter.AbstractFilter.AbstractFilter()
4773    2   1    0 spoon.reflect.visitor.filter.AbstractFilter.getType()
4774    2   1    0 spoon.reflect.visitor.filter.AbstractFilter.matches(T)
4775    2   1    1 spoon.reflect.visitor.filter.AllTypeMembersFunction.AllTypeMembersFunction()
4776    2   1    1 spoon.reflect.visitor.filter.AllTypeMembersFunction.AllTypeMembersFunction(Class)
4777    3   1    1 spoon.reflect.visitor.filter.AllTypeMembersFunction.distinctSet(String)
4778   17  10    0 spoon.reflect.visitor.filter.AllTypeMembersFunction.CtConsumer$1.accept(CtType)
4779   21   2    0 spoon.reflect.visitor.filter.AllTypeMembersFunction.apply(CtTypeInformation,Object)
4780    2   1    0 spoon.reflect.visitor.filter.AllTypeMembersFunction.setQuery(CtQuery)
4781    3   1    1 spoon.reflect.visitor.filter.AllTypeMembersFunction.setMode(Mode)
4782    3   1    1 spoon.reflect.visitor.filter.DirectReferenceFilter.DirectReferenceFilter(CtReference)
4783    4   3    0 spoon.reflect.visitor.filter.DirectReferenceFilter.matches(T)
4784    2   1    0 spoon.reflect.visitor.filter.CatchVariableReferenceFunction.CatchVariableReferenceFunction()
4785    2   1    0 spoon.reflect.visitor.filter.CatchVariableReferenceFunction.CatchVariableReferenceFunction(CtCatchVariable)
4786    1   1    1 spoon.reflect.visitor.filter.LambdaFilter.LambdaFilter()
4787    2   1    1 spoon.reflect.visitor.filter.LambdaFilter.LambdaFilter(CtInterface)
4788    2   1    1 spoon.reflect.visitor.filter.LambdaFilter.LambdaFilter(CtTypeReference)
4789    7   3    1 spoon.reflect.visitor.filter.LambdaFilter.addImplementingInterface(CtTypeInformation)
4790    2   1    0 spoon.reflect.visitor.filter.LambdaFilter.matches(CtLambda)
4791    2   1    0 spoon.reflect.visitor.filter.LocalVariableScopeFunction.LocalVariableScopeFunction()
4792    2   1    0 spoon.reflect.visitor.filter.LocalVariableScopeFunction.LocalVariableScopeFunction(CtScannerListener)
4793    2   1    0 spoon.reflect.visitor.filter.LocalVariableScopeFunction.Filter$1.matches(CtElement)
4794    4   1    0 spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(CtLocalVariable,Object)
4795    2   1    1 spoon.reflect.visitor.filter.OverridingMethodFilter.OverridingMethodFilter(CtMethod)
4796    3   1    1 spoon.reflect.visitor.filter.OverridingMethodFilter.includingSelf(boolean)
4797    4   3    0 spoon.reflect.visitor.filter.OverridingMethodFilter.matches(CtMethod)
4798    3   1    0 spoon.reflect.visitor.filter.VariableScopeFunction.apply(CtVariable,Object)
4799    2   2    0 spoon.reflect.visitor.filter.VariableScopeFunction.Visitor.enter(CtElement)
4800    2   2    1 spoon.reflect.visitor.filter.VariableScopeFunction.Visitor.visitCtField(T)
4801    2   1    1 spoon.reflect.visitor.filter.VariableScopeFunction.Visitor.visitCtLocalVariable(T)
4802    2   1    1 spoon.reflect.visitor.filter.VariableScopeFunction.Visitor.visitCtParameter(T)
4803    2   1    1 spoon.reflect.visitor.filter.VariableScopeFunction.Visitor.visitCtCatchVariable(T)
4804    2   1    0 spoon.reflect.visitor.filter.FieldReferenceFunction.FieldReferenceFunction()
4805    2   1    0 spoon.reflect.visitor.filter.FieldReferenceFunction.FieldReferenceFunction(CtField)
4806   12   4    0 spoon.reflect.visitor.filter.FieldReferenceFunction.apply(CtElement,Object)
4807    1   1    0 spoon.reflect.visitor.filter.FieldScopeFunction.FieldScopeFunction()
4808   11   4    0 spoon.reflect.visitor.filter.FieldScopeFunction.apply(CtField,Object)
4809    2   1    0 spoon.reflect.visitor.filter.FieldScopeFunction.searchForPrivateField(CtField,Object)
4810    2   1    0 spoon.reflect.visitor.filter.FieldScopeFunction.searchForProtectedField(CtField,Object)
4811    2   1    0 spoon.reflect.visitor.filter.FieldScopeFunction.searchForPublicField(CtField,Object)
4812    2   1    0 spoon.reflect.visitor.filter.FieldScopeFunction.searchForPackageProtectedField(CtField,Object)
4813    2   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.LocalVariableReferenceFunction()
4814    2   1    1 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.LocalVariableReferenceFunction(CtLocalVariable)
4815    4   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.LocalVariableReferenceFunction(Class,Class)
4816    4   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.LocalVariableReferenceFunction(Class,Class,CtVariable)
4817    4   2    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.Filter$1.matches(CtElement)
4818    8   6    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.Filter$1.matches(CtElement)
4819   31   7    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.apply(CtElement,Object)
4820    4   2    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.Context.enter(CtElement)
4821    3   2    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.Context.exit(CtElement)
4822    2   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.Context.hasLocalType()
4823    3   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.QueryCreator.QueryCreator(CtElement,CtScannerListener)
4824    2   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.QueryCreator.visitCtLocalVariable(T)
4825    2   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.QueryCreator.visitCtCatchVariable(T)
4826    2   1    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.QueryCreator.visitCtParameter(T)
4827    6   3    0 spoon.reflect.visitor.filter.LocalVariableReferenceFunction.createScopeQuery(CtVariable,CtElement,Context)
4828    1   1    1 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.SubInheritanceHierarchyFunction()
4829    3   1    1 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.includingSelf(boolean)
4830    3   1    1 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.includingInterfaces(boolean)
4831    3   1    1 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.failOnClassNotFound(boolean)
4832    3   2    0 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.CtConsumer$1.accept(CtType)
4833   12   3    0 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.apply(CtTypeInformation,Object)
4834    2   1    0 spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction.setQuery(CtQuery)
4835    2   1    1 spoon.reflect.visitor.filter.ReferenceTypeFilter.ReferenceTypeFilter(T)
4836    1   1    0 spoon.reflect.visitor.filter.SiblingsFunction.SiblingsFunction()
4837    3   1    1 spoon.reflect.visitor.filter.SiblingsFunction.includingSelf(boolean)
4838    3   1    1 spoon.reflect.visitor.filter.SiblingsFunction.mode(Mode)
4839    8   7    0 spoon.reflect.visitor.filter.SiblingsFunction.CtScanner$1.scan(CtElement)
4840   14   3    0 spoon.reflect.visitor.filter.SiblingsFunction.apply(CtElement,Object)
4841    2   1    0 spoon.reflect.visitor.filter.VariableReferenceFunction.VariableReferenceFunction()
4842    2   1    0 spoon.reflect.visitor.filter.VariableReferenceFunction.VariableReferenceFunction(CtVariable)
4843   10   4    0 spoon.reflect.visitor.filter.VariableReferenceFunction.apply(CtElement,Object)
4844    2   2    0 spoon.reflect.visitor.filter.VariableReferenceFunction.Visitor.enter(CtElement)
4845    2   1    1 spoon.reflect.visitor.filter.VariableReferenceFunction.Visitor.visitCtField(T)
4846    2   1    1 spoon.reflect.visitor.filter.VariableReferenceFunction.Visitor.visitCtLocalVariable(T)
4847    2   1    1 spoon.reflect.visitor.filter.VariableReferenceFunction.Visitor.visitCtParameter(T)
4848    2   1    1 spoon.reflect.visitor.filter.VariableReferenceFunction.Visitor.visitCtCatchVariable(T)
4849    2   1    0 spoon.reflect.visitor.filter.CatchVariableScopeFunction.CatchVariableScopeFunction()
4850    2   1    0 spoon.reflect.visitor.filter.CatchVariableScopeFunction.CatchVariableScopeFunction(CtScannerListener)
4851    2   1    0 spoon.reflect.visitor.filter.CatchVariableScopeFunction.apply(CtCatchVariable,Object)
4852    3   1    1 spoon.reflect.visitor.filter.AnnotationFilter.AnnotationFilter(Annotation)
4853    3   1    1 spoon.reflect.visitor.filter.AnnotationFilter.AnnotationFilter(E,Annotation)
4854    2   2    0 spoon.reflect.visitor.filter.AnnotationFilter.matches(E)
4855    7   1    0 spoon.reflect.visitor.ImportScannerImpl.visitCtFieldRead(T)
4856    8   2    0 spoon.reflect.visitor.ImportScannerImpl.visitCtFieldReference(T)
4857    9   3    0 spoon.reflect.visitor.ImportScannerImpl.visitCtExecutableReference(T)
4858   14   7    0 spoon.reflect.visitor.ImportScannerImpl.visitCtTypeReference(T)
4859    3   2    0 spoon.reflect.visitor.ImportScannerImpl.scan(CtElement)
4860   13   7    0 spoon.reflect.visitor.ImportScannerImpl.visitCtJavaDoc(CtJavaDoc)
4861   21  11    0 spoon.reflect.visitor.ImportScannerImpl.matchesTypeName(String,CtTypeReference)
4862    7   6    0 spoon.reflect.visitor.ImportScannerImpl.isTypeMatching(String,CtTypeReference)
4863    3   1    0 spoon.reflect.visitor.ImportScannerImpl.visitCtAnnotationType(A)
4864    3   1    0 spoon.reflect.visitor.ImportScannerImpl.visitCtEnum(T)
4865    7   3    0 spoon.reflect.visitor.ImportScannerImpl.visitCtInterface(T)
4866    7   3    0 spoon.reflect.visitor.ImportScannerImpl.visitCtClass(T)
4867    4   2    0 spoon.reflect.visitor.ImportScannerImpl.visitCtCatchVariable(T)
4868    6   2    0 spoon.reflect.visitor.ImportScannerImpl.visitCtInvocation(CtInvocation)
4869   12   6    0 spoon.reflect.visitor.ImportScannerImpl.getAllImports()
4870   10   3    0 spoon.reflect.visitor.ImportScannerImpl.computeImports(CtElement)
4871   11   7    0 spoon.reflect.visitor.ImportScannerImpl.isImported(CtReference)
4872    3   2    0 spoon.reflect.visitor.ImportScannerImpl.initWithImports(CtImport)
4873    5   5    0 spoon.reflect.visitor.ImportScannerImpl.isThereAnotherClassWithSameNameInAnotherPackage(CtTypeReference)
4874   61  43    1 spoon.reflect.visitor.ImportScannerImpl.addClassImport(CtTypeReference)
4875    3   1    0 spoon.reflect.visitor.ImportScannerImpl.setImportUsed(CtImport)
4876   54  29    0 spoon.reflect.visitor.ImportScannerImpl.isAlreadyInUsedImport(CtReference)
4877   15  15    0 spoon.reflect.visitor.ImportScannerImpl.isImportedInClassImports(CtTypeReference)
4878   16  11    1 spoon.reflect.visitor.ImportScannerImpl.declaringTypeIsLocalOrImported(CtTypeReference)
4879    8   5    1 spoon.reflect.visitor.ImportScannerImpl.isInCollisionWithLocalMethod(CtExecutableReference)
4880   15  12    0 spoon.reflect.visitor.ImportScannerImpl.addMethodImport(CtExecutableReference)
4881    7   6    0 spoon.reflect.visitor.ImportScannerImpl.isImportedInMethodImports(CtExecutableReference)
4882    2   2    0 spoon.reflect.visitor.ImportScannerImpl.getSignature(CtExecutableReference)
4883    9   7    0 spoon.reflect.visitor.ImportScannerImpl.addFieldImport(CtFieldReference)
4884   10  10    0 spoon.reflect.visitor.ImportScannerImpl.isImportedInFieldImports(CtFieldReference)
4885   12   5    0 spoon.reflect.visitor.ImportScannerImpl.classNamePresentInJavaLang(CtTypeReference)
4886   22  14    0 spoon.reflect.visitor.ImportScannerImpl.lookForLocalVariables(CtElement)
4887   66  41    1 spoon.reflect.visitor.ImportScannerImpl.isTypeInCollision(CtReference,boolean)
4888    1   1    1 spoon.reflect.visitor.Filter.matches(T)
4889    1   1    0 spoon.reflect.eval.PartialEvaluator.evaluate(R)
4890    2   1    1 spoon.reflect.factory.FactoryImpl.getParentFactory()
4891    4   2    1 spoon.reflect.factory.FactoryImpl.Annotation()
4892    4   2    1 spoon.reflect.factory.FactoryImpl.Class()
4893    4   2    1 spoon.reflect.factory.FactoryImpl.Code()
4894    4   2    1 spoon.reflect.factory.FactoryImpl.Constructor()
4895    5   2    1 spoon.reflect.factory.FactoryImpl.Core()
4896    4   2    1 spoon.reflect.factory.FactoryImpl.Enum()
4897    4   2    1 spoon.reflect.factory.FactoryImpl.getEnvironment()
4898    4   2    1 spoon.reflect.factory.FactoryImpl.Executable()
4899    4   2    1 spoon.reflect.factory.FactoryImpl.Eval()
4900    4   2    1 spoon.reflect.factory.FactoryImpl.Field()
4901    4   2    1 spoon.reflect.factory.FactoryImpl.Interface()
4902    4   2    1 spoon.reflect.factory.FactoryImpl.Method()
4903    4   2    1 spoon.reflect.factory.FactoryImpl.Package()
4904    4   2    1 spoon.reflect.factory.FactoryImpl.CompilationUnit()
4905    4   2    1 spoon.reflect.factory.FactoryImpl.Type()
4906    4   2    1 spoon.reflect.factory.FactoryImpl.Query()
4907    4   2    1 spoon.reflect.factory.FactoryImpl.Module()
4908    5   1    1 spoon.reflect.factory.FactoryImpl.FactoryImpl(CoreFactory,Environment,Factory)
4909    2   1    1 spoon.reflect.factory.FactoryImpl.FactoryImpl(CoreFactory,Environment)
4910    2   1    0 spoon.reflect.factory.FactoryImpl.ThreadLocal$1.initialValue()
4911   11   4    1 spoon.reflect.factory.FactoryImpl.dedup(String)
4912    2   1    0 spoon.reflect.factory.FactoryImpl.ThreadLocal$1.initialValue()
4913    5   1    1 spoon.reflect.factory.FactoryImpl.readObject(java.io.ObjectInputStream)
4914    2   1    0 spoon.reflect.factory.FactoryImpl.getModel()
4915    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotation(A)
4916    2   1    0 spoon.reflect.factory.FactoryImpl.createVariableAssignment(A,boolean,T)
4917    2   1    0 spoon.reflect.factory.FactoryImpl.createStatementList(R)
4918    2   1    0 spoon.reflect.factory.FactoryImpl.createCtBlock(T)
4919    2   1    0 spoon.reflect.factory.FactoryImpl.createBinaryOperator(CtExpression,CtExpression,BinaryOperatorKind)
4920    2   1    0 spoon.reflect.factory.FactoryImpl.createCatchVariable(T,String,ModifierKind)
4921    2   1    0 spoon.reflect.factory.FactoryImpl.createCodeSnippetExpression(String)
4922    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructorCall(T,CtExpression)
4923    2   1    0 spoon.reflect.factory.FactoryImpl.createClassAccess(T)
4924    2   1    0 spoon.reflect.factory.FactoryImpl.createInvocation(CtExpression,T,CtExpression)
4925    2   1    0 spoon.reflect.factory.FactoryImpl.createInvocation(CtExpression,T,CtExpression)
4926    2   1    0 spoon.reflect.factory.FactoryImpl.createLiteral(T)
4927    2   1    0 spoon.reflect.factory.FactoryImpl.createLocalVariable(T,String,T)
4928    2   1    0 spoon.reflect.factory.FactoryImpl.createLiteralArray(T[])
4929    2   1    0 spoon.reflect.factory.FactoryImpl.createNewClass(T,CtClass,CtExpression)
4930    2   1    0 spoon.reflect.factory.FactoryImpl.createVariableAssignments(T,T)
4931    2   1    0 spoon.reflect.factory.FactoryImpl.createThisAccess(T)
4932    2   1    0 spoon.reflect.factory.FactoryImpl.createThisAccess(T,boolean)
4933    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeAccess(T)
4934    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeAccess(T,boolean)
4935    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeAccessWithoutCloningReference(T)
4936    2   1    0 spoon.reflect.factory.FactoryImpl.createVariableRead(T,boolean)
4937    2   1    0 spoon.reflect.factory.FactoryImpl.createCtField(String,T,String,ModifierKind)
4938    2   1    0 spoon.reflect.factory.FactoryImpl.createCatchVariableReference(T)
4939    2   1    0 spoon.reflect.factory.FactoryImpl.createLocalVariableReference(T)
4940    2   1    0 spoon.reflect.factory.FactoryImpl.createLocalVariableReference(T,String)
4941    2   1    0 spoon.reflect.factory.FactoryImpl.createCtTypeReference(Class)
4942    2   1    0 spoon.reflect.factory.FactoryImpl.createVariableReads(CtVariable)
4943    2   1    0 spoon.reflect.factory.FactoryImpl.createCtCatch(String,Throwable,CtBlock)
4944    2   1    0 spoon.reflect.factory.FactoryImpl.createCodeSnippetStatement(String)
4945    2   1    0 spoon.reflect.factory.FactoryImpl.createComment(String,CtComment.CommentType)
4946    2   1    0 spoon.reflect.factory.FactoryImpl.createInlineComment(String)
4947    2   1    0 spoon.reflect.factory.FactoryImpl.createJavaDocTag(String,CtJavaDocTag.TagType)
4948    2   1    0 spoon.reflect.factory.FactoryImpl.createCtThrow(String)
4949    2   1    0 spoon.reflect.factory.FactoryImpl.createCtPackageReference(Package)
4950    2   1    0 spoon.reflect.factory.FactoryImpl.createDefault(T)
4951    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotation()
4952    2   1    0 spoon.reflect.factory.FactoryImpl.createBlock()
4953    2   1    0 spoon.reflect.factory.FactoryImpl.createReturn()
4954    2   1    0 spoon.reflect.factory.FactoryImpl.createStatementList()
4955    2   1    0 spoon.reflect.factory.FactoryImpl.createCase()
4956    2   1    0 spoon.reflect.factory.FactoryImpl.createSwitch()
4957    2   1    0 spoon.reflect.factory.FactoryImpl.createEnum()
4958    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotationType()
4959    2   1    0 spoon.reflect.factory.FactoryImpl.createAssignment()
4960    2   1    0 spoon.reflect.factory.FactoryImpl.createOperatorAssignment()
4961    2   1    0 spoon.reflect.factory.FactoryImpl.createExecutableReferenceExpression()
4962    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotationFieldAccess()
4963    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayRead()
4964    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayWrite()
4965    2   1    0 spoon.reflect.factory.FactoryImpl.createAssert()
4966    2   1    0 spoon.reflect.factory.FactoryImpl.createBinaryOperator()
4967    2   1    0 spoon.reflect.factory.FactoryImpl.createCatchVariable()
4968    2   1    0 spoon.reflect.factory.FactoryImpl.createCodeSnippetExpression()
4969    2   1    0 spoon.reflect.factory.FactoryImpl.createConditional()
4970    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructorCall()
4971    2   1    0 spoon.reflect.factory.FactoryImpl.createFieldRead()
4972    2   1    0 spoon.reflect.factory.FactoryImpl.createFieldWrite()
4973    2   1    0 spoon.reflect.factory.FactoryImpl.createInvocation()
4974    2   1    0 spoon.reflect.factory.FactoryImpl.createLambda()
4975    2   1    0 spoon.reflect.factory.FactoryImpl.createLiteral()
4976    2   1    0 spoon.reflect.factory.FactoryImpl.createLocalVariable()
4977    2   1    0 spoon.reflect.factory.FactoryImpl.createNewArray()
4978    2   1    0 spoon.reflect.factory.FactoryImpl.createNewClass()
4979    2   1    0 spoon.reflect.factory.FactoryImpl.createSuperAccess()
4980    2   1    0 spoon.reflect.factory.FactoryImpl.createThisAccess()
4981    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeAccess()
4982    2   1    0 spoon.reflect.factory.FactoryImpl.createUnaryOperator()
4983    2   1    0 spoon.reflect.factory.FactoryImpl.createVariableRead()
4984    2   1    0 spoon.reflect.factory.FactoryImpl.createVariableWrite()
4985    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotationMethod()
4986    2   1    0 spoon.reflect.factory.FactoryImpl.createClass()
4987    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructor()
4988    2   1    0 spoon.reflect.factory.FactoryImpl.createInvisibleArrayConstructor()
4989    2   1    0 spoon.reflect.factory.FactoryImpl.createEnumValue()
4990    2   1    0 spoon.reflect.factory.FactoryImpl.createField()
4991    2   1    0 spoon.reflect.factory.FactoryImpl.createInterface()
4992    2   1    0 spoon.reflect.factory.FactoryImpl.createMethod()
4993    2   1    0 spoon.reflect.factory.FactoryImpl.createParameter()
4994    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayTypeReference()
4995    2   1    0 spoon.reflect.factory.FactoryImpl.createCatchVariableReference()
4996    2   1    0 spoon.reflect.factory.FactoryImpl.createExecutableReference()
4997    2   1    0 spoon.reflect.factory.FactoryImpl.createFieldReference()
4998    2   1    0 spoon.reflect.factory.FactoryImpl.createIntersectionTypeReference()
4999    2   1    0 spoon.reflect.factory.FactoryImpl.createLocalVariableReference()
5000    2   1    0 spoon.reflect.factory.FactoryImpl.createParameterReference()
5001    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeReference()
5002    2   1    0 spoon.reflect.factory.FactoryImpl.createUnboundVariableReference()
5003    2   1    0 spoon.reflect.factory.FactoryImpl.createBreak()
5004    2   1    0 spoon.reflect.factory.FactoryImpl.createCatch()
5005    2   1    0 spoon.reflect.factory.FactoryImpl.createCodeSnippetStatement()
5006    2   1    0 spoon.reflect.factory.FactoryImpl.createComment()
5007    2   1    0 spoon.reflect.factory.FactoryImpl.createContinue()
5008    2   1    0 spoon.reflect.factory.FactoryImpl.createDo()
5009    2   1    0 spoon.reflect.factory.FactoryImpl.createFor()
5010    2   1    0 spoon.reflect.factory.FactoryImpl.createForEach()
5011    2   1    0 spoon.reflect.factory.FactoryImpl.createIf()
5012    2   1    0 spoon.reflect.factory.FactoryImpl.createSynchronized()
5013    2   1    0 spoon.reflect.factory.FactoryImpl.createThrow()
5014    2   1    0 spoon.reflect.factory.FactoryImpl.createTry()
5015    2   1    0 spoon.reflect.factory.FactoryImpl.createTryWithResource()
5016    2   1    0 spoon.reflect.factory.FactoryImpl.createWhile()
5017    2   1    0 spoon.reflect.factory.FactoryImpl.createCompilationUnit()
5018    2   1    0 spoon.reflect.factory.FactoryImpl.createSourcePosition(CompilationUnit,int,int,int[])
5019    2   1    0 spoon.reflect.factory.FactoryImpl.createBodyHolderSourcePosition(CompilationUnit,int,int,int,int,int,int,int,int,int[])
5020    2   1    0 spoon.reflect.factory.FactoryImpl.createDeclarationSourcePosition(CompilationUnit,int,int,int,int,int,int,int[])
5021    2   1    0 spoon.reflect.factory.FactoryImpl.createAnonymousExecutable()
5022    2   1    0 spoon.reflect.factory.FactoryImpl.createPackage()
5023    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeParameter()
5024    2   1    0 spoon.reflect.factory.FactoryImpl.createPackageReference()
5025    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeParameterReference()
5026    2   1    0 spoon.reflect.factory.FactoryImpl.createWildcardReference()
5027    2   1    0 spoon.reflect.factory.FactoryImpl.createPartialEvaluator()
5028    2   1    0 spoon.reflect.factory.FactoryImpl.createParameter(CtExecutable,T,String)
5029    2   1    0 spoon.reflect.factory.FactoryImpl.createParameterReference(T)
5030    2   1    0 spoon.reflect.factory.FactoryImpl.createAnonymous(CtClass,Void)
5031    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayReference(String)
5032    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayReference(T)
5033    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayReference(T)
5034    2   1    0 spoon.reflect.factory.FactoryImpl.createIntersectionTypeReferenceWithBounds(CtTypeReference)
5035    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeAdapter(CtFormalTypeDeclarer)
5036    2   1    0 spoon.reflect.factory.FactoryImpl.createReferences(Class)
5037    2   1    0 spoon.reflect.factory.FactoryImpl.createArrayReference(CtTypeReference,int)
5038    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeParameterReference(String)
5039    2   1    0 spoon.reflect.factory.FactoryImpl.createQuery()
5040    2   1    0 spoon.reflect.factory.FactoryImpl.createQuery(Object)
5041    2   1    0 spoon.reflect.factory.FactoryImpl.createQuery(Object[])
5042    2   1    0 spoon.reflect.factory.FactoryImpl.createQuery(Iterable)
5043    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotationType(String)
5044    2   1    0 spoon.reflect.factory.FactoryImpl.createAnnotationType(CtPackage,String)
5045    2   1    0 spoon.reflect.factory.FactoryImpl.createClass(String)
5046    2   1    0 spoon.reflect.factory.FactoryImpl.createClass(CtClass,String)
5047    2   1    0 spoon.reflect.factory.FactoryImpl.createClass(CtPackage,String)
5048    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructor(CtClass,CtConstructor)
5049    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructor(CtClass,CtMethod)
5050    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructor(CtClass,ModifierKind,CtParameter,Throwable)
5051    2   1    0 spoon.reflect.factory.FactoryImpl.createConstructor(CtClass,ModifierKind,CtParameter,Throwable,CtBlock)
5052    2   1    0 spoon.reflect.factory.FactoryImpl.createEnum(String)
5053    2   1    0 spoon.reflect.factory.FactoryImpl.createEnum(CtPackage,String)
5054    2   1    0 spoon.reflect.factory.FactoryImpl.createField(CtType,ModifierKind,CtTypeReference,String)
5055    2   1    0 spoon.reflect.factory.FactoryImpl.createField(CtType,ModifierKind,CtTypeReference,String,CtExpression)
5056    2   1    0 spoon.reflect.factory.FactoryImpl.createField(CtType,CtField)
5057    2   1    0 spoon.reflect.factory.FactoryImpl.createInterface(CtPackage,String)
5058    2   1    0 spoon.reflect.factory.FactoryImpl.createInterface(CtType,String)
5059    2   1    0 spoon.reflect.factory.FactoryImpl.createInterface(String)
5060    2   1    0 spoon.reflect.factory.FactoryImpl.createMethod(CtClass,ModifierKind,CtTypeReference,String,CtParameter,Throwable,CtBlock)
5061    2   1    0 spoon.reflect.factory.FactoryImpl.createMethod(CtType,CtMethod,boolean)
5062    2   1    0 spoon.reflect.factory.FactoryImpl.createMethod(CtType,ModifierKind,CtTypeReference,String,CtParameter,Throwable)
5063    2   1    0 spoon.reflect.factory.FactoryImpl.createPackage(CtPackage,String)
5064    2   1    0 spoon.reflect.factory.FactoryImpl.createElement(CtElement)
5065    2   1    0 spoon.reflect.factory.FactoryImpl.createImport(CtReference)
5066    2   1    0 spoon.reflect.factory.FactoryImpl.createTypeMemberWildcardImportReference(CtTypeReference)
5067    2   1    0 spoon.reflect.factory.FactoryImpl.createPackageExport(CtPackageReference)
5068    2   1    0 spoon.reflect.factory.FactoryImpl.createProvidedService(CtTypeReference)
5069    2   1    0 spoon.reflect.factory.FactoryImpl.createModuleRequirement(CtModuleReference)
5070    2   1    0 spoon.reflect.factory.FactoryImpl.createModule(String)
5071    2   1    0 spoon.reflect.factory.FactoryImpl.createModuleReference(CtModule)
5072    2   1    0 spoon.reflect.factory.FactoryImpl.createUsedService(CtTypeReference)
5073    2   1    0 spoon.reflect.factory.FactoryImpl.createPartialSourcePosition(CompilationUnit)
5074    2   1    0 spoon.reflect.factory.FactoryImpl.createPackageDeclaration(CtPackageReference)
5075    2   1    1 spoon.reflect.factory.PackageFactory.PackageFactory(Factory)
5076    4   3    1 spoon.reflect.factory.PackageFactory.createReference(CtPackage)
5077    2   1    1 spoon.reflect.factory.PackageFactory.createReference(Package)
5078    2   1    1 spoon.reflect.factory.PackageFactory.topLevel()
5079    4   1    1 spoon.reflect.factory.PackageFactory.createReference(String)
5080    4   1    1 spoon.reflect.factory.PackageFactory.createPackageDeclaration(CtPackageReference)
5081    2   1    1 spoon.reflect.factory.PackageFactory.create(CtPackage,String)
5082    2   1    1 spoon.reflect.factory.PackageFactory.getOrCreate(String)
5083   14   5    1 spoon.reflect.factory.PackageFactory.getOrCreate(String,CtModule)
5084   10   6    1 spoon.reflect.factory.PackageFactory.get(String)
5085    2   1    1 spoon.reflect.factory.PackageFactory.getAll()
5086    2   1    1 spoon.reflect.factory.PackageFactory.getRootPackage()
5087    6   2    0 spoon.reflect.factory.PackageFactory.getSubPackageList(CtPackage)
5088    1   1    0 spoon.reflect.factory.CoreFactory.clone(T)
5089    1   1    0 spoon.reflect.factory.CoreFactory.createAnnotation()
5090    1   1    0 spoon.reflect.factory.CoreFactory.createAnnotationType()
5091    1   1    1 spoon.reflect.factory.CoreFactory.createAnonymousExecutable()
5092    1   1    0 spoon.reflect.factory.CoreFactory.createArrayRead()
5093    1   1    0 spoon.reflect.factory.CoreFactory.createArrayWrite()
5094    1   1    0 spoon.reflect.factory.CoreFactory.createArrayTypeReference()
5095    1   1    0 spoon.reflect.factory.CoreFactory.createAssert()
5096    1   1    0 spoon.reflect.factory.CoreFactory.createAssignment()
5097    1   1    0 spoon.reflect.factory.CoreFactory.createBinaryOperator()
5098    1   1    0 spoon.reflect.factory.CoreFactory.createBlock()
5099    1   1    1 spoon.reflect.factory.CoreFactory.createBreak()
5100    1   1    0 spoon.reflect.factory.CoreFactory.createCase()
5101    1   1    1 spoon.reflect.factory.CoreFactory.createCatch()
5102    1   1    0 spoon.reflect.factory.CoreFactory.createClass()
5103    1   1    1 spoon.reflect.factory.CoreFactory.createTypeParameter()
5104    1   1    0 spoon.reflect.factory.CoreFactory.createConditional()
5105    1   1    0 spoon.reflect.factory.CoreFactory.createConstructor()
5106    1   1    0 spoon.reflect.factory.CoreFactory.createInvisibleArrayConstructor()
5107    1   1    1 spoon.reflect.factory.CoreFactory.createContinue()
5108    1   1    1 spoon.reflect.factory.CoreFactory.createDo()
5109    1   1    0 spoon.reflect.factory.CoreFactory.createEnum()
5110    1   1    0 spoon.reflect.factory.CoreFactory.createExecutableReference()
5111    1   1    0 spoon.reflect.factory.CoreFactory.createField()
5112    1   1    0 spoon.reflect.factory.CoreFactory.createEnumValue()
5113    1   1    0 spoon.reflect.factory.CoreFactory.createFieldRead()
5114    1   1    0 spoon.reflect.factory.CoreFactory.createFieldWrite()
5115    1   1    0 spoon.reflect.factory.CoreFactory.createThisAccess()
5116    1   1    0 spoon.reflect.factory.CoreFactory.createSuperAccess()
5117    1   1    0 spoon.reflect.factory.CoreFactory.createFieldReference()
5118    1   1    1 spoon.reflect.factory.CoreFactory.createFor()
5119    1   1    1 spoon.reflect.factory.CoreFactory.createForEach()
5120    1   1    1 spoon.reflect.factory.CoreFactory.createIf()
5121    1   1    0 spoon.reflect.factory.CoreFactory.createInterface()
5122    1   1    0 spoon.reflect.factory.CoreFactory.createInvocation()
5123    1   1    0 spoon.reflect.factory.CoreFactory.createLiteral()
5124    1   1    0 spoon.reflect.factory.CoreFactory.createLocalVariable()
5125    1   1    0 spoon.reflect.factory.CoreFactory.createLocalVariableReference()
5126    1   1    0 spoon.reflect.factory.CoreFactory.createCatchVariable()
5127    1   1    0 spoon.reflect.factory.CoreFactory.createCatchVariableReference()
5128    1   1    0 spoon.reflect.factory.CoreFactory.createMethod()
5129    1   1    0 spoon.reflect.factory.CoreFactory.createAnnotationMethod()
5130    1   1    0 spoon.reflect.factory.CoreFactory.createNewArray()
5131    1   1    0 spoon.reflect.factory.CoreFactory.createConstructorCall()
5132    1   1    0 spoon.reflect.factory.CoreFactory.createNewClass()
5133    1   1    0 spoon.reflect.factory.CoreFactory.createLambda()
5134    1   1    0 spoon.reflect.factory.CoreFactory.createExecutableReferenceExpression()
5135    1   1    0 spoon.reflect.factory.CoreFactory.createOperatorAssignment()
5136    1   1    1 spoon.reflect.factory.CoreFactory.createPackage()
5137    1   1    1 spoon.reflect.factory.CoreFactory.createPackageReference()
5138    1   1    0 spoon.reflect.factory.CoreFactory.createParameter()
5139    1   1    0 spoon.reflect.factory.CoreFactory.createParameterReference()
5140    1   1    0 spoon.reflect.factory.CoreFactory.createReturn()
5141    1   1    1 spoon.reflect.factory.CoreFactory.createSourcePosition(CompilationUnit,int,int,int[])
5142    1   1    1 spoon.reflect.factory.CoreFactory.createPartialSourcePosition(CompilationUnit)
5143    1   1    1 spoon.reflect.factory.CoreFactory.createCompoundSourcePosition(CompilationUnit,int,int,int,int,int[])
5144    1   1    1 spoon.reflect.factory.CoreFactory.createDeclarationSourcePosition(CompilationUnit,int,int,int,int,int,int,int[])
5145    1   1    1 spoon.reflect.factory.CoreFactory.createBodyHolderSourcePosition(CompilationUnit,int,int,int,int,int,int,int,int,int[])
5146    1   1    0 spoon.reflect.factory.CoreFactory.createStatementList()
5147    1   1    0 spoon.reflect.factory.CoreFactory.createSwitch()
5148    1   1    1 spoon.reflect.factory.CoreFactory.createSynchronized()
5149    1   1    1 spoon.reflect.factory.CoreFactory.createThrow()
5150    1   1    1 spoon.reflect.factory.CoreFactory.createTry()
5151    1   1    1 spoon.reflect.factory.CoreFactory.createTryWithResource()
5152    1   1    1 spoon.reflect.factory.CoreFactory.createTypeParameterReference()
5153    1   1    1 spoon.reflect.factory.CoreFactory.createWildcardReference()
5154    1   1    0 spoon.reflect.factory.CoreFactory.createIntersectionTypeReference()
5155    1   1    0 spoon.reflect.factory.CoreFactory.createTypeReference()
5156    1   1    0 spoon.reflect.factory.CoreFactory.createTypeAccess()
5157    1   1    0 spoon.reflect.factory.CoreFactory.createUnaryOperator()
5158    1   1    0 spoon.reflect.factory.CoreFactory.createVariableRead()
5159    1   1    0 spoon.reflect.factory.CoreFactory.createVariableWrite()
5160    1   1    1 spoon.reflect.factory.CoreFactory.createWhile()
5161    1   1    0 spoon.reflect.factory.CoreFactory.createCodeSnippetExpression()
5162    1   1    1 spoon.reflect.factory.CoreFactory.createCodeSnippetStatement()
5163    1   1    1 spoon.reflect.factory.CoreFactory.createComment()
5164    1   1    1 spoon.reflect.factory.CoreFactory.createJavaDoc()
5165    1   1    1 spoon.reflect.factory.CoreFactory.createJavaDocTag()
5166    1   1    1 spoon.reflect.factory.CoreFactory.createImport()
5167    1   1    1 spoon.reflect.factory.CoreFactory.createPackageDeclaration()
5168    1   1    1 spoon.reflect.factory.CoreFactory.getMainFactory()
5169    1   1    1 spoon.reflect.factory.CoreFactory.setMainFactory(Factory)
5170    1   1    1 spoon.reflect.factory.CoreFactory.createCompilationUnit()
5171    1   1    0 spoon.reflect.factory.CoreFactory.createAnnotationFieldAccess()
5172    1   1    0 spoon.reflect.factory.CoreFactory.createUnboundVariableReference()
5173    1   1    1 spoon.reflect.factory.CoreFactory.create(CtElement)
5174    1   1    1 spoon.reflect.factory.CoreFactory.createTypeMemberWildcardImportReference()
5175    1   1    1 spoon.reflect.factory.CoreFactory.createModule()
5176    1   1    1 spoon.reflect.factory.CoreFactory.createModuleReference()
5177    1   1    1 spoon.reflect.factory.CoreFactory.createModuleRequirement()
5178    1   1    1 spoon.reflect.factory.CoreFactory.createPackageExport()
5179    1   1    1 spoon.reflect.factory.CoreFactory.createProvidedService()
5180    1   1    1 spoon.reflect.factory.CoreFactory.createUsedService()
5181    2   1    1 spoon.reflect.factory.MethodFactory.MethodFactory(Factory)
5182    4   1    1 spoon.reflect.factory.MethodFactory.create(CtClass,ModifierKind,R,String,CtParameter,Throwable,B)
5183    6   3    1 spoon.reflect.factory.MethodFactory.create(CtType,T,boolean)
5184   12   4    1 spoon.reflect.factory.MethodFactory.create(CtType,ModifierKind,T,String,CtParameter,Throwable)
5185    2   1    1 spoon.reflect.factory.MethodFactory.createReference(T)
5186    2   1    1 spoon.reflect.factory.MethodFactory.createReference(Method)
5187    8   5    1 spoon.reflect.factory.MethodFactory.getMainMethods()
5188    2   1    1 spoon.reflect.factory.ExecutableFactory.ExecutableFactory(Factory)
5189    5   1    1 spoon.reflect.factory.ExecutableFactory.createAnonymous(CtClass,Void)
5190    7   2    1 spoon.reflect.factory.ExecutableFactory.createParameter(CtExecutable,T,String)
5191    5   1    1 spoon.reflect.factory.ExecutableFactory.createParameterReference(T)
5192    4   1    1 spoon.reflect.factory.ExecutableFactory.createReference(T)
5193   17   9    0 spoon.reflect.factory.ExecutableFactory.createReferenceInternal(T)
5194   14   7    0 spoon.reflect.factory.ExecutableFactory.getMethodParameterType(CtTypeReference)
5195    2   1    1 spoon.reflect.factory.ExecutableFactory.createReference(CtTypeReference,T,String,CtTypeReference)
5196    2   1    1 spoon.reflect.factory.ExecutableFactory.createReference(CtTypeReference,boolean,T,String,CtTypeReference)
5197    9   1    1 spoon.reflect.factory.ExecutableFactory.createReference(CtTypeReference,boolean,T,String,CtTypeReference)
5198    8   1    1 spoon.reflect.factory.ExecutableFactory.createReference(CtTypeReference,T,String,CtTypeReference)
5199   17   2    1 spoon.reflect.factory.ExecutableFactory.createReference(String)
5200    2   1    1 spoon.reflect.factory.InterfaceFactory.InterfaceFactory(Factory)
5201    5   1    1 spoon.reflect.factory.InterfaceFactory.create(CtPackage,String)
5202    5   1    1 spoon.reflect.factory.InterfaceFactory.create(T,String)
5203    4   3    1 spoon.reflect.factory.InterfaceFactory.create(String)
5204    4   3    1 spoon.reflect.factory.InterfaceFactory.get(String)
5205    4   3    1 spoon.reflect.factory.InterfaceFactory.get(Class)
5206    2   1    1 spoon.reflect.factory.QueryFactory.QueryFactory(Factory)
5207    2   1    1 spoon.reflect.factory.QueryFactory.createQuery()
5208    2   1    1 spoon.reflect.factory.QueryFactory.createQuery(Object)
5209    2   1    1 spoon.reflect.factory.QueryFactory.createQuery(Iterable)
5210    2   1    1 spoon.reflect.factory.QueryFactory.createQuery(Object)
5211    1   1    1 spoon.reflect.factory.Factory.getModel()
5212    1   1    1 spoon.reflect.factory.Factory.Core()
5213    1   1    1 spoon.reflect.factory.Factory.Type()
5214    1   1    1 spoon.reflect.factory.Factory.Enum()
5215    1   1    1 spoon.reflect.factory.Factory.getEnvironment()
5216    1   1    1 spoon.reflect.factory.Factory.Package()
5217    1   1    1 spoon.reflect.factory.Factory.Code()
5218    1   1    1 spoon.reflect.factory.Factory.Class()
5219    1   1    1 spoon.reflect.factory.Factory.Field()
5220    1   1    1 spoon.reflect.factory.Factory.Executable()
5221    1   1    1 spoon.reflect.factory.Factory.CompilationUnit()
5222    1   1    1 spoon.reflect.factory.Factory.Interface()
5223    1   1    1 spoon.reflect.factory.Factory.Method()
5224    1   1    1 spoon.reflect.factory.Factory.Annotation()
5225    1   1    1 spoon.reflect.factory.Factory.Eval()
5226    1   1    1 spoon.reflect.factory.Factory.Constructor()
5227    1   1    1 spoon.reflect.factory.Factory.Query()
5228    1   1    1 spoon.reflect.factory.Factory.Module()
5229    1   1    0 spoon.reflect.factory.Factory.createAnnotation(A)
5230    1   1    0 spoon.reflect.factory.Factory.createVariableAssignment(A,boolean,T)
5231    1   1    0 spoon.reflect.factory.Factory.createStatementList(R)
5232    1   1    0 spoon.reflect.factory.Factory.createCtBlock(T)
5233    1   1    0 spoon.reflect.factory.Factory.createBinaryOperator(CtExpression,CtExpression,BinaryOperatorKind)
5234    1   1    0 spoon.reflect.factory.Factory.createCatchVariable(T,String,ModifierKind)
5235    1   1    0 spoon.reflect.factory.Factory.createCodeSnippetExpression(String)
5236    1   1    0 spoon.reflect.factory.Factory.createConstructorCall(T,CtExpression)
5237    1   1    0 spoon.reflect.factory.Factory.createClassAccess(T)
5238    1   1    0 spoon.reflect.factory.Factory.createInvocation(CtExpression,T,CtExpression)
5239    1   1    0 spoon.reflect.factory.Factory.createInvocation(CtExpression,T,CtExpression)
5240    1   1    0 spoon.reflect.factory.Factory.createLiteral(T)
5241    1   1    0 spoon.reflect.factory.Factory.createLocalVariable(T,String,T)
5242    1   1    1 spoon.reflect.factory.Factory.createLiteralArray(T[])
5243    1   1    0 spoon.reflect.factory.Factory.createNewClass(T,CtClass,CtExpression)
5244    1   1    0 spoon.reflect.factory.Factory.createVariableAssignments(T,T)
5245    1   1    0 spoon.reflect.factory.Factory.createThisAccess(T)
5246    1   1    0 spoon.reflect.factory.Factory.createThisAccess(T,boolean)
5247    1   1    0 spoon.reflect.factory.Factory.createTypeAccess(T)
5248    1   1    0 spoon.reflect.factory.Factory.createTypeAccess(T,boolean)
5249    1   1    0 spoon.reflect.factory.Factory.createTypeAccessWithoutCloningReference(T)
5250    1   1    0 spoon.reflect.factory.Factory.createVariableRead(T,boolean)
5251    1   1    0 spoon.reflect.factory.Factory.createCtField(String,T,String,ModifierKind)
5252    1   1    0 spoon.reflect.factory.Factory.createCatchVariableReference(T)
5253    1   1    0 spoon.reflect.factory.Factory.createLocalVariableReference(T)
5254    1   1    0 spoon.reflect.factory.Factory.createLocalVariableReference(T,String)
5255    1   1    0 spoon.reflect.factory.Factory.createCtTypeReference(Class)
5256    1   1    1 spoon.reflect.factory.Factory.createVariableReads(CtVariable)
5257    1   1    1 spoon.reflect.factory.Factory.createCtCatch(String,Throwable,CtBlock)
5258    1   1    1 spoon.reflect.factory.Factory.createCodeSnippetStatement(String)
5259    1   1    1 spoon.reflect.factory.Factory.createComment(String,CtComment.CommentType)
5260    1   1    1 spoon.reflect.factory.Factory.createJavaDocTag(String,CtJavaDocTag.TagType)
5261    1   1    1 spoon.reflect.factory.Factory.createInlineComment(String)
5262    1   1    1 spoon.reflect.factory.Factory.createCtThrow(String)
5263    1   1    1 spoon.reflect.factory.Factory.createCtPackageReference(Package)
5264    1   1    0 spoon.reflect.factory.Factory.createDefault(T)
5265    1   1    0 spoon.reflect.factory.Factory.createAnnotation()
5266    1   1    0 spoon.reflect.factory.Factory.createBlock()
5267    1   1    0 spoon.reflect.factory.Factory.createReturn()
5268    1   1    0 spoon.reflect.factory.Factory.createStatementList()
5269    1   1    0 spoon.reflect.factory.Factory.createCase()
5270    1   1    0 spoon.reflect.factory.Factory.createSwitch()
5271    1   1    0 spoon.reflect.factory.Factory.createEnum()
5272    1   1    0 spoon.reflect.factory.Factory.createAnnotationType()
5273    1   1    0 spoon.reflect.factory.Factory.createAssignment()
5274    1   1    0 spoon.reflect.factory.Factory.createOperatorAssignment()
5275    1   1    0 spoon.reflect.factory.Factory.createExecutableReferenceExpression()
5276    1   1    0 spoon.reflect.factory.Factory.createAnnotationFieldAccess()
5277    1   1    0 spoon.reflect.factory.Factory.createArrayRead()
5278    1   1    0 spoon.reflect.factory.Factory.createArrayWrite()
5279    1   1    0 spoon.reflect.factory.Factory.createAssert()
5280    1   1    0 spoon.reflect.factory.Factory.createBinaryOperator()
5281    1   1    0 spoon.reflect.factory.Factory.createCatchVariable()
5282    1   1    0 spoon.reflect.factory.Factory.createCodeSnippetExpression()
5283    1   1    0 spoon.reflect.factory.Factory.createConditional()
5284    1   1    0 spoon.reflect.factory.Factory.createConstructorCall()
5285    1   1    0 spoon.reflect.factory.Factory.createFieldRead()
5286    1   1    0 spoon.reflect.factory.Factory.createFieldWrite()
5287    1   1    0 spoon.reflect.factory.Factory.createInvocation()
5288    1   1    0 spoon.reflect.factory.Factory.createLambda()
5289    1   1    0 spoon.reflect.factory.Factory.createLiteral()
5290    1   1    0 spoon.reflect.factory.Factory.createLocalVariable()
5291    1   1    0 spoon.reflect.factory.Factory.createNewArray()
5292    1   1    0 spoon.reflect.factory.Factory.createNewClass()
5293    1   1    0 spoon.reflect.factory.Factory.createSuperAccess()
5294    1   1    0 spoon.reflect.factory.Factory.createThisAccess()
5295    1   1    0 spoon.reflect.factory.Factory.createTypeAccess()
5296    1   1    0 spoon.reflect.factory.Factory.createUnaryOperator()
5297    1   1    0 spoon.reflect.factory.Factory.createVariableRead()
5298    1   1    0 spoon.reflect.factory.Factory.createVariableWrite()
5299    1   1    0 spoon.reflect.factory.Factory.createAnnotationMethod()
5300    1   1    0 spoon.reflect.factory.Factory.createClass()
5301    1   1    0 spoon.reflect.factory.Factory.createConstructor()
5302    1   1    0 spoon.reflect.factory.Factory.createInvisibleArrayConstructor()
5303    1   1    0 spoon.reflect.factory.Factory.createEnumValue()
5304    1   1    0 spoon.reflect.factory.Factory.createField()
5305    1   1    0 spoon.reflect.factory.Factory.createInterface()
5306    1   1    0 spoon.reflect.factory.Factory.createMethod()
5307    1   1    0 spoon.reflect.factory.Factory.createParameter()
5308    1   1    0 spoon.reflect.factory.Factory.createArrayTypeReference()
5309    1   1    0 spoon.reflect.factory.Factory.createCatchVariableReference()
5310    1   1    0 spoon.reflect.factory.Factory.createExecutableReference()
5311    1   1    0 spoon.reflect.factory.Factory.createFieldReference()
5312    1   1    0 spoon.reflect.factory.Factory.createIntersectionTypeReference()
5313    1   1    0 spoon.reflect.factory.Factory.createLocalVariableReference()
5314    1   1    0 spoon.reflect.factory.Factory.createParameterReference()
5315    1   1    0 spoon.reflect.factory.Factory.createTypeReference()
5316    1   1    0 spoon.reflect.factory.Factory.createUnboundVariableReference()
5317    1   1    1 spoon.reflect.factory.Factory.createBreak()
5318    1   1    1 spoon.reflect.factory.Factory.createCatch()
5319    1   1    1 spoon.reflect.factory.Factory.createCodeSnippetStatement()
5320    1   1    1 spoon.reflect.factory.Factory.createComment()
5321    1   1    1 spoon.reflect.factory.Factory.createContinue()
5322    1   1    1 spoon.reflect.factory.Factory.createDo()
5323    1   1    1 spoon.reflect.factory.Factory.createFor()
5324    1   1    1 spoon.reflect.factory.Factory.createForEach()
5325    1   1    1 spoon.reflect.factory.Factory.createIf()
5326    1   1    1 spoon.reflect.factory.Factory.createSynchronized()
5327    1   1    1 spoon.reflect.factory.Factory.createThrow()
5328    1   1    1 spoon.reflect.factory.Factory.createTry()
5329    1   1    1 spoon.reflect.factory.Factory.createTryWithResource()
5330    1   1    1 spoon.reflect.factory.Factory.createWhile()
5331    1   1    1 spoon.reflect.factory.Factory.createCompilationUnit()
5332    1   1    1 spoon.reflect.factory.Factory.createSourcePosition(CompilationUnit,int,int,int[])
5333    1   1    1 spoon.reflect.factory.Factory.createBodyHolderSourcePosition(CompilationUnit,int,int,int,int,int,int,int,int,int[])
5334    1   1    1 spoon.reflect.factory.Factory.createDeclarationSourcePosition(CompilationUnit,int,int,int,int,int,int,int[])
5335    1   1    1 spoon.reflect.factory.Factory.createAnonymousExecutable()
5336    1   1    1 spoon.reflect.factory.Factory.createPackage()
5337    1   1    1 spoon.reflect.factory.Factory.createTypeParameter()
5338    1   1    1 spoon.reflect.factory.Factory.createPackageReference()
5339    1   1    1 spoon.reflect.factory.Factory.createTypeParameterReference()
5340    1   1    1 spoon.reflect.factory.Factory.createWildcardReference()
5341    1   1    1 spoon.reflect.factory.Factory.createPartialEvaluator()
5342    1   1    0 spoon.reflect.factory.Factory.createParameter(CtExecutable,T,String)
5343    1   1    0 spoon.reflect.factory.Factory.createParameterReference(T)
5344    1   1    1 spoon.reflect.factory.Factory.createAnonymous(CtClass,Void)
5345    1   1    0 spoon.reflect.factory.Factory.createArrayReference(String)
5346    1   1    0 spoon.reflect.factory.Factory.createArrayReference(T)
5347    1   1    0 spoon.reflect.factory.Factory.createArrayReference(T)
5348    1   1    0 spoon.reflect.factory.Factory.createIntersectionTypeReferenceWithBounds(CtTypeReference)
5349    1   1    1 spoon.reflect.factory.Factory.createTypeAdapter(CtFormalTypeDeclarer)
5350    1   1    1 spoon.reflect.factory.Factory.createReferences(Class)
5351    1   1    1 spoon.reflect.factory.Factory.createArrayReference(CtTypeReference,int)
5352    1   1    1 spoon.reflect.factory.Factory.createTypeParameterReference(String)
5353    1   1    1 spoon.reflect.factory.Factory.createQuery()
5354    1   1    1 spoon.reflect.factory.Factory.createQuery(Object)
5355    1   1    1 spoon.reflect.factory.Factory.createQuery(Object)
5356    1   1    1 spoon.reflect.factory.Factory.createQuery(Iterable)
5357    1   1    1 spoon.reflect.factory.Factory.createAnnotationType(String)
5358    1   1    1 spoon.reflect.factory.Factory.createAnnotationType(CtPackage,String)
5359    1   1    1 spoon.reflect.factory.Factory.createClass(String)
5360    1   1    1 spoon.reflect.factory.Factory.createClass(CtClass,String)
5361    1   1    1 spoon.reflect.factory.Factory.createClass(CtPackage,String)
5362    1   1    1 spoon.reflect.factory.Factory.createConstructor(CtClass,CtConstructor)
5363    1   1    1 spoon.reflect.factory.Factory.createConstructor(CtClass,CtMethod)
5364    1   1    1 spoon.reflect.factory.Factory.createConstructor(CtClass,ModifierKind,CtParameter,Throwable)
5365    1   1    1 spoon.reflect.factory.Factory.createConstructor(CtClass,ModifierKind,CtParameter,Throwable,CtBlock)
5366    1   1    1 spoon.reflect.factory.Factory.createEnum(String)
5367    1   1    1 spoon.reflect.factory.Factory.createEnum(CtPackage,String)
5368    1   1    1 spoon.reflect.factory.Factory.createField(CtType,ModifierKind,CtTypeReference,String)
5369    1   1    1 spoon.reflect.factory.Factory.createField(CtType,ModifierKind,CtTypeReference,String,CtExpression)
5370    1   1    1 spoon.reflect.factory.Factory.createField(CtType,CtField)
5371    1   1    1 spoon.reflect.factory.Factory.createInterface(CtPackage,String)
5372    1   1    1 spoon.reflect.factory.Factory.createInterface(CtType,String)
5373    1   1    1 spoon.reflect.factory.Factory.createInterface(String)
5374    1   1    1 spoon.reflect.factory.Factory.createMethod(CtClass,ModifierKind,CtTypeReference,String,CtParameter,Throwable,CtBlock)
5375    1   1    1 spoon.reflect.factory.Factory.createMethod(CtType,CtMethod,boolean)
5376    1   1    1 spoon.reflect.factory.Factory.createMethod(CtType,ModifierKind,CtTypeReference,String,CtParameter,Throwable)
5377    1   1    1 spoon.reflect.factory.Factory.createPackage(CtPackage,String)
5378    1   1    1 spoon.reflect.factory.Factory.createElement(CtElement)
5379    1   1    1 spoon.reflect.factory.Factory.createImport(CtReference)
5380    1   1    1 spoon.reflect.factory.Factory.createTypeMemberWildcardImportReference(CtTypeReference)
5381    1   1    1 spoon.reflect.factory.Factory.createPackageExport(CtPackageReference)
5382    1   1    1 spoon.reflect.factory.Factory.createProvidedService(CtTypeReference)
5383    1   1    1 spoon.reflect.factory.Factory.createModuleRequirement(CtModuleReference)
5384    1   1    1 spoon.reflect.factory.Factory.createModule(String)
5385    1   1    1 spoon.reflect.factory.Factory.createModuleReference(CtModule)
5386    1   1    1 spoon.reflect.factory.Factory.createUsedService(CtTypeReference)
5387    1   1    1 spoon.reflect.factory.Factory.createPartialSourcePosition(CompilationUnit)
5388    1   1    1 spoon.reflect.factory.Factory.createPackageDeclaration(CtPackageReference)
5389    2   1    1 spoon.reflect.factory.EnumFactory.EnumFactory(Factory)
5390    5   1    1 spoon.reflect.factory.EnumFactory.create(CtPackage,String)
5391    2   1    1 spoon.reflect.factory.EnumFactory.create(String)
5392    4   3    1 spoon.reflect.factory.EnumFactory.get(String)
5393    5   3    1 spoon.reflect.factory.EnumFactory.getEnum(T)
5394    2   1    1 spoon.reflect.factory.ConstructorFactory.ConstructorFactory(Factory)
5395    4   1    1 spoon.reflect.factory.ConstructorFactory.create(T,CtConstructor)
5396   11   1    1 spoon.reflect.factory.ConstructorFactory.create(T,CtMethod)
5397    7   1    1 spoon.reflect.factory.ConstructorFactory.create(T,ModifierKind,CtParameter,Throwable)
5398    5   1    1 spoon.reflect.factory.ConstructorFactory.createDefault(T)
5399    4   1    1 spoon.reflect.factory.ConstructorFactory.create(T,ModifierKind,CtParameter,Throwable,T)
5400    2   1    1 spoon.reflect.factory.ConstructorFactory.createReference(T)
5401    3   1    1 spoon.reflect.factory.ConstructorFactory.createReference(T)
5402   10   4    1 spoon.reflect.factory.ConstructorFactory.createReference(T,CtExpression)
5403    2   1    1 spoon.reflect.factory.ClassFactory.ClassFactory(Factory)
5404    5   1    1 spoon.reflect.factory.ClassFactory.create(CtClass,String)
5405    5   1    1 spoon.reflect.factory.ClassFactory.create(CtPackage,String)
5406    5   3    1 spoon.reflect.factory.ClassFactory.create(String)
5407    4   3    1 spoon.reflect.factory.ClassFactory.get(Class)
5408    4   3    1 spoon.reflect.factory.ClassFactory.get(String)
5409    2   1    1 spoon.reflect.factory.CompilationUnitFactory.CompilationUnitFactory(Factory)
5410    2   1    1 spoon.reflect.factory.CompilationUnitFactory.getMap()
5411    2   1    1 spoon.reflect.factory.CompilationUnitFactory.create()
5412   17   7    0 spoon.reflect.factory.CompilationUnitFactory.getOrCreate(CtPackage)
5413   21  11    0 spoon.reflect.factory.CompilationUnitFactory.getOrCreate(CtType)
5414   12   6    0 spoon.reflect.factory.CompilationUnitFactory.getOrCreate(CtModule)
5415   12   5    1 spoon.reflect.factory.CompilationUnitFactory.getOrCreate(String)
5416    2   1    1 spoon.reflect.factory.CompilationUnitFactory.removeFromCache(String)
5417    1   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.CtElementImpl$1.accept(CtVisitor)
5418    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.CtElementImpl$1.getParent()
5419    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.CtElementImpl$1.getFactory()
5420    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.addModule(CtModule)
5421    5   4    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.getModule(String)
5422    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.getAllModules()
5423    6   5    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.setSimpleName(String)
5424    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.toString()
5425    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.accept(CtVisitor)
5426    2   1    0 spoon.reflect.factory.ModuleFactory.CtUnnamedModule.getParent()
5427    2   1    0 spoon.reflect.factory.ModuleFactory.ModuleFactory(Factory)
5428    2   1    0 spoon.reflect.factory.ModuleFactory.getUnnamedModule()
5429    2   1    0 spoon.reflect.factory.ModuleFactory.getAllModules()
5430    2   1    0 spoon.reflect.factory.ModuleFactory.getModule(String)
5431    9   5    0 spoon.reflect.factory.ModuleFactory.getOrCreate(String)
5432    2   1    0 spoon.reflect.factory.ModuleFactory.createReference(CtModule)
5433    2   1    0 spoon.reflect.factory.ModuleFactory.createModuleRequirement(CtModuleReference)
5434    2   1    0 spoon.reflect.factory.ModuleFactory.createPackageExport(CtPackageReference)
5435    2   1    0 spoon.reflect.factory.ModuleFactory.createProvidedService(CtTypeReference)
5436    2   1    0 spoon.reflect.factory.ModuleFactory.createUsedService(CtTypeReference)
5437    2   1    1 spoon.reflect.factory.SubFactory.SubFactory(Factory)
5438    2   1    1 spoon.reflect.factory.FieldFactory.FieldFactory(Factory)
5439    8   2    1 spoon.reflect.factory.FieldFactory.create(CtType,ModifierKind,T,String)
5440    4   1    1 spoon.reflect.factory.FieldFactory.create(CtType,ModifierKind,T,String,T)
5441    5   2    1 spoon.reflect.factory.FieldFactory.create(CtType,T)
5442    5   1    1 spoon.reflect.factory.FieldFactory.createReference(T)
5443    6   1    1 spoon.reflect.factory.FieldFactory.createReference(CtTypeReference,T,String)
5444    7   1    1 spoon.reflect.factory.FieldFactory.createReference(Field)
5445   10   1    1 spoon.reflect.factory.FieldFactory.createReference(String)
5446    2   1    1 spoon.reflect.factory.CodeFactory.CodeFactory(Factory)
5447    2   1    1 spoon.reflect.factory.CodeFactory.createBinaryOperator(CtExpression,CtExpression,BinaryOperatorKind)
5448    6   3    1 spoon.reflect.factory.CodeFactory.createTypeAccess(T)
5449    2   1    1 spoon.reflect.factory.CodeFactory.createTypeAccess(T,boolean)
5450    4   1    1 spoon.reflect.factory.CodeFactory.createTypeAccessWithoutCloningReference(T)
5451   12   1    1 spoon.reflect.factory.CodeFactory.createClassAccess(T)
5452   13   3    1 spoon.reflect.factory.CodeFactory.createConstructorCall(T,CtExpression)
5453    8   1    1 spoon.reflect.factory.CodeFactory.createNewClass(T,CtClass,CtExpression)
5454    4   1    1 spoon.reflect.factory.CodeFactory.createInvocation(CtExpression,T,CtExpression)
5455    2   1    1 spoon.reflect.factory.CodeFactory.createInvocation(CtExpression,T,CtExpression)
5456    8   2    1 spoon.reflect.factory.CodeFactory.createLiteral(T)
5457   13   6    1 spoon.reflect.factory.CodeFactory.createLiteralArray(T[])
5458    2   1    1 spoon.reflect.factory.CodeFactory.createLocalVariable(T,String,T)
5459    6   2    1 spoon.reflect.factory.CodeFactory.createLocalVariableReference(T)
5460    2   1    1 spoon.reflect.factory.CodeFactory.createLocalVariableReference(T,String)
5461    2   1    1 spoon.reflect.factory.CodeFactory.createCatchVariable(T,String,ModifierKind)
5462    2   1    1 spoon.reflect.factory.CodeFactory.createCatchVariableReference(T)
5463    5   2    1 spoon.reflect.factory.CodeFactory.createStatementList(R)
5464    2   1    1 spoon.reflect.factory.CodeFactory.createThisAccess(T)
5465    7   1    1 spoon.reflect.factory.CodeFactory.createThisAccess(T,boolean)
5466    9   3    1 spoon.reflect.factory.CodeFactory.createVariableRead(T,boolean)
5467    5   2    1 spoon.reflect.factory.CodeFactory.createVariableReads(CtVariable)
5468    3   1    1 spoon.reflect.factory.CodeFactory.createVariableAssignment(A,boolean,T)
5469    5   2    1 spoon.reflect.factory.CodeFactory.createVariableAssignments(T,T)
5470    2   1    1 spoon.reflect.factory.CodeFactory.createCtField(String,T,String,ModifierKind)
5471    2   1    1 spoon.reflect.factory.CodeFactory.createCtBlock(T)
5472    6   5    1 spoon.reflect.factory.CodeFactory.getOrCreateCtBlock(T)
5473    2   1    1 spoon.reflect.factory.CodeFactory.createCtThrow(String)
5474    3   1    1 spoon.reflect.factory.CodeFactory.createCtCatch(String,Throwable,CtBlock)
5475   10   7    1 spoon.reflect.factory.CodeFactory.createCtTypeReference(Class)
5476    2   1    1 spoon.reflect.factory.CodeFactory.createCtPackageReference(Package)
5477    4   1    1 spoon.reflect.factory.CodeFactory.createAnnotation(A)
5478    5   2    1 spoon.reflect.factory.CodeFactory.getReferences(E)
5479    4   1    1 spoon.reflect.factory.CodeFactory.modifiers(ModifierKind)
5480    4   1    1 spoon.reflect.factory.CodeFactory.createCodeSnippetExpression(String)
5481    4   1    1 spoon.reflect.factory.CodeFactory.createCodeSnippetStatement(String)
5482    4   3    1 spoon.reflect.factory.CodeFactory.createComment(String,CtComment.CommentType)
5483    4   3    1 spoon.reflect.factory.CodeFactory.createInlineComment(String)
5484   15   7    1 spoon.reflect.factory.CodeFactory.createJavaDocTag(String,CtJavaDocTag.TagType)
5485    2   1    1 spoon.reflect.factory.EvalFactory.EvalFactory(Factory)
5486    2   1    1 spoon.reflect.factory.EvalFactory.createPartialEvaluator()
5487    2   1    1 spoon.reflect.factory.AnnotationFactory.AnnotationFactory(Factory)
5488    5   1    1 spoon.reflect.factory.AnnotationFactory.create(CtPackage,String)
5489    2   1    1 spoon.reflect.factory.AnnotationFactory.create(String)
5490    2   1    1 spoon.reflect.factory.AnnotationFactory.getAnnotationType(String)
5491    2   1    1 spoon.reflect.factory.AnnotationFactory.annotate(CtElement,A,String,Object)
5492   20   7    1 spoon.reflect.factory.AnnotationFactory.annotate(CtElement,A,String,Object)
5493    2   1    1 spoon.reflect.factory.AnnotationFactory.annotate(CtElement,A)
5494   11   4    1 spoon.reflect.factory.AnnotationFactory.annotate(CtElement,A)
5495    1   1    1 spoon.reflect.reference.CtReference.getSimpleName()
5496    1   1    1 spoon.reflect.reference.CtReference.setSimpleName(String)
5497    1   1    1 spoon.reflect.reference.CtReference.getDeclaration()
5498    1   1    0 spoon.reflect.reference.CtReference.clone()
5499    1   1    1 spoon.reflect.reference.CtReference.setComments(CtComment)
5500    1   1    1 spoon.reflect.reference.CtActualTypeContainer.getActualTypeArguments()
5501    1   1    1 spoon.reflect.reference.CtActualTypeContainer.setActualTypeArguments(CtTypeReference)
5502    1   1    0 spoon.reflect.reference.CtActualTypeContainer.addActualTypeArgument(CtTypeReference)
5503    1   1    1 spoon.reflect.reference.CtActualTypeContainer.removeActualTypeArgument(CtTypeReference)
5504    1   1    0 spoon.reflect.reference.CtModuleReference.getDeclaration()
5505    1   1    0 spoon.reflect.reference.CtModuleReference.clone()
5506    1   1    1 spoon.reflect.reference.CtArrayTypeReference.getComponentType()
5507    1   1    1 spoon.reflect.reference.CtArrayTypeReference.getArrayType()
5508    1   1    1 spoon.reflect.reference.CtArrayTypeReference.setComponentType(CtTypeReference)
5509    1   1    1 spoon.reflect.reference.CtArrayTypeReference.getDimensionCount()
5510    1   1    1 spoon.reflect.reference.CtArrayTypeReference.getSimpleName()
5511    1   1    1 spoon.reflect.reference.CtArrayTypeReference.setSimpleName(String)
5512    1   1    0 spoon.reflect.reference.CtArrayTypeReference.clone()
5513    1   1    1 spoon.reflect.reference.CtPackageReference.getDeclaration()
5514    1   1    1 spoon.reflect.reference.CtPackageReference.getActualPackage()
5515    1   1    1 spoon.reflect.reference.CtPackageReference.isUnnamedPackage()
5516    1   1    0 spoon.reflect.reference.CtPackageReference.clone()
5517    1   1    1 spoon.reflect.reference.CtPackageReference.getSimpleName()
5518    1   1    1 spoon.reflect.reference.CtPackageReference.getQualifiedName()
5519    1   1    1 spoon.reflect.reference.CtTypeReference.getSimpleName()
5520    1   1    1 spoon.reflect.reference.CtTypeReference.getActualClass()
5521    1   1    1 spoon.reflect.reference.CtTypeReference.getDeclaration()
5522    1   1    1 spoon.reflect.reference.CtTypeReference.getTypeDeclaration()
5523    1   1    1 spoon.reflect.reference.CtTypeReference.getDeclaringType()
5524    1   1    1 spoon.reflect.reference.CtTypeReference.getPackage()
5525    1   1    1 spoon.reflect.reference.CtTypeReference.box()
5526    1   1    1 spoon.reflect.reference.CtTypeReference.unbox()
5527    1   1    1 spoon.reflect.reference.CtTypeReference.setDeclaringType(CtTypeReference)
5528    1   1    1 spoon.reflect.reference.CtTypeReference.setPackage(CtPackageReference)
5529    1   1    1 spoon.reflect.reference.CtTypeReference.asCtIntersectionTypeReference()
5530    1   1    0 spoon.reflect.reference.CtTypeReference.clone()
5531    1   1    0 spoon.reflect.reference.CtTypeReference.getSuperInterfaces()
5532    1   1    0 spoon.reflect.reference.CtTypeReference.getSuperclass()
5533    1   1    0 spoon.reflect.reference.CtTypeReference.getModifiers()
5534    1   1    1 spoon.reflect.reference.CtTypeReference.canAccess(CtTypeReference)
5535    1   1    1 spoon.reflect.reference.CtTypeReference.canAccess(CtTypeMember)
5536    1   1    1 spoon.reflect.reference.CtTypeReference.getTopLevelType()
5537    1   1    1 spoon.reflect.reference.CtTypeReference.getAccessType()
5538    1   1    1 spoon.reflect.reference.CtTypeReference.getTypeParameterDeclaration()
5539    1   1    1 spoon.reflect.reference.CtTypeReference.setImplicitParent(boolean)
5540    1   1    1 spoon.reflect.reference.CtTypeReference.isImplicitParent()
5541    1   1    0 spoon.reflect.reference.CtUnboundVariableReference.clone()
5542    1   1    0 spoon.reflect.reference.CtUnboundVariableReference.setAnnotations(Annotation)
5543    1   1    1 spoon.reflect.reference.CtParameterReference.getDeclaringExecutable()
5544    1   1    0 spoon.reflect.reference.CtParameterReference.getDeclaration()
5545    1   1    0 spoon.reflect.reference.CtParameterReference.clone()
5546    1   1    1 spoon.reflect.reference.CtExecutableReference.isConstructor()
5547    1   1    1 spoon.reflect.reference.CtExecutableReference.getActualMethod()
5548    1   1    1 spoon.reflect.reference.CtExecutableReference.getActualConstructor()
5549    1   1    0 spoon.reflect.reference.CtExecutableReference.getDeclaration()
5550    1   1    1 spoon.reflect.reference.CtExecutableReference.getExecutableDeclaration()
5551    1   1    1 spoon.reflect.reference.CtExecutableReference.getDeclaringType()
5552    1   1    1 spoon.reflect.reference.CtExecutableReference.getType()
5553    1   1    1 spoon.reflect.reference.CtExecutableReference.getParameters()
5554    1   1    1 spoon.reflect.reference.CtExecutableReference.setParameters(CtTypeReference)
5555    1   1    1 spoon.reflect.reference.CtExecutableReference.isOverriding(CtExecutableReference)
5556    1   1    1 spoon.reflect.reference.CtExecutableReference.getOverridingExecutable()
5557    1   1    0 spoon.reflect.reference.CtExecutableReference.getOverridingExecutable(CtTypeReference)
5558    1   1    1 spoon.reflect.reference.CtExecutableReference.isStatic()
5559    1   1    1 spoon.reflect.reference.CtExecutableReference.setDeclaringType(CtTypeReference)
5560    1   1    1 spoon.reflect.reference.CtExecutableReference.setStatic(boolean)
5561    1   1    1 spoon.reflect.reference.CtExecutableReference.setType(T)
5562    1   1    1 spoon.reflect.reference.CtExecutableReference.isFinal()
5563    1   1    1 spoon.reflect.reference.CtExecutableReference.getSignature()
5564    1   1    0 spoon.reflect.reference.CtExecutableReference.clone()
5565    1   1    1 spoon.reflect.reference.CtIntersectionTypeReference.getBounds()
5566    1   1    1 spoon.reflect.reference.CtIntersectionTypeReference.setBounds(CtTypeReference)
5567    1   1    1 spoon.reflect.reference.CtIntersectionTypeReference.addBound(CtTypeReference)
5568    1   1    1 spoon.reflect.reference.CtIntersectionTypeReference.removeBound(CtTypeReference)
5569    1   1    0 spoon.reflect.reference.CtIntersectionTypeReference.clone()
5570    1   1    0 spoon.reflect.reference.CtLocalVariableReference.getDeclaration()
5571    1   1    0 spoon.reflect.reference.CtLocalVariableReference.clone()
5572    1   1    0 spoon.reflect.reference.CtCatchVariableReference.getDeclaration()
5573    1   1    0 spoon.reflect.reference.CtCatchVariableReference.clone()
5574    1   1    1 spoon.reflect.reference.CtTypeMemberWildcardImportReference.getSimpleName()
5575    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.setSimpleName(String)
5576    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.getTypeReference()
5577    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.setTypeReference(CtTypeReference)
5578    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.clone()
5579    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.getDeclaration()
5580    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.getAnnotations()
5581    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.addAnnotation(Annotation)
5582    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.removeAnnotation(Annotation)
5583    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.setAnnotations(Annotation)
5584    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.isImplicit()
5585    1   1    0 spoon.reflect.reference.CtTypeMemberWildcardImportReference.setImplicit(boolean)
5586    1   1    1 spoon.reflect.reference.CtVariableReference.getType()
5587    1   1    1 spoon.reflect.reference.CtVariableReference.setType(T)
5588    1   1    1 spoon.reflect.reference.CtVariableReference.getDeclaration()
5589    1   1    1 spoon.reflect.reference.CtVariableReference.getModifiers()
5590    1   1    0 spoon.reflect.reference.CtVariableReference.clone()
5591    1   1    1 spoon.reflect.reference.CtFieldReference.getActualField()
5592    1   1    0 spoon.reflect.reference.CtFieldReference.getDeclaration()
5593    1   1    1 spoon.reflect.reference.CtFieldReference.getFieldDeclaration()
5594    1   1    1 spoon.reflect.reference.CtFieldReference.getDeclaringType()
5595    1   1    1 spoon.reflect.reference.CtFieldReference.getQualifiedName()
5596    1   1    1 spoon.reflect.reference.CtFieldReference.isFinal()
5597    1   1    1 spoon.reflect.reference.CtFieldReference.isStatic()
5598    1   1    1 spoon.reflect.reference.CtFieldReference.setDeclaringType(CtTypeReference)
5599    1   1    1 spoon.reflect.reference.CtFieldReference.setFinal(boolean)
5600    1   1    1 spoon.reflect.reference.CtFieldReference.setStatic(boolean)
5601    1   1    0 spoon.reflect.reference.CtFieldReference.clone()
5602    1   1    1 spoon.reflect.reference.CtTypeParameterReference.getBoundingType()
5603    1   1    1 spoon.reflect.reference.CtTypeParameterReference.getDeclaration()
5604    1   1    0 spoon.reflect.reference.CtTypeParameterReference.clone()
5605    1   1    0 spoon.reflect.reference.CtTypeParameterReference.setActualTypeArguments(CtTypeReference)
5606    1   1    1 spoon.reflect.reference.CtTypeParameterReference.isDefaultBoundingType()
5607    1   1    0 spoon.reflect.reference.CtWildcardReference.clone()
5608    1   1    0 spoon.reflect.reference.CtWildcardReference.setSimpleName(String)
5609    1   1    1 spoon.reflect.reference.CtWildcardReference.isUpper()
5610    1   1    1 spoon.reflect.reference.CtWildcardReference.setUpper(boolean)
5611    1   1    1 spoon.reflect.reference.CtWildcardReference.getBoundingType()
5612    1   1    1 spoon.reflect.reference.CtWildcardReference.setBoundingType(CtTypeReference)
5613    1   1    0 spoon.reflect.declaration.CtUsedService.getServiceType()
5614    1   1    0 spoon.reflect.declaration.CtUsedService.setServiceType(CtTypeReference)
5615    1   1    0 spoon.reflect.declaration.CtUsedService.clone()
5616    1   1    1 spoon.reflect.declaration.CtFormalTypeDeclarer.getFormalCtTypeParameters()
5617    1   1    1 spoon.reflect.declaration.CtFormalTypeDeclarer.setFormalCtTypeParameters(CtTypeParameter)
5618    1   1    1 spoon.reflect.declaration.CtFormalTypeDeclarer.addFormalCtTypeParameter(CtTypeParameter)
5619    1   1    1 spoon.reflect.declaration.CtFormalTypeDeclarer.removeFormalCtTypeParameter(CtTypeParameter)
5620    1   1    1 spoon.reflect.declaration.CtMethod.isOverriding(CtMethod)
5621    1   1    1 spoon.reflect.declaration.CtMethod.isDefaultMethod()
5622    1   1    1 spoon.reflect.declaration.CtMethod.setDefaultMethod(boolean)
5623    1   1    0 spoon.reflect.declaration.CtMethod.clone()
5624    1   1    1 spoon.reflect.declaration.CtMethod.getTopDefinitions()
5625    1   1    1 spoon.reflect.declaration.CtMethod.copyMethod()
5626    1   1    1 spoon.reflect.declaration.CtTypeMember.getDeclaringType()
5627    1   1    1 spoon.reflect.declaration.CtTypeMember.getTopLevelType()
5628    1   1    0 spoon.reflect.declaration.CtField.getReference()
5629    1   1    1 spoon.reflect.declaration.CtField.getAssignment()
5630    1   1    0 spoon.reflect.declaration.CtField.setAssignment(T)
5631    1   1    0 spoon.reflect.declaration.CtField.clone()
5632    1   1    1 spoon.reflect.declaration.CtCodeSnippet.setValue(String)
5633    1   1    1 spoon.reflect.declaration.CtCodeSnippet.getValue()
5634    1   1    0 spoon.reflect.declaration.CtEnumValue.clone()
5635    1   1    0 spoon.reflect.declaration.CtEnumValue.setAssignment(T)
5636    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.clone()
5637    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.setSimpleName(String)
5638    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.setThrownTypes(Throwable)
5639    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.setParameters(CtParameter)
5640    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.setType(Void)
5641    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.addParameter(CtParameter)
5642    1   1    0 spoon.reflect.declaration.CtAnonymousExecutable.addThrownType(Throwable)
5643    4   2    0 spoon.reflect.declaration.ModifierKind.toString()
5644    1   1    1 spoon.reflect.declaration.CtElement.getAnnotation(A)
5645    1   1    1 spoon.reflect.declaration.CtElement.getAnnotation(A)
5646    1   1    1 spoon.reflect.declaration.CtElement.hasAnnotation(A)
5647    1   1    1 spoon.reflect.declaration.CtElement.getAnnotations()
5648    1   1    1 spoon.reflect.declaration.CtElement.getDocComment()
5649    1   1    1 spoon.reflect.declaration.CtElement.getShortRepresentation()
5650    1   1    1 spoon.reflect.declaration.CtElement.getPosition()
5651    1   1    1 spoon.reflect.declaration.CtElement.replace(CtElement)
5652    1   1    0 spoon.reflect.declaration.CtElement.replace(E)
5653    1   1    1 spoon.reflect.declaration.CtElement.addAnnotation(Annotation)
5654    1   1    1 spoon.reflect.declaration.CtElement.removeAnnotation(Annotation)
5655    1   1    0 spoon.reflect.declaration.CtElement.setDocComment(String)
5656    1   1    1 spoon.reflect.declaration.CtElement.setPosition(SourcePosition)
5657    1   1    0 spoon.reflect.declaration.CtElement.getAnnotatedChildren(Annotation)
5658    1   1    1 spoon.reflect.declaration.CtElement.isImplicit()
5659    1   1    1 spoon.reflect.declaration.CtElement.setImplicit(boolean)
5660    1   1    1 spoon.reflect.declaration.CtElement.getReferencedTypes()
5661    1   1    0 spoon.reflect.declaration.CtElement.getElements(E)
5662    1   1    0 spoon.reflect.declaration.CtElement.setPositions(SourcePosition)
5663    1   1    1 spoon.reflect.declaration.CtElement.setAnnotations(Annotation)
5664    1   1    1 spoon.reflect.declaration.CtElement.getParent()
5665    1   1    0 spoon.reflect.declaration.CtElement.getParent(P)
5666    1   1    0 spoon.reflect.declaration.CtElement.getParent(E)
5667    1   1    0 spoon.reflect.declaration.CtElement.setParent(E)
5668    1   1    1 spoon.reflect.declaration.CtElement.isParentInitialized()
5669    1   1    1 spoon.reflect.declaration.CtElement.hasParent(CtElement)
5670    1   1    1 spoon.reflect.declaration.CtElement.updateAllParentsBelow()
5671    1   1    1 spoon.reflect.declaration.CtElement.getRoleInParent()
5672    1   1    1 spoon.reflect.declaration.CtElement.delete()
5673    1   1    0 spoon.reflect.declaration.CtElement.setAllMetadata(Object)
5674    1   1    0 spoon.reflect.declaration.CtElement.putMetadata(String,Object)
5675    1   1    1 spoon.reflect.declaration.CtElement.getMetadata(String)
5676    1   1    1 spoon.reflect.declaration.CtElement.getAllMetadata()
5677    1   1    1 spoon.reflect.declaration.CtElement.getMetadataKeys()
5678    1   1    1 spoon.reflect.declaration.CtElement.setComments(CtComment)
5679    1   1    1 spoon.reflect.declaration.CtElement.getComments()
5680    1   1    1 spoon.reflect.declaration.CtElement.addComment(CtComment)
5681    1   1    1 spoon.reflect.declaration.CtElement.removeComment(CtComment)
5682    1   1    1 spoon.reflect.declaration.CtElement.clone()
5683    1   1    0 spoon.reflect.declaration.CtElement.getValueByRole(CtRole)
5684    1   1    0 spoon.reflect.declaration.CtElement.setValueByRole(CtRole,T)
5685    1   1    1 spoon.reflect.declaration.CtElement.getPath()
5686    1   1    1 spoon.reflect.declaration.CtElement.descendantIterator()
5687    1   1    1 spoon.reflect.declaration.CtElement.asIterable()
5688    1   1    0 spoon.reflect.declaration.CtModuleRequirement.getRequiresModifiers()
5689    1   1    0 spoon.reflect.declaration.CtModuleRequirement.setRequiresModifiers(RequiresModifier)
5690    1   1    0 spoon.reflect.declaration.CtModuleRequirement.getModuleReference()
5691    1   1    0 spoon.reflect.declaration.CtModuleRequirement.setModuleReference(CtModuleReference)
5692    1   1    0 spoon.reflect.declaration.CtModuleRequirement.clone()
5693    1   1    0 spoon.reflect.declaration.CtInterface.clone()
5694    1   1    0 spoon.reflect.declaration.CtInterface.setSuperclass(CtTypeReference)
5695    1   1    1 spoon.reflect.declaration.CtPackage.getDeclaringModule()
5696    1   1    1 spoon.reflect.declaration.CtPackage.getDeclaringPackage()
5697    1   1    1 spoon.reflect.declaration.CtPackage.getPackage(String)
5698    1   1    1 spoon.reflect.declaration.CtPackage.getPackages()
5699    1   1    1 spoon.reflect.declaration.CtPackage.getQualifiedName()
5700    1   1    0 spoon.reflect.declaration.CtPackage.getReference()
5701    1   1    1 spoon.reflect.declaration.CtPackage.getType(String)
5702    1   1    1 spoon.reflect.declaration.CtPackage.getTypes()
5703    1   1    1 spoon.reflect.declaration.CtPackage.addType(CtType)
5704    1   1    1 spoon.reflect.declaration.CtPackage.removeType(CtType)
5705    1   1    1 spoon.reflect.declaration.CtPackage.setPackages(CtPackage)
5706    1   1    1 spoon.reflect.declaration.CtPackage.addPackage(CtPackage)
5707    1   1    1 spoon.reflect.declaration.CtPackage.removePackage(CtPackage)
5708    1   1    1 spoon.reflect.declaration.CtPackage.setTypes(CtType)
5709    1   1    0 spoon.reflect.declaration.CtPackage.clone()
5710    1   1    1 spoon.reflect.declaration.CtPackage.isUnnamedPackage()
5711    1   1    1 spoon.reflect.declaration.CtParameter.getParent()
5712    1   1    1 spoon.reflect.declaration.CtParameter.isVarArgs()
5713    1   1    1 spoon.reflect.declaration.CtParameter.setVarArgs(boolean)
5714    1   1    1 spoon.reflect.declaration.CtParameter.getReference()
5715    1   1    0 spoon.reflect.declaration.CtParameter.clone()
5716    1   1    0 spoon.reflect.declaration.CtParameter.setDefaultExpression(T)
5717    1   1    1 spoon.reflect.declaration.CtModule.isUnnamedModule()
5718    1   1    0 spoon.reflect.declaration.CtModule.isOpenModule()
5719    1   1    0 spoon.reflect.declaration.CtModule.setIsOpenModule(boolean)
5720    1   1    0 spoon.reflect.declaration.CtModule.setModuleDirectives(CtModuleDirective)
5721    1   1    0 spoon.reflect.declaration.CtModule.addModuleDirective(CtModuleDirective)
5722    1   1    0 spoon.reflect.declaration.CtModule.addModuleDirectiveAt(int,CtModuleDirective)
5723    1   1    0 spoon.reflect.declaration.CtModule.getModuleDirectives()
5724    1   1    0 spoon.reflect.declaration.CtModule.removeModuleDirective(CtModuleDirective)
5725    1   1    0 spoon.reflect.declaration.CtModule.getUsedServices()
5726    1   1    0 spoon.reflect.declaration.CtModule.setUsedServices(CtUsedService)
5727    1   1    0 spoon.reflect.declaration.CtModule.addUsedService(CtUsedService)
5728    1   1    0 spoon.reflect.declaration.CtModule.removeUsedService(CtUsedService)
5729    1   1    0 spoon.reflect.declaration.CtModule.getExportedPackages()
5730    1   1    0 spoon.reflect.declaration.CtModule.setExportedPackages(CtPackageExport)
5731    1   1    0 spoon.reflect.declaration.CtModule.addExportedPackage(CtPackageExport)
5732    1   1    0 spoon.reflect.declaration.CtModule.removeExportedPackage(CtPackageExport)
5733    1   1    0 spoon.reflect.declaration.CtModule.getOpenedPackages()
5734    1   1    0 spoon.reflect.declaration.CtModule.setOpenedPackages(CtPackageExport)
5735    1   1    0 spoon.reflect.declaration.CtModule.addOpenedPackage(CtPackageExport)
5736    1   1    0 spoon.reflect.declaration.CtModule.removeOpenedPackage(CtPackageExport)
5737    1   1    0 spoon.reflect.declaration.CtModule.getRequiredModules()
5738    1   1    0 spoon.reflect.declaration.CtModule.setRequiredModules(CtModuleRequirement)
5739    1   1    0 spoon.reflect.declaration.CtModule.addRequiredModule(CtModuleRequirement)
5740    1   1    0 spoon.reflect.declaration.CtModule.removeRequiredModule(CtModuleRequirement)
5741    1   1    0 spoon.reflect.declaration.CtModule.getProvidedServices()
5742    1   1    0 spoon.reflect.declaration.CtModule.setProvidedServices(CtProvidedService)
5743    1   1    0 spoon.reflect.declaration.CtModule.addProvidedService(CtProvidedService)
5744    1   1    0 spoon.reflect.declaration.CtModule.removeProvidedService(CtProvidedService)
5745    1   1    1 spoon.reflect.declaration.CtModule.getRootPackage()
5746    1   1    0 spoon.reflect.declaration.CtModule.setRootPackage(CtPackage)
5747    1   1    0 spoon.reflect.declaration.CtModule.getReference()
5748    1   1    0 spoon.reflect.declaration.CtModule.clone()
5749    1   1    1 spoon.reflect.declaration.CtTypeParameter.getReference()
5750    1   1    1 spoon.reflect.declaration.CtTypeParameter.getTypeParameterDeclarer()
5751    1   1    0 spoon.reflect.declaration.CtTypeParameter.clone()
5752    1   1    0 spoon.reflect.declaration.CtTypeParameter.setFormalCtTypeParameters(CtTypeParameter)
5753    1   1    0 spoon.reflect.declaration.CtTypeParameter.setSuperInterfaces(CtTypeReference)
5754    1   1    0 spoon.reflect.declaration.CtTypeParameter.addSuperInterface(S)
5755    1   1    0 spoon.reflect.declaration.CtTypeParameter.setTypeMembers(CtTypeMember)
5756    1   1    0 spoon.reflect.declaration.CtTypeParameter.setFields(CtField)
5757    1   1    0 spoon.reflect.declaration.CtTypeParameter.setMethods(CtMethod)
5758    1   1    0 spoon.reflect.declaration.CtTypeParameter.addMethod(M)
5759    1   1    0 spoon.reflect.declaration.CtTypeParameter.setNestedTypes(CtType)
5760    1   1    0 spoon.reflect.declaration.CtTypeParameter.addNestedType(N)
5761    1   1    0 spoon.reflect.declaration.CtTypeParameter.addFieldAtTop(F)
5762    1   1    0 spoon.reflect.declaration.CtTypeParameter.setModifiers(ModifierKind)
5763    1   1    1 spoon.reflect.declaration.CtEnum.addEnumValue(CtEnumValue)
5764    1   1    1 spoon.reflect.declaration.CtEnum.removeEnumValue(CtEnumValue)
5765    1   1    1 spoon.reflect.declaration.CtEnum.getEnumValue(String)
5766    1   1    1 spoon.reflect.declaration.CtEnum.getEnumValues()
5767    1   1    1 spoon.reflect.declaration.CtEnum.setEnumValues(CtEnumValue)
5768    1   1    0 spoon.reflect.declaration.CtEnum.clone()
5769    1   1    0 spoon.reflect.declaration.CtEnum.setFormalCtTypeParameters(CtTypeParameter)
5770    1   1    0 spoon.reflect.declaration.CtEnum.setSuperclass(CtTypeReference)
5771    1   1    0 spoon.reflect.declaration.CtProvidedService.getServiceType()
5772    1   1    0 spoon.reflect.declaration.CtProvidedService.setServiceType(CtTypeReference)
5773    1   1    0 spoon.reflect.declaration.CtProvidedService.getImplementationTypes()
5774    1   1    0 spoon.reflect.declaration.CtProvidedService.setImplementationTypes(CtTypeReference)
5775    1   1    0 spoon.reflect.declaration.CtProvidedService.addImplementationType(CtTypeReference)
5776    1   1    0 spoon.reflect.declaration.CtProvidedService.clone()
5777    1   1    1 spoon.reflect.declaration.CtConstructor.getSimpleName()
5778    1   1    0 spoon.reflect.declaration.CtConstructor.clone()
5779    1   1    0 spoon.reflect.declaration.CtConstructor.setType(T)
5780    1   1    0 spoon.reflect.declaration.CtConstructor.setSimpleName(String)
5781    1   1    1 spoon.reflect.declaration.CtMultiTypedElement.addMultiType(CtTypeReference)
5782    1   1    1 spoon.reflect.declaration.CtMultiTypedElement.removeMultiType(CtTypeReference)
5783    1   1    1 spoon.reflect.declaration.CtMultiTypedElement.getMultiTypes()
5784    1   1    1 spoon.reflect.declaration.CtMultiTypedElement.setMultiTypes(CtTypeReference)
5785    1   1    1 spoon.reflect.declaration.CtPackageDeclaration.getReference()
5786    1   1    1 spoon.reflect.declaration.CtPackageDeclaration.setReference(CtPackageReference)
5787    1   1    0 spoon.reflect.declaration.CtPackageDeclaration.clone()
5788    1   1    1 spoon.reflect.declaration.CtAnnotationMethod.getDefaultExpression()
5789    1   1    1 spoon.reflect.declaration.CtAnnotationMethod.setDefaultExpression(T)
5790    1   1    0 spoon.reflect.declaration.CtAnnotationMethod.clone()
5791    1   1    0 spoon.reflect.declaration.CtAnnotationMethod.setBody(CtStatement)
5792    1   1    0 spoon.reflect.declaration.CtAnnotationMethod.setThrownTypes(Throwable)
5793    1   1    0 spoon.reflect.declaration.CtAnnotationMethod.setFormalCtTypeParameters(CtTypeParameter)
5794    1   1    0 spoon.reflect.declaration.CtAnnotationMethod.setParameters(CtParameter)
5795    1   1    1 spoon.reflect.declaration.CtImport.getImportKind()
5796    1   1    1 spoon.reflect.declaration.CtImport.getReference()
5797    1   1    1 spoon.reflect.declaration.CtImport.setReference(CtReference)
5798    1   1    1 spoon.reflect.declaration.CtImport.accept(CtImportVisitor)
5799    1   1    0 spoon.reflect.declaration.CtImport.clone()
5800    1   1    1 spoon.reflect.declaration.CtAnnotation.getActualAnnotation()
5801    1   1    1 spoon.reflect.declaration.CtAnnotation.getAnnotationType()
5802    1   1    1 spoon.reflect.declaration.CtAnnotation.getValue(String)
5803    1   1    1 spoon.reflect.declaration.CtAnnotation.getValueAsObject(String)
5804    1   1    1 spoon.reflect.declaration.CtAnnotation.getValueAsInt(String)
5805    1   1    1 spoon.reflect.declaration.CtAnnotation.getValueAsString(String)
5806    1   1    1 spoon.reflect.declaration.CtAnnotation.getWrappedValue(String)
5807    1   1    1 spoon.reflect.declaration.CtAnnotation.getValues()
5808    1   1    1 spoon.reflect.declaration.CtAnnotation.getAllValues()
5809    1   1    1 spoon.reflect.declaration.CtAnnotation.setAnnotationType(Annotation)
5810    1   1    1 spoon.reflect.declaration.CtAnnotation.setElementValues(Object)
5811    1   1    1 spoon.reflect.declaration.CtAnnotation.setValues(CtExpression)
5812    1   1    1 spoon.reflect.declaration.CtAnnotation.getAnnotatedElement()
5813    1   1    1 spoon.reflect.declaration.CtAnnotation.getAnnotatedElementType()
5814    1   1    1 spoon.reflect.declaration.CtAnnotation.addValue(String,Object)
5815    1   1    1 spoon.reflect.declaration.CtAnnotation.addValue(String,CtLiteral)
5816    1   1    1 spoon.reflect.declaration.CtAnnotation.addValue(String,CtExpression)
5817    1   1    1 spoon.reflect.declaration.CtAnnotation.addValue(String,CtFieldAccess)
5818    1   1    1 spoon.reflect.declaration.CtAnnotation.addValue(String,CtAnnotation)
5819    1   1    0 spoon.reflect.declaration.CtAnnotation.clone()
5820    1   1    0 spoon.reflect.declaration.CtAnnotation.setTypeCasts(CtTypeReference)
5821   24  24    0 spoon.reflect.declaration.CtAnnotation.getAnnotatedElementTypeForCtElement(CtElement)
5822    1   1    1 spoon.reflect.declaration.CtModifiable.getModifiers()
5823    1   1    1 spoon.reflect.declaration.CtModifiable.hasModifier(ModifierKind)
5824    1   1    1 spoon.reflect.declaration.CtModifiable.setModifiers(ModifierKind)
5825    1   1    1 spoon.reflect.declaration.CtModifiable.addModifier(ModifierKind)
5826    1   1    1 spoon.reflect.declaration.CtModifiable.removeModifier(ModifierKind)
5827    1   1    1 spoon.reflect.declaration.CtModifiable.setVisibility(ModifierKind)
5828    1   1    1 spoon.reflect.declaration.CtModifiable.getVisibility()
5829    1   1    0 spoon.reflect.declaration.CtModifiable.getExtendedModifiers()
5830    1   1    0 spoon.reflect.declaration.CtModifiable.setExtendedModifiers(CtExtendedModifier)
5831    1   1    1 spoon.reflect.declaration.CtModifiable.isPublic()
5832    1   1    1 spoon.reflect.declaration.CtModifiable.isFinal()
5833    1   1    1 spoon.reflect.declaration.CtModifiable.isStatic()
5834    1   1    1 spoon.reflect.declaration.CtModifiable.isProtected()
5835    1   1    1 spoon.reflect.declaration.CtModifiable.isPrivate()
5836    1   1    1 spoon.reflect.declaration.CtModifiable.isAbstract()
5837    1   1    1 spoon.reflect.declaration.CtNamedElement.getSimpleName()
5838    1   1    1 spoon.reflect.declaration.CtNamedElement.setSimpleName(String)
5839    1   1    1 spoon.reflect.declaration.CtNamedElement.getReference()
5840    1   1    0 spoon.reflect.declaration.CtNamedElement.clone()
5841    1   1    1 spoon.reflect.declaration.CtClass.getAnonymousExecutables()
5842    1   1    1 spoon.reflect.declaration.CtClass.getConstructor(CtTypeReference)
5843    1   1    1 spoon.reflect.declaration.CtClass.getConstructors()
5844    1   1    1 spoon.reflect.declaration.CtClass.setAnonymousExecutables(CtAnonymousExecutable)
5845    1   1    1 spoon.reflect.declaration.CtClass.addAnonymousExecutable(CtAnonymousExecutable)
5846    1   1    1 spoon.reflect.declaration.CtClass.removeAnonymousExecutable(CtAnonymousExecutable)
5847    1   1    1 spoon.reflect.declaration.CtClass.setConstructors(T)
5848    1   1    1 spoon.reflect.declaration.CtClass.addConstructor(T)
5849    1   1    1 spoon.reflect.declaration.CtClass.removeConstructor(T)
5850    1   1    1 spoon.reflect.declaration.CtClass.isAnonymous()
5851    1   1    0 spoon.reflect.declaration.CtClass.clone()
5852    1   1    1 spoon.reflect.declaration.CtClass.newInstance()
5853    1   1    0 spoon.reflect.declaration.CtClass.setLabel(String)
5854    1   1    1 spoon.reflect.declaration.CtTypedElement.getType()
5855    1   1    1 spoon.reflect.declaration.CtTypedElement.setType(T)
5856    1   1    1 spoon.reflect.declaration.CtVariable.getDefaultExpression()
5857    1   1    0 spoon.reflect.declaration.CtVariable.getReference()
5858    1   1    1 spoon.reflect.declaration.CtVariable.setDefaultExpression(T)
5859    1   1    1 spoon.reflect.declaration.CtTypeInformation.getSuperInterfaces()
5860    1   1    1 spoon.reflect.declaration.CtTypeInformation.getQualifiedName()
5861    1   1    1 spoon.reflect.declaration.CtTypeInformation.getModifiers()
5862    1   1    1 spoon.reflect.declaration.CtTypeInformation.isPrimitive()
5863    1   1    1 spoon.reflect.declaration.CtTypeInformation.isAnonymous()
5864    1   1    1 spoon.reflect.declaration.CtTypeInformation.isLocalType()
5865    1   1    1 spoon.reflect.declaration.CtTypeInformation.isClass()
5866    1   1    1 spoon.reflect.declaration.CtTypeInformation.isInterface()
5867    1   1    1 spoon.reflect.declaration.CtTypeInformation.isEnum()
5868    1   1    1 spoon.reflect.declaration.CtTypeInformation.isAnnotationType()
5869    1   1    1 spoon.reflect.declaration.CtTypeInformation.isGenerics()
5870    1   1    1 spoon.reflect.declaration.CtTypeInformation.isSubtypeOf(CtTypeReference)
5871    1   1    1 spoon.reflect.declaration.CtTypeInformation.getSuperclass()
5872    1   1    1 spoon.reflect.declaration.CtTypeInformation.getDeclaredFields()
5873    1   1    1 spoon.reflect.declaration.CtTypeInformation.getAllFields()
5874    1   1    1 spoon.reflect.declaration.CtTypeInformation.getDeclaredField(String)
5875    1   1    1 spoon.reflect.declaration.CtTypeInformation.getDeclaredOrInheritedField(String)
5876    1   1    1 spoon.reflect.declaration.CtTypeInformation.getDeclaredExecutables()
5877    1   1    1 spoon.reflect.declaration.CtTypeInformation.getAllExecutables()
5878    1   1    1 spoon.reflect.declaration.CtTypeInformation.getTypeErasure()
5879    1   1    1 spoon.reflect.declaration.CtShadowable.isShadow()
5880    1   1    1 spoon.reflect.declaration.CtShadowable.setShadow(boolean)
5881    1   1    0 spoon.reflect.declaration.CtExecutable.getReference()
5882    1   1    1 spoon.reflect.declaration.CtExecutable.getBody()
5883    1   1    1 spoon.reflect.declaration.CtExecutable.getParameters()
5884    1   1    1 spoon.reflect.declaration.CtExecutable.setParameters(CtParameter)
5885    1   1    1 spoon.reflect.declaration.CtExecutable.addParameter(CtParameter)
5886    1   1    1 spoon.reflect.declaration.CtExecutable.removeParameter(CtParameter)
5887    1   1    1 spoon.reflect.declaration.CtExecutable.getThrownTypes()
5888    1   1    1 spoon.reflect.declaration.CtExecutable.setThrownTypes(Throwable)
5889    1   1    1 spoon.reflect.declaration.CtExecutable.addThrownType(Throwable)
5890    1   1    1 spoon.reflect.declaration.CtExecutable.removeThrownType(Throwable)
5891    1   1    1 spoon.reflect.declaration.CtExecutable.getSignature()
5892    1   1    0 spoon.reflect.declaration.CtExecutable.clone()
5893    1   1    1 spoon.reflect.declaration.CtAnnotationType.getAnnotationMethods()
5894    1   1    1 spoon.reflect.declaration.CtAnnotationType.addMethod(M)
5895    1   1    1 spoon.reflect.declaration.CtAnnotationType.setMethods(CtMethod)
5896    1   1    0 spoon.reflect.declaration.CtAnnotationType.clone()
5897    1   1    0 spoon.reflect.declaration.CtAnnotationType.setFormalCtTypeParameters(CtTypeParameter)
5898    1   1    0 spoon.reflect.declaration.CtAnnotationType.setSuperInterfaces(CtTypeReference)
5899    1   1    0 spoon.reflect.declaration.CtAnnotationType.setSuperclass(CtTypeReference)
5900    1   1    0 spoon.reflect.declaration.CtPackageExport.setOpenedPackage(boolean)
5901    1   1    0 spoon.reflect.declaration.CtPackageExport.isOpenedPackage()
5902    1   1    0 spoon.reflect.declaration.CtPackageExport.getPackageReference()
5903    1   1    0 spoon.reflect.declaration.CtPackageExport.setPackageReference(CtPackageReference)
5904    1   1    0 spoon.reflect.declaration.CtPackageExport.getTargetExport()
5905    1   1    0 spoon.reflect.declaration.CtPackageExport.setTargetExport(CtModuleReference)
5906    1   1    0 spoon.reflect.declaration.CtPackageExport.addTargetExport(CtModuleReference)
5907    1   1    0 spoon.reflect.declaration.CtPackageExport.clone()
5908    2   1    0 spoon.reflect.declaration.ParentNotInitializedException.ParentNotInitializedException(String)
5909    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getUnitType()
5910    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getFile()
5911    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setFile(File)
5912    1   1    0 spoon.reflect.declaration.CtCompilationUnit.getLineSeparatorPositions()
5913    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setLineSeparatorPositions(CtCompilationUnit[])
5914    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getBinaryFiles()
5915    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getDeclaredTypes()
5916    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getDeclaredTypeReferences()
5917    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setDeclaredTypeReferences(CtTypeReference)
5918    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setDeclaredTypes(CtType)
5919    1   1    1 spoon.reflect.declaration.CtCompilationUnit.addDeclaredType(CtType)
5920    1   1    1 spoon.reflect.declaration.CtCompilationUnit.addDeclaredTypeReference(CtTypeReference)
5921    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getDeclaredModule()
5922    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getDeclaredModuleReference()
5923    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setDeclaredModule(CtModule)
5924    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setDeclaredModuleReference(CtModuleReference)
5925    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getDeclaredPackage()
5926    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getPackageDeclaration()
5927    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setDeclaredPackage(CtPackage)
5928    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setPackageDeclaration(CtPackageDeclaration)
5929    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getMainType()
5930    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getOriginalSourceCode()
5931    1   1    1 spoon.reflect.declaration.CtCompilationUnit.getImports()
5932    1   1    0 spoon.reflect.declaration.CtCompilationUnit.clone()
5933    1   1    1 spoon.reflect.declaration.CtCompilationUnit.setImports(CtImport)
5934    1   1    0 spoon.reflect.declaration.CtCompilationUnit.getParent()
5935    1   1    0 spoon.reflect.declaration.CtCompilationUnit.setParent(E)
5936    1   1    0 spoon.reflect.declaration.CtCompilationUnit.setPosition(SourcePosition)
5937    1   1    1 spoon.reflect.declaration.CtType.getSimpleName()
5938    1   1    1 spoon.reflect.declaration.CtType.getUsedTypes(boolean)
5939    1   1    1 spoon.reflect.declaration.CtType.getActualClass()
5940    1   1    1 spoon.reflect.declaration.CtType.getField(String)
5941    1   1    1 spoon.reflect.declaration.CtType.getFields()
5942    1   1    1 spoon.reflect.declaration.CtType.getNestedType(String)
5943    1   1    1 spoon.reflect.declaration.CtType.getNestedTypes()
5944    1   1    1 spoon.reflect.declaration.CtType.getPackage()
5945    1   1    1 spoon.reflect.declaration.CtType.getReference()
5946    1   1    1 spoon.reflect.declaration.CtType.isTopLevel()
5947    1   1    1 spoon.reflect.declaration.CtType.addFieldAtTop(F)
5948    1   1    1 spoon.reflect.declaration.CtType.addField(F)
5949    1   1    1 spoon.reflect.declaration.CtType.addField(int,F)
5950    1   1    1 spoon.reflect.declaration.CtType.setFields(CtField)
5951    1   1    1 spoon.reflect.declaration.CtType.removeField(F)
5952    1   1    1 spoon.reflect.declaration.CtType.addNestedType(N)
5953    1   1    1 spoon.reflect.declaration.CtType.removeNestedType(N)
5954    1   1    1 spoon.reflect.declaration.CtType.setNestedTypes(CtType)
5955    1   1    1 spoon.reflect.declaration.CtType.compileAndReplaceSnippets()
5956    1   1    1 spoon.reflect.declaration.CtType.getAllMethods()
5957    1   1    1 spoon.reflect.declaration.CtType.getMethod(R,String,CtTypeReference)
5958    1   1    1 spoon.reflect.declaration.CtType.getMethod(String,CtTypeReference)
5959    1   1    1 spoon.reflect.declaration.CtType.getMethods()
5960    1   1    1 spoon.reflect.declaration.CtType.getMethodsAnnotatedWith(CtTypeReference)
5961    1   1    1 spoon.reflect.declaration.CtType.getMethodsByName(String)
5962    1   1    1 spoon.reflect.declaration.CtType.hasMethod(CtMethod)
5963    1   1    1 spoon.reflect.declaration.CtType.setMethods(CtMethod)
5964    1   1    1 spoon.reflect.declaration.CtType.addMethod(M)
5965    1   1    1 spoon.reflect.declaration.CtType.removeMethod(M)
5966    1   1    1 spoon.reflect.declaration.CtType.setSuperclass(CtTypeReference)
5967    1   1    1 spoon.reflect.declaration.CtType.setSuperInterfaces(CtTypeReference)
5968    1   1    1 spoon.reflect.declaration.CtType.addSuperInterface(S)
5969    1   1    1 spoon.reflect.declaration.CtType.removeSuperInterface(S)
5970    1   1    1 spoon.reflect.declaration.CtType.getTypeMembers()
5971    1   1    1 spoon.reflect.declaration.CtType.addTypeMember(CtTypeMember)
5972    1   1    1 spoon.reflect.declaration.CtType.addTypeMemberAt(int,CtTypeMember)
5973    1   1    1 spoon.reflect.declaration.CtType.removeTypeMember(CtTypeMember)
5974    1   1    1 spoon.reflect.declaration.CtType.setTypeMembers(CtTypeMember)
5975    1   1    0 spoon.reflect.declaration.CtType.clone()
5976    1   1    1 spoon.reflect.declaration.CtType.copyType()
5977    2   1    1 spoon.template.BlockTemplate.getBlock(BlockTemplate)
5978    1   1    1 spoon.template.BlockTemplate.BlockTemplate()
5979    3   1    0 spoon.template.BlockTemplate.apply(CtType)
5980    2   1    0 spoon.template.BlockTemplate.S()
5981    1   1    1 spoon.template.BlockTemplate.block()
5982    3   1    1 spoon.template.ExpressionTemplate.getExpression(ExpressionTemplate)
5983    2   1    0 spoon.template.ExpressionTemplate.getExpressionBlock(ExpressionTemplate)
5984    1   1    1 spoon.template.ExpressionTemplate.ExpressionTemplate()
5985    1   1    1 spoon.template.ExpressionTemplate.expression()
5986    3   1    0 spoon.template.ExpressionTemplate.apply(CtType)
5987    2   1    0 spoon.template.ExpressionTemplate.S()
5988    1   1    1 spoon.template.TypedStatementListTemplateParameter.TypedStatementListTemplateParameter()
5989   13   3    0 spoon.template.TypedStatementListTemplateParameter.getSubstitution(CtType)
5990    2   1    0 spoon.template.TypedStatementListTemplateParameter.S()
5991    1   1    1 spoon.template.TypedStatementListTemplateParameter.statements()
5992    1   1    1 spoon.template.TypedBlockTemplateParameter.TypedBlockTemplateParameter()
5993    1   1    1 spoon.template.TypedBlockTemplateParameter.block()
5994    9   4    0 spoon.template.TypedBlockTemplateParameter.getSubstitution(CtType)
5995    2   1    0 spoon.template.TypedBlockTemplateParameter.S()
5996    1   1    1 spoon.template.TemplateParameter.S()
5997    2   1    1 spoon.template.AbstractTemplate.isWellFormed()
5998    7   7    1 spoon.template.AbstractTemplate.isValid()
5999    2   1    1 spoon.template.AbstractTemplate.getFactory()
6000    2   1    1 spoon.template.AbstractTemplate.isAddGeneratedBy()
6001    3   1    1 spoon.template.AbstractTemplate.addGeneratedBy(boolean)
6002    1   1    1 spoon.template.TemplateException.TemplateException()
6003    2   1    1 spoon.template.TemplateException.TemplateException(String)
6004    2   1    1 spoon.template.TemplateException.TemplateException(Throwable)
6005    1   1    1 spoon.template.StatementTemplate.StatementTemplate()
6006    7   3    0 spoon.template.StatementTemplate.apply(CtType)
6007    2   1    0 spoon.template.StatementTemplate.S()
6008    1   1    1 spoon.template.StatementTemplate.statement()
6009    1   1    1 spoon.template.Template.apply(CtType)
6010   10   3    0 spoon.template.ExtensionTemplate.apply(CtType)
6011    4   3    1 spoon.legacy.NameFilter.NameFilter(String)
6012    4   3    0 spoon.legacy.NameFilter.matches(T)
6013    2   1    0 spoon.legacy.NameFilter.getType()
6014    3   1    0 spoon.testing.AbstractAssert.AbstractAssert(A,Class)
6015    3   1    1 spoon.testing.AbstractAssert.withProcessor(Processor)
6016    5   3    1 spoon.testing.AbstractAssert.withProcessor(Processor)
6017    5   3    1 spoon.testing.AbstractAssert.withProcessor(String)
6018    2   1    0 spoon.testing.AbstractAssert.hashCode()
6019    2   1    0 spoon.testing.AbstractCtElementAssert.AbstractCtElementAssert(CtElement,Class)
6020    6   1    1 spoon.testing.AbstractCtElementAssert.isEqualTo(CtElement)
6021    6   3    1 spoon.testing.AbstractCtElementAssert.isEqualTo(String)
6022    2   1    0 spoon.testing.CtPackageAssert.CtPackageAssert(CtPackage)
6023    1   1    0 spoon.testing.Assert.Assert()
6024    2   1    1 spoon.testing.Assert.assertThat(String)
6025    4   1    1 spoon.testing.Assert.assertThat(File)
6026    3   1    1 spoon.testing.Assert.assertThat(CtElement)
6027    3   1    1 spoon.testing.Assert.assertThat(CtPackage)
6028    2   2    0 spoon.testing.utils.ProcessorUtils.ProcessorUtils()
6029    3   1    0 spoon.testing.utils.ProcessorUtils.process(Factory,Processor)
6030   20  10    1 spoon.testing.utils.ProcessorUtils.initProperties(Processor,ProcessorProperties)
6031    2   2    0 spoon.testing.utils.Check.Check()
6032    7   7    1 spoon.testing.utils.Check.assertCtElementEquals(CtElement,CtElement)
6033    4   3    1 spoon.testing.utils.Check.assertNotNull(String,T)
6034    2   1    0 spoon.testing.utils.Check.assertNotNull(T)
6035    4   3    0 spoon.testing.utils.Check.assertExists(T)
6036    6   3    0 spoon.testing.utils.Check.assertIsSame(A,E)
6037    2   1    0 spoon.testing.FileAssert.FileAssert(File)
6038    2   1    0 spoon.testing.AbstractCtPackageAssert.AbstractCtPackageAssert(CtPackage,Class)
6039    2   1    0 spoon.testing.AbstractCtPackageAssert.TypeComparator.compare(CtType,CtType)
6040    2   1    0 spoon.testing.AbstractCtPackageAssert.PackageComparator.compare(CtPackage,CtPackage)
6041   30   9    1 spoon.testing.AbstractCtPackageAssert.isEqualTo(CtPackage)
6042    2   1    0 spoon.testing.CtElementAssert.CtElementAssert(CtElement)
6043    2   1    0 spoon.testing.AbstractFileAssert.AbstractFileAssert(File,Class)
6044    2   1    1 spoon.testing.AbstractFileAssert.isEqualTo(String)
6045   14   4    1 spoon.testing.AbstractFileAssert.isEqualTo(File)
6046    2   1    0 spoon.OutputType.toString()
6047    5   4    0 spoon.OutputType.fromString(String)
6048    4   1    0 spoon.support.comparator.FixedOrderBasedOnFileNameCompilationUnitComparator.compare(CompilationUnitDeclaration,CompilationUnitDeclaration)
6049    6   1    0 spoon.support.comparator.SignatureComparator.compare(CtElement,CtElement)
6050   12   9    1 spoon.support.comparator.CtLineElementComparator.compare(CtElement,CtElement)
6051   10   8    0 spoon.support.comparator.DeepRepresentationComparator.compare(CtElement,CtElement)
6052    2   1    0 spoon.support.comparator.DeepRepresentationComparator.getDeepRepresentation(CtElement)
6053   12  15    0 spoon.support.comparator.QualifiedNameComparator.compare(CtElement,CtElement)
6054    2   1    1 spoon.support.QueueProcessingManager.QueueProcessingManager(Factory)
6055    5   3    0 spoon.support.QueueProcessingManager.addProcessor(Processor)
6056    3   1    0 spoon.support.QueueProcessingManager.addProcessor(Processor)
6057    4   3    0 spoon.support.QueueProcessingManager.addProcessor(String)
6058    2   1    0 spoon.support.QueueProcessingManager.getCurrentProcessor()
6059    2   1    0 spoon.support.QueueProcessingManager.getFactory()
6060    4   2    0 spoon.support.QueueProcessingManager.getProcessors()
6061    4   2    0 spoon.support.QueueProcessingManager.getVisitor()
6062   21   7    0 spoon.support.QueueProcessingManager.process(CtElement)
6063    4   1    0 spoon.support.QueueProcessingManager.process(CtElement)
6064    3   1    0 spoon.support.QueueProcessingManager.setFactory(Factory)
6065    3   1    0 spoon.support.DefaultOutputDestinationHandler.DefaultOutputDestinationHandler(File,Environment)
6066    6   1    0 spoon.support.DefaultOutputDestinationHandler.getOutputPath(CtModule,CtPackage,CtType)
6067   10   3    1 spoon.support.DefaultOutputDestinationHandler.getFileName(CtPackage,CtType)
6068    5   3    1 spoon.support.DefaultOutputDestinationHandler.getPackagePath(CtPackage)
6069    5   4    1 spoon.support.DefaultOutputDestinationHandler.getModulePath(CtModule)
6070    2   1    1 spoon.support.DefaultOutputDestinationHandler.getDirectoryPath(CtModule,CtPackage,CtType)
6071    2   1    0 spoon.support.DefaultOutputDestinationHandler.getDefaultOutputDirectory()
6072    2   1    0 spoon.support.DefaultOutputDestinationHandler.getEnvironment()
6073    1   1    0 spoon.support.util.ByteSerialization.ByteSerialization()
6074    5   1    0 spoon.support.util.ByteSerialization.serialize(Object)
6075    3   1    0 spoon.support.util.ByteSerialization.deserialize(Object[])
6076    1   1    0 spoon.support.util.internal.MapUtils.MapUtils()
6077    2   1    1 spoon.support.util.internal.MapUtils.getOrCreate(V,K,V)
6078    8   3    1 spoon.support.util.internal.MapUtils.getOrCreate(V,K,V,V)
6079    2   1    0 spoon.support.util.ModelSet.ModelSet(CtElement)
6080    1   1    0 spoon.support.util.ModelSet.getOwner()
6081    1   1    0 spoon.support.util.ModelSet.getRole()
6082    1   1    0 spoon.support.util.ModelSet.onSizeChanged(int)
6083    2   1    0 spoon.support.util.ModelSet.size()
6084    2   1    0 spoon.support.util.ModelSet.isEmpty()
6085    2   1    0 spoon.support.util.ModelSet.contains(Object)
6086    2   1    0 spoon.support.util.ModelSet.toArray()
6087    2   1    0 spoon.support.util.ModelSet.toArray(T[])
6088    8   4    0 spoon.support.util.ModelSet.add(T)
6089    8   5    0 spoon.support.util.ModelSet.remove(Object)
6090    2   1    0 spoon.support.util.ModelSet.containsAll(Collection)
6091    5   3    0 spoon.support.util.ModelSet.clear()
6092    2   1    0 spoon.support.util.ModelSet.equals(Object)
6093    2   1    0 spoon.support.util.ModelSet.hashCode()
6094    2   1    0 spoon.support.util.ModelSet.iterator()
6095    2   1    0 spoon.support.util.ModelSet.Itr.Itr()
6096    2   1    0 spoon.support.util.ModelSet.Itr.hasNext()
6097    3   1    0 spoon.support.util.ModelSet.Itr.next()
6098    2   1    0 spoon.support.util.ModelSet.Itr.remove()
6099    2   1    0 spoon.support.util.ModelSet.getModelChangeListener()
6100    4   3    0 spoon.support.util.ModelSet.set(T)
6101    2   1    0 spoon.support.util.SortedList.SortedList(E)
6102    8   4    0 spoon.support.util.SortedList.add(E)
6103    2   2    0 spoon.support.util.SortedList.add(int,E)
6104    5   2    0 spoon.support.util.SortedList.addAll(E)
6105    2   1    0 spoon.support.util.SortedList.getComparator()
6106    2   1    0 spoon.support.util.SortedList.setComparator(E)
6107    3   1    0 spoon.support.util.SignatureBasedSortedSet.SignatureBasedSortedSet(E)
6108    2   1    0 spoon.support.util.SignatureBasedSortedSet.SignatureBasedSortedSet()
6109    2   1    0 spoon.support.util.EmptyClearableList.instance()
6110    1   1    0 spoon.support.util.EmptyClearableList.EmptyClearableList()
6111    1   1    0 spoon.support.util.EmptyClearableList.clear()
6112    2   1    0 spoon.support.util.EmptyClearableList.iterator()
6113    2   1    0 spoon.support.util.EmptyClearableList.listIterator()
6114    2   1    0 spoon.support.util.EmptyClearableList.size()
6115    2   1    0 spoon.support.util.EmptyClearableList.isEmpty()
6116    2   1    0 spoon.support.util.EmptyClearableList.contains(Object)
6117    2   1    0 spoon.support.util.EmptyClearableList.containsAll(Collection)
6118    2   1    0 spoon.support.util.EmptyClearableList.toArray()
6119    4   2    0 spoon.support.util.EmptyClearableList.toArray(T[])
6120    2   2    0 spoon.support.util.EmptyClearableList.get(int)
6121    2   2    0 spoon.support.util.EmptyClearableList.equals(Object)
6122    2   1    0 spoon.support.util.EmptyClearableList.hashCode()
6123    2   1    0 spoon.support.util.EmptyClearableList.readResolve()
6124    2   1    0 spoon.support.util.EmptyClearableList.EmptyListIterator.hasPrevious()
6125    2   2    0 spoon.support.util.EmptyClearableList.EmptyListIterator.previous()
6126    2   1    0 spoon.support.util.EmptyClearableList.EmptyListIterator.nextIndex()
6127    2   1    0 spoon.support.util.EmptyClearableList.EmptyListIterator.previousIndex()
6128    2   2    0 spoon.support.util.EmptyClearableList.EmptyListIterator.set(E)
6129    2   2    0 spoon.support.util.EmptyClearableList.EmptyListIterator.add(E)
6130    2   1    0 spoon.support.util.EmptyClearableSet.instance()
6131    1   1    0 spoon.support.util.EmptyClearableSet.EmptyClearableSet()
6132    1   1    0 spoon.support.util.EmptyClearableSet.clear()
6133    2   1    0 spoon.support.util.EmptyClearableSet.iterator()
6134    2   1    0 spoon.support.util.EmptyClearableSet.size()
6135    2   1    0 spoon.support.util.EmptyClearableSet.isEmpty()
6136    2   1    0 spoon.support.util.EmptyClearableSet.contains(Object)
6137    2   1    0 spoon.support.util.EmptyClearableSet.containsAll(Collection)
6138    2   1    0 spoon.support.util.EmptyClearableSet.toArray()
6139    4   2    0 spoon.support.util.EmptyClearableSet.toArray(T[])
6140    2   1    0 spoon.support.util.EmptyClearableSet.readResolve()
6141    1   1    0 spoon.support.util.ModelList.ModelList()
6142    1   1    0 spoon.support.util.ModelList.getOwner()
6143    1   1    0 spoon.support.util.ModelList.getRole()
6144    1   1    0 spoon.support.util.ModelList.getDefaultCapacity()
6145    1   1    0 spoon.support.util.ModelList.onSizeChanged(int)
6146    2   1    0 spoon.support.util.ModelList.get(int)
6147    4   3    1 spoon.support.util.ModelList.set(T)
6148    2   1    0 spoon.support.util.ModelList.size()
6149   12   3    0 spoon.support.util.ModelList.set(int,T)
6150    5   6    0 spoon.support.util.ModelList.linkToParent(CtElement,CtElement)
6151    2   1    0 spoon.support.util.ModelList.contains(Object)
6152    2   1    0 spoon.support.util.ModelList.isEmpty()
6153    2   1    0 spoon.support.util.ModelList.toArray()
6154    2   1    0 spoon.support.util.ModelList.toArray(T[])
6155   11   3    0 spoon.support.util.ModelList.add(T)
6156   13   8    0 spoon.support.util.ModelList.remove(Object)
6157    2   1    0 spoon.support.util.ModelList.containsAll(Collection)
6158    5   1    0 spoon.support.util.ModelList.clear()
6159    2   1    0 spoon.support.util.ModelList.equals(Object)
6160    2   1    0 spoon.support.util.ModelList.hashCode()
6161   10   3    0 spoon.support.util.ModelList.add(int,T)
6162    7   1    0 spoon.support.util.ModelList.remove(int)
6163    2   1    0 spoon.support.util.ModelList.indexOf(Object)
6164    2   1    0 spoon.support.util.ModelList.lastIndexOf(Object)
6165    2   1    0 spoon.support.util.ModelList.InternalList.InternalList(int)
6166    2   1    0 spoon.support.util.ModelList.InternalList.getModCount()
6167    3   2    0 spoon.support.util.ModelList.updateModCount()
6168    3   2    0 spoon.support.util.ModelList.ensureModifiableList()
6169    2   1    0 spoon.support.util.ModelList.getModelChangeListener()
6170    3   1    0 spoon.support.util.QualifiedNameBasedSortedSet.QualifiedNameBasedSortedSet(E)
6171    2   1    0 spoon.support.util.QualifiedNameBasedSortedSet.QualifiedNameBasedSortedSet()
6172    2   1    0 spoon.support.util.EmptyIterator.instance()
6173    1   1    0 spoon.support.util.EmptyIterator.EmptyIterator()
6174    2   1    0 spoon.support.util.EmptyIterator.hasNext()
6175    2   2    0 spoon.support.util.EmptyIterator.next()
6176    2   2    0 spoon.support.util.EmptyIterator.remove()
6177    1   1    1 spoon.support.util.ImmutableMap.hasValue(String)
6178    1   1    1 spoon.support.util.ImmutableMap.getValue(String)
6179    1   1    1 spoon.support.util.ImmutableMap.putValue(String,Object)
6180    1   1    1 spoon.support.util.ImmutableMap.asMap()
6181    1   1    1 spoon.support.util.ImmutableMap.checkpoint()
6182    1   1    1 spoon.support.util.ImmutableMap.getModifiedValues()
6183    1   1    0 spoon.support.util.RtHelper.RtHelper()
6184    5   1    1 spoon.support.util.RtHelper.getAllFields(Class)
6185    6   4    0 spoon.support.util.RtHelper.addAllFields(Class,Field)
6186    5   2    1 spoon.support.util.RtHelper.getAllFields(Class,Factory)
6187   10   4    1 spoon.support.util.RtHelper.getAllMethods(Class)
6188    4   2    0 spoon.support.util.RtHelper.getAllIMethods(Class,Method)
6189   10   4    1 spoon.support.util.RtHelper.invoke(T)
6190   25  12    1 spoon.support.util.RtHelper.getModifiers(int)
6191    7   3    1 spoon.support.util.RtHelper.getAllExecutables(Class,Factory)
6192    8   6    1 spoon.support.util.RtHelper.getMethod(Class,String,int)
6193    5   3    0 spoon.support.reflect.cu.CompilationUnitImpl.beginOfLineIndex(int)
6194    5   3    0 spoon.support.reflect.cu.CompilationUnitImpl.nextLineIndex(int)
6195   12   6    0 spoon.support.reflect.cu.CompilationUnitImpl.getTabCount(int)
6196    2   1    0 spoon.support.reflect.cu.CompilationUnitImpl.isAutoImport()
6197    2   1    0 spoon.support.reflect.cu.CompilationUnitImpl.setAutoImport(boolean)
6198    2   1    0 spoon.support.reflect.cu.position.PartialSourcePositionImpl.PartialSourcePositionImpl(CompilationUnit)
6199    2   1    0 spoon.support.reflect.cu.position.PartialSourcePositionImpl.getFile()
6200    2   1    0 spoon.support.reflect.cu.position.PartialSourcePositionImpl.getCompilationUnit()
6201   23  11    1 spoon.support.reflect.cu.position.SourcePositionImpl.searchLineNumber(int)
6202   22  14    1 spoon.support.reflect.cu.position.SourcePositionImpl.searchColumnNumber(int)
6203    9   5    0 spoon.support.reflect.cu.position.SourcePositionImpl.SourcePositionImpl(CompilationUnit,int,int,int[])
6204    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.isValidPosition()
6205    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getColumn()
6206    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getEndColumn()
6207    2   2    0 spoon.support.reflect.cu.position.SourcePositionImpl.getFile()
6208    4   2    0 spoon.support.reflect.cu.position.SourcePositionImpl.getLine()
6209    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getEndLine()
6210    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getSourceEnd()
6211    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getSourceStart()
6212    5   4    1 spoon.support.reflect.cu.position.SourcePositionImpl.toString()
6213    7   8    0 spoon.support.reflect.cu.position.SourcePositionImpl.equals(Object)
6214    7   2    0 spoon.support.reflect.cu.position.SourcePositionImpl.hashCode()
6215    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getCompilationUnit()
6216    2   1    1 spoon.support.reflect.cu.position.SourcePositionImpl.getSourceDetails()
6217    2   1    0 spoon.support.reflect.cu.position.SourcePositionImpl.getFragment(int,int)
6218    8   6    1 spoon.support.reflect.cu.position.SourcePositionImpl.checkArgsAreAscending(int)
6219    2   2    0 spoon.support.reflect.cu.position.SourcePositionImpl.getLineSeparatorPositions()
6220    5   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.CompoundSourcePositionImpl(CompilationUnit,int,int,int,int,int[])
6221    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getSourceEnd()
6222    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getSourceStart()
6223    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getNameStart()
6224    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getNameEnd()
6225    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getEndLine()
6226    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getEndColumn()
6227    2   1    0 spoon.support.reflect.cu.position.CompoundSourcePositionImpl.getSourceDetails()
6228    5   1    0 spoon.support.reflect.cu.position.BodyHolderSourcePositionImpl.BodyHolderSourcePositionImpl(CompilationUnit,int,int,int,int,int,int,int,int,int[])
6229    2   1    0 spoon.support.reflect.cu.position.BodyHolderSourcePositionImpl.getBodyStart()
6230    2   1    0 spoon.support.reflect.cu.position.BodyHolderSourcePositionImpl.getBodyEnd()
6231    2   1    0 spoon.support.reflect.cu.position.BodyHolderSourcePositionImpl.getSourceDetails()
6232    7   2    0 spoon.support.reflect.cu.position.DeclarationSourcePositionImpl.DeclarationSourcePositionImpl(CompilationUnit,int,int,int,int,int,int,int[])
6233    2   1    0 spoon.support.reflect.cu.position.DeclarationSourcePositionImpl.getModifierSourceStart()
6234    2   1    0 spoon.support.reflect.cu.position.DeclarationSourcePositionImpl.setModifierSourceEnd(int)
6235    2   1    0 spoon.support.reflect.cu.position.DeclarationSourcePositionImpl.getModifierSourceEnd()
6236    2   1    0 spoon.support.reflect.cu.position.DeclarationSourcePositionImpl.getSourceDetails()
6237    2   1    0 spoon.support.reflect.code.CtFieldReadImpl.accept(CtVisitor)
6238    2   1    0 spoon.support.reflect.code.CtFieldReadImpl.clone()
6239    2   1    0 spoon.support.reflect.code.CtCodeSnippetExpressionImpl.accept(CtVisitor)
6240    2   1    0 spoon.support.reflect.code.CtCodeSnippetExpressionImpl.getValue()
6241    4   1    0 spoon.support.reflect.code.CtCodeSnippetExpressionImpl.setValue(String)
6242    2   1    0 spoon.support.reflect.code.CtCodeSnippetExpressionImpl.compile()
6243    2   1    0 spoon.support.reflect.code.CtCodeSnippetExpressionImpl.clone()
6244    2   1    0 spoon.support.reflect.code.CtCodeSnippetStatementImpl.accept(CtVisitor)
6245    2   1    0 spoon.support.reflect.code.CtCodeSnippetStatementImpl.getValue()
6246    4   1    0 spoon.support.reflect.code.CtCodeSnippetStatementImpl.setValue(String)
6247    2   1    0 spoon.support.reflect.code.CtCodeSnippetStatementImpl.compile()
6248    2   1    0 spoon.support.reflect.code.CtCodeSnippetStatementImpl.clone()
6249    2   1    0 spoon.support.reflect.code.CtBinaryOperatorImpl.accept(CtVisitor)
6250    2   1    0 spoon.support.reflect.code.CtBinaryOperatorImpl.getLeftHandOperand()
6251    2   1    0 spoon.support.reflect.code.CtBinaryOperatorImpl.getRightHandOperand()
6252    6   2    0 spoon.support.reflect.code.CtBinaryOperatorImpl.setLeftHandOperand(CtExpression)
6253    6   2    0 spoon.support.reflect.code.CtBinaryOperatorImpl.setRightHandOperand(CtExpression)
6254    4   1    0 spoon.support.reflect.code.CtBinaryOperatorImpl.setKind(BinaryOperatorKind)
6255    2   1    0 spoon.support.reflect.code.CtBinaryOperatorImpl.getKind()
6256    2   1    0 spoon.support.reflect.code.CtBinaryOperatorImpl.clone()
6257    2   1    0 spoon.support.reflect.code.CtTargetedExpressionImpl.getTarget()
6258    6   2    0 spoon.support.reflect.code.CtTargetedExpressionImpl.setTarget(T)
6259    2   1    0 spoon.support.reflect.code.CtTargetedExpressionImpl.clone()
6260    2   1    0 spoon.support.reflect.code.CtSynchronizedImpl.accept(CtVisitor)
6261    2   1    0 spoon.support.reflect.code.CtSynchronizedImpl.getBlock()
6262    2   1    0 spoon.support.reflect.code.CtSynchronizedImpl.getExpression()
6263    6   2    0 spoon.support.reflect.code.CtSynchronizedImpl.setBlock(CtBlock)
6264    6   2    0 spoon.support.reflect.code.CtSynchronizedImpl.setExpression(CtExpression)
6265    2   1    0 spoon.support.reflect.code.CtSynchronizedImpl.clone()
6266    2   1    0 spoon.support.reflect.code.CtTypeAccessImpl.accept(CtVisitor)
6267    2   1    0 spoon.support.reflect.code.CtTypeAccessImpl.getAccessedType()
6268    6   2    0 spoon.support.reflect.code.CtTypeAccessImpl.setAccessedType(A)
6269    2   1    0 spoon.support.reflect.code.CtTypeAccessImpl.getType()
6270    2   1    0 spoon.support.reflect.code.CtTypeAccessImpl.setType(Void)
6271    4   3    0 spoon.support.reflect.code.CtTypeAccessImpl.isImplicit()
6272    4   2    0 spoon.support.reflect.code.CtTypeAccessImpl.setImplicit(boolean)
6273    2   1    0 spoon.support.reflect.code.CtTypeAccessImpl.clone()
6274    2   1    0 spoon.support.reflect.code.CtBreakImpl.accept(CtVisitor)
6275    2   1    0 spoon.support.reflect.code.CtBreakImpl.getTargetLabel()
6276    4   1    0 spoon.support.reflect.code.CtBreakImpl.setTargetLabel(String)
6277    8   6    0 spoon.support.reflect.code.CtBreakImpl.getLabelledStatement()
6278    2   1    0 spoon.support.reflect.code.CtBreakImpl.clone()
6279    2   1    0 spoon.support.reflect.code.CtFieldAccessImpl.getTarget()
6280    6   2    0 spoon.support.reflect.code.CtFieldAccessImpl.setTarget(CtExpression)
6281    8   5    0 spoon.support.reflect.code.CtFieldAccessImpl.getVariable()
6282    2   1    0 spoon.support.reflect.code.CtFieldAccessImpl.clone()
6283    2   1    0 spoon.support.reflect.code.CtAnnotationFieldAccessImpl.accept(CtVisitor)
6284    2   1    0 spoon.support.reflect.code.CtAnnotationFieldAccessImpl.clone()
6285    4   1    0 spoon.support.reflect.code.CtStatementImpl.insertAfter(CtStatement,CtStatement)
6286    5   3    0 spoon.support.reflect.code.CtStatementImpl.insertAfter(CtStatement,CtStatementList)
6287    4   1    1 spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatement,CtStatement)
6288    9   8    1 spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatement,CtStatementList)
6289    4   1    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.InsertVisitor(CtStatement,CtStatementList,InsertType)
6290    3   1    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.visitCtBlock(R)
6291   17   6    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.visitCtIf(CtIf)
6292    6   4    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.visitCtSwitch(E)
6293    4   1    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.visitCtCase(E)
6294    9   2    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.scanCtLoop(CtLoop)
6295    5   1    0 spoon.support.reflect.code.CtStatementImpl.InsertVisitor.insertNewBlock(CtStatement)
6296    2   1    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insert(CtBlock,CtStatementList)
6297    7   2    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insertFromFirstStatement(CtBlock,CtStatement,CtStatementList)
6298    7   2    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insertFromLastStatement(T,CtStatement,CtStatementList)
6299    2   1    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insert(CtBlock,CtStatementList)
6300    7   2    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insertFromFirstStatement(CtBlock,CtStatement,CtStatementList)
6301    7   2    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insertFromLastStatement(T,CtStatement,CtStatementList)
6302    7   3    0 spoon.support.reflect.code.CtStatementImpl.InsertType.indexOfReference(List,CtElement)
6303    1   1    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insert(CtBlock,CtStatementList)
6304    1   1    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insertFromFirstStatement(CtBlock,CtStatement,CtStatementList)
6305    1   1    0 spoon.support.reflect.code.CtStatementImpl.InsertType.insertFromLastStatement(T,CtStatement,CtStatementList)
6306    3   1    0 spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatement)
6307    3   1    0 spoon.support.reflect.code.CtStatementImpl.insertBefore(CtStatementList)
6308    3   1    0 spoon.support.reflect.code.CtStatementImpl.insertAfter(CtStatement)
6309    3   1    0 spoon.support.reflect.code.CtStatementImpl.insertAfter(CtStatementList)
6310    2   1    0 spoon.support.reflect.code.CtStatementImpl.getLabel()
6311    4   1    0 spoon.support.reflect.code.CtStatementImpl.setLabel(String)
6312    2   1    0 spoon.support.reflect.code.CtStatementImpl.clone()
6313    2   1    0 spoon.support.reflect.code.CtContinueImpl.accept(CtVisitor)
6314    2   1    0 spoon.support.reflect.code.CtContinueImpl.getTargetLabel()
6315    4   1    0 spoon.support.reflect.code.CtContinueImpl.setTargetLabel(String)
6316    8   6    0 spoon.support.reflect.code.CtContinueImpl.getLabelledStatement()
6317    2   1    0 spoon.support.reflect.code.CtContinueImpl.clone()
6318    2   1    0 spoon.support.reflect.code.CtTryImpl.accept(CtVisitor)
6319    2   1    0 spoon.support.reflect.code.CtTryImpl.getCatchers()
6320    9   5    0 spoon.support.reflect.code.CtTryImpl.setCatchers(CtCatch)
6321    9   4    0 spoon.support.reflect.code.CtTryImpl.addCatcher(CtCatch)
6322    5   3    0 spoon.support.reflect.code.CtTryImpl.removeCatcher(CtCatch)
6323    2   1    0 spoon.support.reflect.code.CtTryImpl.getFinalizer()
6324    6   2    0 spoon.support.reflect.code.CtTryImpl.setFinalizer(CtBlock)
6325    2   1    0 spoon.support.reflect.code.CtTryImpl.getBody()
6326   11   3    0 spoon.support.reflect.code.CtTryImpl.setBody(CtStatement)
6327    2   1    0 spoon.support.reflect.code.CtTryImpl.clone()
6328    2   1    0 spoon.support.reflect.code.CtTryImpl.S()
6329    2   1    0 spoon.support.reflect.code.CtTryImpl.getSubstitution(CtType)
6330    2   1    0 spoon.support.reflect.code.CtWhileImpl.accept(CtVisitor)
6331    2   1    0 spoon.support.reflect.code.CtWhileImpl.getLoopingExpression()
6332    6   2    0 spoon.support.reflect.code.CtWhileImpl.setLoopingExpression(Boolean)
6333    2   1    0 spoon.support.reflect.code.CtWhileImpl.clone()
6334    2   1    0 spoon.support.reflect.code.CtExpressionImpl.getType()
6335    2   1    0 spoon.support.reflect.code.CtExpressionImpl.getTypeCasts()
6336    6   2    0 spoon.support.reflect.code.CtExpressionImpl.setType(T)
6337   11   6    0 spoon.support.reflect.code.CtExpressionImpl.setTypeCasts(CtTypeReference)
6338    9   4    0 spoon.support.reflect.code.CtExpressionImpl.addTypeCast(CtTypeReference)
6339    2   1    0 spoon.support.reflect.code.CtExpressionImpl.S()
6340    2   1    0 spoon.support.reflect.code.CtExpressionImpl.clone()
6341    2   1    0 spoon.support.reflect.code.CtSuperAccessImpl.accept(CtVisitor)
6342    2   1    0 spoon.support.reflect.code.CtSuperAccessImpl.getTarget()
6343    6   2    0 spoon.support.reflect.code.CtSuperAccessImpl.setTarget(CtExpression)
6344    2   1    0 spoon.support.reflect.code.CtSuperAccessImpl.clone()
6345    1   1    0 spoon.support.reflect.code.CtCodeElementImpl.CtCodeElementImpl()
6346    3   1    0 spoon.support.reflect.code.CtCodeElementImpl.partiallyEvaluate()
6347    2   1    0 spoon.support.reflect.code.CtCodeElementImpl.clone()
6348    2   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.getType()
6349    3   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.setType(String)
6350    4   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.setType(TagType)
6351    2   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.getContent()
6352    4   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.setContent(String)
6353    2   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.getParam()
6354    4   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.setParam(String)
6355    2   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.accept(CtVisitor)
6356    2   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.clone()
6357    2   1    0 spoon.support.reflect.code.CtJavaDocTagImpl.toString()
6358    2   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.accept(CtVisitor)
6359    2   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.getOperand()
6360    2   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.getKind()
6361    2   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.getLabel()
6362    3   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.insertAfter(CtStatement)
6363    3   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.insertBefore(CtStatement)
6364    3   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.insertAfter(CtStatementList)
6365    3   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.insertBefore(CtStatementList)
6366    6   2    0 spoon.support.reflect.code.CtUnaryOperatorImpl.setOperand(T)
6367    4   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.setKind(UnaryOperatorKind)
6368    4   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.setLabel(String)
6369    2   1    0 spoon.support.reflect.code.CtUnaryOperatorImpl.clone()
6370    2   1    0 spoon.support.reflect.code.CtBlockImpl.ModelList$1.getOwner()
6371    2   1    0 spoon.support.reflect.code.CtBlockImpl.ModelList$1.getRole()
6372    2   1    0 spoon.support.reflect.code.CtBlockImpl.ModelList$1.getDefaultCapacity()
6373    3   4    0 spoon.support.reflect.code.CtBlockImpl.ModelList$1.onSizeChanged(int)
6374    2   1    0 spoon.support.reflect.code.CtBlockImpl.accept(CtVisitor)
6375    2   1    0 spoon.support.reflect.code.CtBlockImpl.getStatements()
6376    2   1    0 spoon.support.reflect.code.CtBlockImpl.getStatement(int)
6377    2   1    0 spoon.support.reflect.code.CtBlockImpl.getLastStatement()
6378    7   8    0 spoon.support.reflect.code.CtBlockImpl.shouldInsertAfterSuper()
6379    8   3    0 spoon.support.reflect.code.CtBlockImpl.insertBegin(CtStatementList)
6380    6   3    0 spoon.support.reflect.code.CtBlockImpl.insertBegin(CtStatement)
6381    3   1    0 spoon.support.reflect.code.CtBlockImpl.insertEnd(CtStatement)
6382    5   1    0 spoon.support.reflect.code.CtBlockImpl.insertEnd(CtStatementList)
6383    4   2    0 spoon.support.reflect.code.CtBlockImpl.insertAfter(CtStatement,CtStatement)
6384    4   2    0 spoon.support.reflect.code.CtBlockImpl.insertAfter(CtStatement,CtStatementList)
6385    4   2    0 spoon.support.reflect.code.CtBlockImpl.insertBefore(CtStatement,CtStatement)
6386    4   2    0 spoon.support.reflect.code.CtBlockImpl.insertBefore(CtStatement,CtStatementList)
6387    3   1    0 spoon.support.reflect.code.CtBlockImpl.setStatements(CtStatement)
6388    3   1    0 spoon.support.reflect.code.CtBlockImpl.addStatement(CtStatement)
6389    3   1    0 spoon.support.reflect.code.CtBlockImpl.addStatement(int,CtStatement)
6390    2   1    0 spoon.support.reflect.code.CtBlockImpl.removeStatement(CtStatement)
6391    2   1    0 spoon.support.reflect.code.CtBlockImpl.iterator()
6392    2   1    0 spoon.support.reflect.code.CtBlockImpl.S()
6393    2   1    0 spoon.support.reflect.code.CtBlockImpl.clone()
6394    2   1    0 spoon.support.reflect.code.CtNewArrayImpl.accept(CtVisitor)
6395    2   1    0 spoon.support.reflect.code.CtNewArrayImpl.getDimensionExpressions()
6396    2   1    0 spoon.support.reflect.code.CtNewArrayImpl.getElements()
6397    9   5    0 spoon.support.reflect.code.CtNewArrayImpl.setDimensionExpressions(Integer)
6398    9   4    0 spoon.support.reflect.code.CtNewArrayImpl.addDimensionExpression(Integer)
6399    5   3    0 spoon.support.reflect.code.CtNewArrayImpl.removeDimensionExpression(Integer)
6400    9   5    0 spoon.support.reflect.code.CtNewArrayImpl.setElements(CtExpression)
6401    9   4    0 spoon.support.reflect.code.CtNewArrayImpl.addElement(CtExpression)
6402    5   3    0 spoon.support.reflect.code.CtNewArrayImpl.removeElement(CtExpression)
6403    2   1    0 spoon.support.reflect.code.CtNewArrayImpl.clone()
6404    2   1    0 spoon.support.reflect.code.CtThisAccessImpl.accept(CtVisitor)
6405    2   1    0 spoon.support.reflect.code.CtThisAccessImpl.clone()
6406    2   1    0 spoon.support.reflect.code.CtStatementListImpl.accept(CtVisitor)
6407    2   1    0 spoon.support.reflect.code.CtStatementListImpl.getStatements()
6408    9   5    0 spoon.support.reflect.code.CtStatementListImpl.setStatements(CtStatement)
6409    2   1    0 spoon.support.reflect.code.CtStatementListImpl.addStatement(CtStatement)
6410    9   4    0 spoon.support.reflect.code.CtStatementListImpl.addStatement(int,CtStatement)
6411    3   2    0 spoon.support.reflect.code.CtStatementListImpl.ensureModifiableStatementsList()
6412    8   4    0 spoon.support.reflect.code.CtStatementListImpl.insertBegin(CtStatementList)
6413    7   3    0 spoon.support.reflect.code.CtStatementListImpl.insertBegin(CtStatement)
6414    4   1    0 spoon.support.reflect.code.CtStatementListImpl.insertEnd(CtStatement)
6415    6   2    0 spoon.support.reflect.code.CtStatementListImpl.insertEnd(CtStatementList)
6416    4   2    0 spoon.support.reflect.code.CtStatementListImpl.insertAfter(CtStatement,CtStatement)
6417    4   2    0 spoon.support.reflect.code.CtStatementListImpl.insertAfter(CtStatement,CtStatementList)
6418    4   2    0 spoon.support.reflect.code.CtStatementListImpl.insertBefore(CtStatement,CtStatement)
6419    4   2    0 spoon.support.reflect.code.CtStatementListImpl.insertBefore(CtStatement,CtStatementList)
6420    2   1    0 spoon.support.reflect.code.CtStatementListImpl.getStatement(int)
6421    2   1    0 spoon.support.reflect.code.CtStatementListImpl.getLastStatement()
6422    5   3    0 spoon.support.reflect.code.CtStatementListImpl.removeStatement(CtStatement)
6423    4   2    0 spoon.support.reflect.code.CtStatementListImpl.setPosition(SourcePosition)
6424    2   1    0 spoon.support.reflect.code.CtStatementListImpl.iterator()
6425    2   1    0 spoon.support.reflect.code.CtStatementListImpl.clone()
6426    2   1    0 spoon.support.reflect.code.CtStatementListImpl.getSubstitution(CtType)
6427    5   3    0 spoon.support.reflect.code.CtVariableAccessImpl.getVariable()
6428    6   2    0 spoon.support.reflect.code.CtVariableAccessImpl.setVariable(T)
6429    2   1    0 spoon.support.reflect.code.CtVariableAccessImpl.getType()
6430    6   3    0 spoon.support.reflect.code.CtVariableAccessImpl.setType(T)
6431    2   1    0 spoon.support.reflect.code.CtVariableAccessImpl.clone()
6432    2   1    0 spoon.support.reflect.code.CtThrowImpl.accept(CtVisitor)
6433    2   1    0 spoon.support.reflect.code.CtThrowImpl.getThrownExpression()
6434    6   2    0 spoon.support.reflect.code.CtThrowImpl.setThrownExpression(Throwable)
6435    2   1    0 spoon.support.reflect.code.CtThrowImpl.clone()
6436    2   1    0 spoon.support.reflect.code.CtThrowImpl.S()
6437    2   1    0 spoon.support.reflect.code.CtThrowImpl.getSubstitution(CtType)
6438    2   1    0 spoon.support.reflect.code.CtArrayAccessImpl.getIndexExpression()
6439    6   2    0 spoon.support.reflect.code.CtArrayAccessImpl.setIndexExpression(Integer)
6440    2   1    0 spoon.support.reflect.code.CtArrayAccessImpl.clone()
6441    2   1    0 spoon.support.reflect.code.CtLiteralImpl.accept(CtVisitor)
6442    2   1    0 spoon.support.reflect.code.CtLiteralImpl.getValue()
6443    6   2    0 spoon.support.reflect.code.CtLiteralImpl.setValue(T)
6444    2   1    0 spoon.support.reflect.code.CtLiteralImpl.clone()
6445    2   1    0 spoon.support.reflect.code.CtConstructorCallImpl.accept(CtVisitor)
6446    2   1    0 spoon.support.reflect.code.CtConstructorCallImpl.getArguments()
6447    5   2    0 spoon.support.reflect.code.CtConstructorCallImpl.getExecutable()
6448    2   1    0 spoon.support.reflect.code.CtConstructorCallImpl.getLabel()
6449    3   1    0 spoon.support.reflect.code.CtConstructorCallImpl.insertAfter(CtStatement)
6450    3   1    0 spoon.support.reflect.code.CtConstructorCallImpl.insertBefore(CtStatement)
6451    3   1    0 spoon.support.reflect.code.CtConstructorCallImpl.insertAfter(CtStatementList)
6452    3   1    0 spoon.support.reflect.code.CtConstructorCallImpl.insertBefore(CtStatementList)
6453   11   6    0 spoon.support.reflect.code.CtConstructorCallImpl.setArguments(CtExpression)
6454    9   4    0 spoon.support.reflect.code.CtConstructorCallImpl.addArgument(int,CtExpression)
6455    2   1    0 spoon.support.reflect.code.CtConstructorCallImpl.addArgument(CtExpression)
6456    5   3    0 spoon.support.reflect.code.CtConstructorCallImpl.removeArgument(CtExpression)
6457    6   2    0 spoon.support.reflect.code.CtConstructorCallImpl.setExecutable(T)
6458    4   1    0 spoon.support.reflect.code.CtConstructorCallImpl.setLabel(String)
6459    2   2    0 spoon.support.reflect.code.CtConstructorCallImpl.getActualTypeArguments()
6460    4   2    0 spoon.support.reflect.code.CtConstructorCallImpl.setActualTypeArguments(CtTypeReference)
6461    4   2    0 spoon.support.reflect.code.CtConstructorCallImpl.addActualTypeArgument(CtTypeReference)
6462    4   3    0 spoon.support.reflect.code.CtConstructorCallImpl.removeActualTypeArgument(CtTypeReference)
6463    2   2    0 spoon.support.reflect.code.CtConstructorCallImpl.getType()
6464    6   3    0 spoon.support.reflect.code.CtConstructorCallImpl.setType(T)
6465    2   1    0 spoon.support.reflect.code.CtConstructorCallImpl.clone()
6466    2   1    0 spoon.support.reflect.code.CtOperatorAssignmentImpl.accept(CtVisitor)
6467    2   1    0 spoon.support.reflect.code.CtOperatorAssignmentImpl.getKind()
6468    4   1    0 spoon.support.reflect.code.CtOperatorAssignmentImpl.setKind(BinaryOperatorKind)
6469    2   1    0 spoon.support.reflect.code.CtOperatorAssignmentImpl.clone()
6470    2   1    0 spoon.support.reflect.code.CtNewClassImpl.accept(CtVisitor)
6471    2   1    0 spoon.support.reflect.code.CtNewClassImpl.getAnonymousClass()
6472    6   2    0 spoon.support.reflect.code.CtNewClassImpl.setAnonymousClass(CtClass)
6473    2   1    0 spoon.support.reflect.code.CtNewClassImpl.clone()
6474    2   1    0 spoon.support.reflect.code.CtAssertImpl.accept(CtVisitor)
6475    2   1    0 spoon.support.reflect.code.CtAssertImpl.getAssertExpression()
6476    6   2    0 spoon.support.reflect.code.CtAssertImpl.setAssertExpression(Boolean)
6477    2   1    0 spoon.support.reflect.code.CtAssertImpl.getExpression()
6478    6   2    0 spoon.support.reflect.code.CtAssertImpl.setExpression(T)
6479    2   1    0 spoon.support.reflect.code.CtAssertImpl.clone()
6480    2   1    0 spoon.support.reflect.code.CtCatchImpl.accept(CtVisitor)
6481    2   1    0 spoon.support.reflect.code.CtCatchImpl.getBody()
6482    2   1    0 spoon.support.reflect.code.CtCatchImpl.getParameter()
6483   11   3    0 spoon.support.reflect.code.CtCatchImpl.setBody(CtStatement)
6484    6   2    0 spoon.support.reflect.code.CtCatchImpl.setParameter(Throwable)
6485    2   1    0 spoon.support.reflect.code.CtCatchImpl.clone()
6486    1   1    0 spoon.support.reflect.code.CtCommentImpl.CtCommentImpl()
6487    2   1    0 spoon.support.reflect.code.CtCommentImpl.CtCommentImpl(CommentType)
6488    2   1    0 spoon.support.reflect.code.CtCommentImpl.getContent()
6489    8   4    0 spoon.support.reflect.code.CtCommentImpl.getRawContent()
6490    4   1    0 spoon.support.reflect.code.CtCommentImpl.setContent(String)
6491    2   1    0 spoon.support.reflect.code.CtCommentImpl.getCommentType()
6492    4   1    0 spoon.support.reflect.code.CtCommentImpl.setCommentType(CommentType)
6493    2   1    0 spoon.support.reflect.code.CtCommentImpl.accept(CtVisitor)
6494    9   8    1 spoon.support.reflect.code.CtCommentImpl.equals(Object)
6495    5   3    0 spoon.support.reflect.code.CtCommentImpl.hashCode()
6496    2   1    0 spoon.support.reflect.code.CtCommentImpl.clone()
6497    4   4    0 spoon.support.reflect.code.CtCommentImpl.asJavaDoc()
6498    2   1    0 spoon.support.reflect.code.CtIfImpl.accept(CtVisitor)
6499    2   1    0 spoon.support.reflect.code.CtIfImpl.getCondition()
6500    2   1    0 spoon.support.reflect.code.CtIfImpl.getElseStatement()
6501    2   1    0 spoon.support.reflect.code.CtIfImpl.getThenStatement()
6502    6   2    0 spoon.support.reflect.code.CtIfImpl.setCondition(Boolean)
6503    6   2    0 spoon.support.reflect.code.CtIfImpl.setElseStatement(CtStatement)
6504    6   2    0 spoon.support.reflect.code.CtIfImpl.setThenStatement(CtStatement)
6505    2   1    0 spoon.support.reflect.code.CtIfImpl.clone()
6506    2   1    0 spoon.support.reflect.code.CtIfImpl.S()
6507    2   1    0 spoon.support.reflect.code.CtIfImpl.getSubstitution(CtType)
6508    2   1    0 spoon.support.reflect.code.CtForImpl.accept(CtVisitor)
6509    2   1    0 spoon.support.reflect.code.CtForImpl.getExpression()
6510    6   2    0 spoon.support.reflect.code.CtForImpl.setExpression(Boolean)
6511    2   1    0 spoon.support.reflect.code.CtForImpl.getForInit()
6512    9   4    0 spoon.support.reflect.code.CtForImpl.addForInit(CtStatement)
6513    9   5    0 spoon.support.reflect.code.CtForImpl.setForInit(CtStatement)
6514    5   3    0 spoon.support.reflect.code.CtForImpl.removeForInit(CtStatement)
6515    2   1    0 spoon.support.reflect.code.CtForImpl.getForUpdate()
6516    9   4    0 spoon.support.reflect.code.CtForImpl.addForUpdate(CtStatement)
6517    9   5    0 spoon.support.reflect.code.CtForImpl.setForUpdate(CtStatement)
6518    5   3    0 spoon.support.reflect.code.CtForImpl.removeForUpdate(CtStatement)
6519    2   1    0 spoon.support.reflect.code.CtForImpl.clone()
6520    2   1    0 spoon.support.reflect.code.CtLoopImpl.getBody()
6521   11   3    0 spoon.support.reflect.code.CtLoopImpl.setBody(CtStatement)
6522    2   1    0 spoon.support.reflect.code.CtLoopImpl.clone()
6523    2   1    0 spoon.support.reflect.code.CtLoopImpl.S()
6524    2   1    0 spoon.support.reflect.code.CtLoopImpl.getSubstitution(CtType)
6525    2   1    0 spoon.support.reflect.code.CtArrayReadImpl.accept(CtVisitor)
6526    2   1    0 spoon.support.reflect.code.CtArrayReadImpl.clone()
6527    2   1    0 spoon.support.reflect.code.CtConditionalImpl.accept(CtVisitor)
6528    2   1    0 spoon.support.reflect.code.CtConditionalImpl.getElseExpression()
6529    2   1    0 spoon.support.reflect.code.CtConditionalImpl.getCondition()
6530    2   1    0 spoon.support.reflect.code.CtConditionalImpl.getThenExpression()
6531    6   2    0 spoon.support.reflect.code.CtConditionalImpl.setElseExpression(T)
6532    6   2    0 spoon.support.reflect.code.CtConditionalImpl.setCondition(Boolean)
6533    6   2    0 spoon.support.reflect.code.CtConditionalImpl.setThenExpression(T)
6534    2   1    0 spoon.support.reflect.code.CtConditionalImpl.clone()
6535    2   1    0 spoon.support.reflect.code.CtArrayWriteImpl.accept(CtVisitor)
6536    2   1    0 spoon.support.reflect.code.CtArrayWriteImpl.clone()
6537    2   1    0 spoon.support.reflect.code.CtInvocationImpl.accept(CtVisitor)
6538    2   1    0 spoon.support.reflect.code.CtInvocationImpl.getArguments()
6539    9   4    0 spoon.support.reflect.code.CtInvocationImpl.addArgument(int,CtExpression)
6540    2   1    0 spoon.support.reflect.code.CtInvocationImpl.addArgument(CtExpression)
6541    5   3    0 spoon.support.reflect.code.CtInvocationImpl.removeArgument(CtExpression)
6542    5   2    0 spoon.support.reflect.code.CtInvocationImpl.getExecutable()
6543    3   1    0 spoon.support.reflect.code.CtInvocationImpl.insertAfter(CtStatement)
6544    3   1    0 spoon.support.reflect.code.CtInvocationImpl.insertBefore(CtStatement)
6545    3   1    0 spoon.support.reflect.code.CtInvocationImpl.insertAfter(CtStatementList)
6546    3   1    0 spoon.support.reflect.code.CtInvocationImpl.insertBefore(CtStatementList)
6547   11   6    0 spoon.support.reflect.code.CtInvocationImpl.setArguments(CtExpression)
6548    6   2    0 spoon.support.reflect.code.CtInvocationImpl.setExecutable(T)
6549    2   1    0 spoon.support.reflect.code.CtInvocationImpl.getLabel()
6550    4   1    0 spoon.support.reflect.code.CtInvocationImpl.setLabel(String)
6551    2   2    0 spoon.support.reflect.code.CtInvocationImpl.getType()
6552    6   3    0 spoon.support.reflect.code.CtInvocationImpl.setType(T)
6553    2   2    0 spoon.support.reflect.code.CtInvocationImpl.getActualTypeArguments()
6554    4   2    0 spoon.support.reflect.code.CtInvocationImpl.setActualTypeArguments(CtTypeReference)
6555    4   2    0 spoon.support.reflect.code.CtInvocationImpl.addActualTypeArgument(CtTypeReference)
6556    4   3    0 spoon.support.reflect.code.CtInvocationImpl.removeActualTypeArgument(CtTypeReference)
6557    2   1    0 spoon.support.reflect.code.CtInvocationImpl.clone()
6558    2   1    0 spoon.support.reflect.code.CtForEachImpl.accept(CtVisitor)
6559    2   1    0 spoon.support.reflect.code.CtForEachImpl.getExpression()
6560    2   1    0 spoon.support.reflect.code.CtForEachImpl.getVariable()
6561    6   2    0 spoon.support.reflect.code.CtForEachImpl.setExpression(CtExpression)
6562    6   2    0 spoon.support.reflect.code.CtForEachImpl.setVariable(CtLocalVariable)
6563    2   1    0 spoon.support.reflect.code.CtForEachImpl.clone()
6564    2   1    0 spoon.support.reflect.code.CtTryWithResourceImpl.accept(CtVisitor)
6565    2   1    0 spoon.support.reflect.code.CtTryWithResourceImpl.getResources()
6566    9   5    0 spoon.support.reflect.code.CtTryWithResourceImpl.setResources(CtLocalVariable)
6567    9   4    0 spoon.support.reflect.code.CtTryWithResourceImpl.addResource(CtLocalVariable)
6568    5   3    0 spoon.support.reflect.code.CtTryWithResourceImpl.removeResource(CtLocalVariable)
6569    2   1    0 spoon.support.reflect.code.CtTryWithResourceImpl.clone()
6570    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.ModelList$1.getOwner()
6571    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.ModelList$1.getRole()
6572    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.ModelList$1.getDefaultCapacity()
6573    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.CtJavaDocImpl()
6574    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.getTags()
6575    3   1    0 spoon.support.reflect.code.CtJavaDocImpl.setTags(CtJavaDocTag)
6576    3   1    0 spoon.support.reflect.code.CtJavaDocImpl.addTag(CtJavaDocTag)
6577    3   1    0 spoon.support.reflect.code.CtJavaDocImpl.addTag(int,CtJavaDocTag)
6578    3   1    0 spoon.support.reflect.code.CtJavaDocImpl.removeTag(int)
6579    3   1    0 spoon.support.reflect.code.CtJavaDocImpl.removeTag(CtJavaDocTag)
6580    8   4    0 spoon.support.reflect.code.CtJavaDocImpl.getShortDescription()
6581   14   3    1 spoon.support.reflect.code.CtJavaDocImpl.setContent(String)
6582    6   3    0 spoon.support.reflect.code.CtJavaDocImpl.getLongDescription()
6583    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.accept(CtVisitor)
6584    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.clone()
6585    2   1    0 spoon.support.reflect.code.CtJavaDocImpl.getJavadocElements()
6586    2   1    0 spoon.support.reflect.code.CtCaseImpl.accept(CtVisitor)
6587    2   1    0 spoon.support.reflect.code.CtCaseImpl.getCaseExpression()
6588    2   1    0 spoon.support.reflect.code.CtCaseImpl.getStatements()
6589    6   2    0 spoon.support.reflect.code.CtCaseImpl.setCaseExpression(E)
6590    9   5    0 spoon.support.reflect.code.CtCaseImpl.setStatements(CtStatement)
6591    2   1    0 spoon.support.reflect.code.CtCaseImpl.addStatement(CtStatement)
6592    3   2    0 spoon.support.reflect.code.CtCaseImpl.ensureModifiableStatementsList()
6593    8   3    0 spoon.support.reflect.code.CtCaseImpl.addStatement(int,CtStatement)
6594    7   3    0 spoon.support.reflect.code.CtCaseImpl.insertBegin(CtStatement)
6595    8   4    0 spoon.support.reflect.code.CtCaseImpl.insertBegin(CtStatementList)
6596    4   1    0 spoon.support.reflect.code.CtCaseImpl.insertEnd(CtStatement)
6597    6   2    0 spoon.support.reflect.code.CtCaseImpl.insertEnd(CtStatementList)
6598    4   2    0 spoon.support.reflect.code.CtCaseImpl.insertBefore(CtStatement,CtStatement)
6599    4   2    0 spoon.support.reflect.code.CtCaseImpl.insertBefore(CtStatement,CtStatementList)
6600    4   2    0 spoon.support.reflect.code.CtCaseImpl.insertAfter(CtStatement,CtStatement)
6601    4   2    0 spoon.support.reflect.code.CtCaseImpl.insertAfter(CtStatement,CtStatementList)
6602    2   1    0 spoon.support.reflect.code.CtCaseImpl.getStatement(int)
6603    2   1    0 spoon.support.reflect.code.CtCaseImpl.getLastStatement()
6604    5   3    0 spoon.support.reflect.code.CtCaseImpl.removeStatement(CtStatement)
6605    2   1    0 spoon.support.reflect.code.CtCaseImpl.iterator()
6606    2   1    0 spoon.support.reflect.code.CtCaseImpl.clone()
6607    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.accept(CtVisitor)
6608    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.getDefaultExpression()
6609    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.getReference()
6610    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.getSimpleName()
6611   18  11    0 spoon.support.reflect.code.CtCatchVariableImpl.getType()
6612    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.setDefaultExpression(T)
6613    4   1    0 spoon.support.reflect.code.CtCatchVariableImpl.setSimpleName(String)
6614    3   2    0 spoon.support.reflect.code.CtCatchVariableImpl.setType(T)
6615    9   4    0 spoon.support.reflect.code.CtCatchVariableImpl.addMultiType(CtTypeReference)
6616    5   3    0 spoon.support.reflect.code.CtCatchVariableImpl.removeMultiType(CtTypeReference)
6617    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.getMultiTypes()
6618   11   6    0 spoon.support.reflect.code.CtCatchVariableImpl.setMultiTypes(CtTypeReference)
6619    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.getModifiers()
6620    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.hasModifier(ModifierKind)
6621    3   1    0 spoon.support.reflect.code.CtCatchVariableImpl.setModifiers(ModifierKind)
6622    3   1    0 spoon.support.reflect.code.CtCatchVariableImpl.addModifier(ModifierKind)
6623    3   1    0 spoon.support.reflect.code.CtCatchVariableImpl.removeModifier(ModifierKind)
6624    3   1    0 spoon.support.reflect.code.CtCatchVariableImpl.setVisibility(ModifierKind)
6625    8   7    0 spoon.support.reflect.code.CtCatchVariableImpl.getVisibility()
6626    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.getExtendedModifiers()
6627    3   1    0 spoon.support.reflect.code.CtCatchVariableImpl.setExtendedModifiers(CtExtendedModifier)
6628    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.clone()
6629    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.isPublic()
6630    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.isPrivate()
6631    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.isProtected()
6632    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.isFinal()
6633    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.isStatic()
6634    2   1    0 spoon.support.reflect.code.CtCatchVariableImpl.isAbstract()
6635    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.accept(CtVisitor)
6636    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getDefaultExpression()
6637    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getReference()
6638    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getSimpleName()
6639    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getType()
6640    6   2    0 spoon.support.reflect.code.CtLocalVariableImpl.setDefaultExpression(T)
6641    4   1    0 spoon.support.reflect.code.CtLocalVariableImpl.setSimpleName(String)
6642    6   2    0 spoon.support.reflect.code.CtLocalVariableImpl.setType(T)
6643    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getModifiers()
6644    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.hasModifier(ModifierKind)
6645    3   1    0 spoon.support.reflect.code.CtLocalVariableImpl.setModifiers(ModifierKind)
6646    3   1    0 spoon.support.reflect.code.CtLocalVariableImpl.addModifier(ModifierKind)
6647    3   1    0 spoon.support.reflect.code.CtLocalVariableImpl.removeModifier(ModifierKind)
6648    3   1    0 spoon.support.reflect.code.CtLocalVariableImpl.setVisibility(ModifierKind)
6649    8   7    0 spoon.support.reflect.code.CtLocalVariableImpl.getVisibility()
6650    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getExtendedModifiers()
6651    3   1    0 spoon.support.reflect.code.CtLocalVariableImpl.setExtendedModifiers(CtExtendedModifier)
6652    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.getAssignment()
6653    3   1    0 spoon.support.reflect.code.CtLocalVariableImpl.setAssignment(T)
6654    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isInferred()
6655    4   1    0 spoon.support.reflect.code.CtLocalVariableImpl.setInferred(boolean)
6656    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.clone()
6657    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isPublic()
6658    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isPrivate()
6659    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isProtected()
6660    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isFinal()
6661    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isStatic()
6662    2   1    0 spoon.support.reflect.code.CtLocalVariableImpl.isAbstract()
6663    2   1    0 spoon.support.reflect.code.CtDoImpl.accept(CtVisitor)
6664    2   1    0 spoon.support.reflect.code.CtDoImpl.getLoopingExpression()
6665    6   2    0 spoon.support.reflect.code.CtDoImpl.setLoopingExpression(Boolean)
6666    2   1    0 spoon.support.reflect.code.CtDoImpl.clone()
6667    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.accept(CtVisitor)
6668    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.getAssigned()
6669    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.getAssignment()
6670    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.getType()
6671    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.getTypeCasts()
6672    6   2    0 spoon.support.reflect.code.CtAssignmentImpl.setAssigned(T)
6673    6   2    0 spoon.support.reflect.code.CtAssignmentImpl.setAssignment(A)
6674    6   2    0 spoon.support.reflect.code.CtAssignmentImpl.setType(T)
6675   11   6    0 spoon.support.reflect.code.CtAssignmentImpl.setTypeCasts(CtTypeReference)
6676    9   4    0 spoon.support.reflect.code.CtAssignmentImpl.addTypeCast(CtTypeReference)
6677    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.S()
6678    2   1    0 spoon.support.reflect.code.CtAssignmentImpl.clone()
6679    2   1    0 spoon.support.reflect.code.CtVariableWriteImpl.accept(CtVisitor)
6680    2   1    0 spoon.support.reflect.code.CtVariableWriteImpl.clone()
6681    2   1    0 spoon.support.reflect.code.CtSwitchImpl.accept(CtVisitor)
6682    2   1    0 spoon.support.reflect.code.CtSwitchImpl.getCases()
6683    2   1    0 spoon.support.reflect.code.CtSwitchImpl.getSelector()
6684    9   5    0 spoon.support.reflect.code.CtSwitchImpl.setCases(S)
6685    6   2    0 spoon.support.reflect.code.CtSwitchImpl.setSelector(S)
6686    9   4    0 spoon.support.reflect.code.CtSwitchImpl.addCase(S)
6687    5   3    0 spoon.support.reflect.code.CtSwitchImpl.removeCase(S)
6688    2   1    0 spoon.support.reflect.code.CtSwitchImpl.clone()
6689    2   1    0 spoon.support.reflect.code.CtExecutableReferenceExpressionImpl.accept(CtVisitor)
6690    2   1    0 spoon.support.reflect.code.CtExecutableReferenceExpressionImpl.getExecutable()
6691    6   2    0 spoon.support.reflect.code.CtExecutableReferenceExpressionImpl.setExecutable(T)
6692    2   1    0 spoon.support.reflect.code.CtExecutableReferenceExpressionImpl.clone()
6693    2   1    0 spoon.support.reflect.code.CtReturnImpl.accept(CtVisitor)
6694    2   1    0 spoon.support.reflect.code.CtReturnImpl.getReturnedExpression()
6695    6   2    0 spoon.support.reflect.code.CtReturnImpl.setReturnedExpression(R)
6696    2   1    0 spoon.support.reflect.code.CtReturnImpl.clone()
6697    2   1    0 spoon.support.reflect.code.CtReturnImpl.S()
6698    2   1    0 spoon.support.reflect.code.CtReturnImpl.getSubstitution(CtType)
6699    2   1    0 spoon.support.reflect.code.CtFieldWriteImpl.accept(CtVisitor)
6700    2   1    0 spoon.support.reflect.code.CtFieldWriteImpl.clone()
6701    2   1    0 spoon.support.reflect.code.CtVariableReadImpl.accept(CtVisitor)
6702    2   1    0 spoon.support.reflect.code.CtVariableReadImpl.clone()
6703    2   1    0 spoon.support.reflect.CtExtendedModifier.CtExtendedModifier(ModifierKind)
6704    3   1    0 spoon.support.reflect.CtExtendedModifier.CtExtendedModifier(ModifierKind,boolean)
6705    2   1    0 spoon.support.reflect.CtExtendedModifier.isImplicit()
6706    2   1    0 spoon.support.reflect.CtExtendedModifier.setImplicit(boolean)
6707    2   1    0 spoon.support.reflect.CtExtendedModifier.getKind()
6708    2   1    0 spoon.support.reflect.CtExtendedModifier.setKind(ModifierKind)
6709    4   3    0 spoon.support.reflect.CtExtendedModifier.getPosition()
6710    2   1    0 spoon.support.reflect.CtExtendedModifier.setPosition(SourcePosition)
6711    7   7    0 spoon.support.reflect.CtExtendedModifier.equals(Object)
6712    4   3    0 spoon.support.reflect.CtExtendedModifier.hashCode()
6713    8   3    0 spoon.support.reflect.CtExtendedModifier.getOriginalSourceFragment()
6714   12  16    0 spoon.support.reflect.eval.VisitorPartialEvaluator.convert(CtTypeReference,Number)
6715    2   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.exit(CtElement)
6716   11   6    0 spoon.support.reflect.eval.VisitorPartialEvaluator.evaluate(R)
6717    2   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.setResult(CtElement)
6718  107  40    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtBinaryOperator(T)
6719   12   5    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtBlock(R)
6720    5   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtDo(CtDo)
6721    2   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtFieldRead(T)
6722    2   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtFieldWrite(T)
6723   25  12    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitFieldAccess(T)
6724    3   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtAnnotationFieldAccess(T)
6725   13   5    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtFor(CtFor)
6726   28   9    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtIf(CtIf)
6727   38  19    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtInvocation(T)
6728   10   9    0 spoon.support.reflect.eval.VisitorPartialEvaluator.isLiteralType(Object)
6729    4   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtField(T)
6730    4   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtLocalVariable(T)
6731    4   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtCatchVariable(T)
6732    5   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtReturn(R)
6733    4   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtSynchronized(CtSynchronized)
6734    5   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtThrow(CtThrow)
6735    3   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtCatch(CtCatch)
6736   14   5    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtUnaryOperator(T)
6737    2   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtVariableRead(T)
6738    2   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtVariableWrite(T)
6739    6   4    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitVariableAccess(T)
6740    4   1    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtAssignment(A)
6741    8   4    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtWhile(CtWhile)
6742   14   3    0 spoon.support.reflect.eval.VisitorPartialEvaluator.visitCtConditional(T)
6743    2   1    0 spoon.support.reflect.eval.InlinePartialEvaluator.InlinePartialEvaluator(PartialEvaluator)
6744    4   2    0 spoon.support.reflect.eval.InlinePartialEvaluator.exit(CtElement)
6745    1   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.CtArrayTypeReferenceImpl()
6746    2   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.accept(CtVisitor)
6747    5   2    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getComponentType()
6748    2   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getArrayType()
6749    2   2    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getLastComponentTypeReference(CtTypeReference)
6750    6   2    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.setComponentType(CtTypeReference)
6751    2   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getSimpleName()
6752    2   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.setSimpleName(String)
6753    2   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getQualifiedName()
6754    5   3    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getActualClass()
6755    4   3    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getDimensionCount()
6756    8   3    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.getTypeErasure()
6757    2   1    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.clone()
6758    4   3    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.isImplicitParent()
6759    4   2    0 spoon.support.reflect.reference.CtArrayTypeReferenceImpl.setImplicitParent(boolean)
6760    1   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.CtTypeParameterReferenceImpl()
6761    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.isDefaultBoundingType()
6762    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.accept(CtVisitor)
6763    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.isPrimitive()
6764    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getActualClass()
6765    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getActualTypeArguments()
6766    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.setActualTypeArguments(CtTypeReference)
6767    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.addActualTypeArgument(CtTypeReference)
6768    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.removeActualTypeArgument(CtTypeReference)
6769    7   4    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getBoundingType()
6770    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getActualAnnotatedElement()
6771   34  17    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getDeclaration()
6772    5   4    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.findTypeParamDeclaration(CtFormalTypeDeclarer,String)
6773    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getTypeDeclaration()
6774    5   3    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.getTypeErasure()
6775    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.isSubtypeOf(CtTypeReference)
6776    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.clone()
6777    4   4    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.isGenerics()
6778    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.isWildcard()
6779    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.isImplicitParent()
6780    2   1    0 spoon.support.reflect.reference.CtTypeParameterReferenceImpl.setImplicitParent(boolean)
6781    1   1    1 spoon.support.reflect.reference.CtLocalVariableReferenceImpl.CtLocalVariableReferenceImpl()
6782    2   1    0 spoon.support.reflect.reference.CtLocalVariableReferenceImpl.accept(CtVisitor)
6783   16  11    0 spoon.support.reflect.reference.CtLocalVariableReferenceImpl.getDeclaration()
6784    2   1    0 spoon.support.reflect.reference.CtLocalVariableReferenceImpl.clone()
6785    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.getTypeReference()
6786    6   2    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.setTypeReference(CtTypeReference)
6787    2   2    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.getSimpleName()
6788    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.setSimpleName(String)
6789    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.accept(CtVisitor)
6790    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.clone()
6791    2   2    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.getDeclaration()
6792    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.getAnnotations()
6793    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.addAnnotation(Annotation)
6794    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.removeAnnotation(Annotation)
6795    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.setAnnotations(Annotation)
6796    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.isImplicit()
6797    2   1    0 spoon.support.reflect.reference.CtTypeMemberWildcardImportReferenceImpl.setImplicit(boolean)
6798    1   1    0 spoon.support.reflect.reference.CtVariableReferenceImpl.CtVariableReferenceImpl()
6799    1   1    0 spoon.support.reflect.reference.CtVariableReferenceImpl.accept(CtVisitor)
6800    2   1    0 spoon.support.reflect.reference.CtVariableReferenceImpl.getType()
6801    6   2    0 spoon.support.reflect.reference.CtVariableReferenceImpl.setType(T)
6802    2   1    0 spoon.support.reflect.reference.CtVariableReferenceImpl.getActualAnnotatedElement()
6803    2   1    0 spoon.support.reflect.reference.CtVariableReferenceImpl.getDeclaration()
6804    5   3    0 spoon.support.reflect.reference.CtVariableReferenceImpl.getModifiers()
6805    2   1    0 spoon.support.reflect.reference.CtVariableReferenceImpl.clone()
6806    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.accept(CtVisitor)
6807    3   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.CtWildcardReferenceImpl()
6808    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.isUpper()
6809    4   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.setUpper(boolean)
6810   10   3    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.setBoundingType(CtTypeReference)
6811    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.getBoundingType()
6812    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.setSimpleName(String)
6813    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.clone()
6814    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.getTypeDeclaration()
6815    4   3    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.getActualClass()
6816    2   1    0 spoon.support.reflect.reference.CtWildcardReferenceImpl.isWildcard()
6817    1   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.CtExecutableReferenceImpl()
6818    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.accept(CtVisitor)
6819    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getActualTypeArguments()
6820    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.isConstructor()
6821    5   4    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getDeclaration()
6822    9   6    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getExecutableDeclaration()
6823   18  13    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getCtExecutable(CtType)
6824    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getDeclaringType()
6825    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getType()
6826    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getParameters()
6827   11   6    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.setParameters(CtTypeReference)
6828    7   3    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.addParameter(CtTypeReference)
6829    5   5    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.checkMethodParameterTypeRef(CtTypeReference)
6830   13  11    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getOverridingExecutable(CtTypeReference)
6831   12  12    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.isOverriding(CtExecutableReference)
6832   11   6    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.setActualTypeArguments(CtTypeReference)
6833    6   2    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.setDeclaringType(CtTypeReference)
6834    6   2    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.setType(T)
6835    5   3    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getActualAnnotatedElement()
6836   20  11    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getActualMethod()
6837   14   8    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getActualConstructor()
6838    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.isStatic()
6839    4   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.setStatic(boolean)
6840   11   8    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.isFinal()
6841   16  11    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getModifiers()
6842    9   5    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getOverridingExecutable()
6843   12  10    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getOverloadedExecutable(CtTypeReference,Object)
6844    9   4    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.addActualTypeArgument(CtTypeReference)
6845    5   3    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.removeActualTypeArgument(CtTypeReference)
6846    4   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.getSignature()
6847    2   1    0 spoon.support.reflect.reference.CtExecutableReferenceImpl.clone()
6848    1   1    0 spoon.support.reflect.reference.CtCatchVariableReferenceImpl.CtCatchVariableReferenceImpl()
6849    2   1    0 spoon.support.reflect.reference.CtCatchVariableReferenceImpl.accept(CtVisitor)
6850   13   6    0 spoon.support.reflect.reference.CtCatchVariableReferenceImpl.getDeclaration()
6851    2   1    0 spoon.support.reflect.reference.CtCatchVariableReferenceImpl.clone()
6852    1   1    0 spoon.support.reflect.reference.CtParameterReferenceImpl.CtParameterReferenceImpl()
6853    2   1    0 spoon.support.reflect.reference.CtParameterReferenceImpl.accept(CtVisitor)
6854    5   3    0 spoon.support.reflect.reference.CtParameterReferenceImpl.getDeclaringExecutable()
6855    5   3    0 spoon.support.reflect.reference.CtParameterReferenceImpl.getDeclaration()
6856   15   8    0 spoon.support.reflect.reference.CtParameterReferenceImpl.lookupDynamically()
6857    2   1    0 spoon.support.reflect.reference.CtParameterReferenceImpl.clone()
6858    1   1    0 spoon.support.reflect.reference.CtModuleReferenceImpl.CtModuleReferenceImpl()
6859    2   1    0 spoon.support.reflect.reference.CtModuleReferenceImpl.getDeclaration()
6860    2   1    0 spoon.support.reflect.reference.CtModuleReferenceImpl.getActualAnnotatedElement()
6861    2   1    0 spoon.support.reflect.reference.CtModuleReferenceImpl.accept(CtVisitor)
6862    2   1    0 spoon.support.reflect.reference.CtModuleReferenceImpl.clone()
6863    2   1    0 spoon.support.reflect.reference.CtUnboundVariableReferenceImpl.accept(CtVisitor)
6864    2   1    0 spoon.support.reflect.reference.CtUnboundVariableReferenceImpl.clone()
6865    2   1    0 spoon.support.reflect.reference.CtUnboundVariableReferenceImpl.getAnnotations()
6866    2   1    0 spoon.support.reflect.reference.CtUnboundVariableReferenceImpl.setAnnotations(Annotation)
6867    1   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.CtFieldReferenceImpl()
6868    2   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.accept(CtVisitor)
6869   17  12    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField()
6870    2   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getActualAnnotatedElement()
6871    2   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getDeclaration()
6872    7   5    0 spoon.support.reflect.reference.CtFieldReferenceImpl.fromDeclaringType()
6873   10   8    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getFieldDeclaration()
6874    2   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getDeclaringType()
6875    6   3    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getQualifiedName()
6876    2   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.isFinal()
6877    2   1    1 spoon.support.reflect.reference.CtFieldReferenceImpl.isStatic()
6878    6   2    0 spoon.support.reflect.reference.CtFieldReferenceImpl.setDeclaringType(CtTypeReference)
6879    4   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.setFinal(boolean)
6880    4   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.setStatic(boolean)
6881   10   9    0 spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers()
6882    2   1    0 spoon.support.reflect.reference.CtFieldReferenceImpl.clone()
6883    2   1    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.accept(CtVisitor)
6884    2   1    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.getBounds()
6885   11   6    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.setBounds(CtTypeReference)
6886   10   5    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.addBound(CtTypeReference)
6887    5   3    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.removeBound(CtTypeReference)
6888    4   4    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.getTypeErasure()
6889    2   1    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.clone()
6890    4   4    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.isImplicitParent()
6891    4   3    0 spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl.setImplicitParent(boolean)
6892    1   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.CtPackageReferenceImpl()
6893    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.getDeclaration()
6894    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.accept(CtVisitor)
6895    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.getActualPackage()
6896    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.getActualAnnotatedElement()
6897    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.clone()
6898    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.getQualifiedName()
6899    2   1    0 spoon.support.reflect.reference.CtPackageReferenceImpl.isUnnamedPackage()
6900    1   1    0 spoon.support.reflect.reference.CtReferenceImpl.CtReferenceImpl()
6901    1   1    0 spoon.support.reflect.reference.CtReferenceImpl.getActualAnnotatedElement()
6902    2   1    0 spoon.support.reflect.reference.CtReferenceImpl.getSimpleName()
6903   10   4    0 spoon.support.reflect.reference.CtReferenceImpl.setSimpleName(String)
6904    2   1    0 spoon.support.reflect.reference.CtReferenceImpl.setComments(CtComment)
6905    1   1    0 spoon.support.reflect.reference.CtReferenceImpl.accept(CtVisitor)
6906    2   1    0 spoon.support.reflect.reference.CtReferenceImpl.clone()
6907    7   5    0 spoon.support.reflect.reference.CtReferenceImpl.equals(Object)
6908    2   1    0 spoon.support.reflect.declaration.CtEnumValueImpl.accept(CtVisitor)
6909    2   1    0 spoon.support.reflect.declaration.CtEnumValueImpl.clone()
6910    2   1    0 spoon.support.reflect.declaration.CtEnumValueImpl.getAssignment()
6911    2   1    0 spoon.support.reflect.declaration.CtClassImpl.accept(CtVisitor)
6912    6   3    0 spoon.support.reflect.declaration.CtClassImpl.getAnonymousExecutables()
6913    8   5    0 spoon.support.reflect.declaration.CtClassImpl.getConstructor(CtTypeReference)
6914    6   3    0 spoon.support.reflect.declaration.CtClassImpl.getConstructors()
6915    6   3    0 spoon.support.reflect.declaration.CtClassImpl.addAnonymousExecutable(CtAnonymousExecutable)
6916    3   1    0 spoon.support.reflect.declaration.CtClassImpl.removeAnonymousExecutable(CtAnonymousExecutable)
6917    2   1    0 spoon.support.reflect.declaration.CtClassImpl.getSuperclass()
6918    9   5    0 spoon.support.reflect.declaration.CtClassImpl.setAnonymousExecutables(CtAnonymousExecutable)
6919   10   5    0 spoon.support.reflect.declaration.CtClassImpl.setConstructors(T)
6920    3   1    0 spoon.support.reflect.declaration.CtClassImpl.addConstructor(T)
6921    2   1    0 spoon.support.reflect.declaration.CtClassImpl.removeConstructor(T)
6922    6   2    0 spoon.support.reflect.declaration.CtClassImpl.setSuperclass(CtTypeReference)
6923    2   1    0 spoon.support.reflect.declaration.CtClassImpl.isClass()
6924    5   3    0 spoon.support.reflect.declaration.CtClassImpl.isAnonymous()
6925    2   1    0 spoon.support.reflect.declaration.CtClassImpl.isSubtypeOf(CtTypeReference)
6926    3   1    0 spoon.support.reflect.declaration.CtClassImpl.insertAfter(CtStatement)
6927    3   1    0 spoon.support.reflect.declaration.CtClassImpl.insertAfter(CtStatementList)
6928    3   1    0 spoon.support.reflect.declaration.CtClassImpl.insertBefore(CtStatement)
6929    3   1    0 spoon.support.reflect.declaration.CtClassImpl.insertBefore(CtStatementList)
6930    2   1    0 spoon.support.reflect.declaration.CtClassImpl.getLabel()
6931    2   1    0 spoon.support.reflect.declaration.CtClassImpl.setLabel(String)
6932    3   1    0 spoon.support.reflect.declaration.CtClassImpl.partiallyEvaluate()
6933    7   2    0 spoon.support.reflect.declaration.CtClassImpl.getDeclaredExecutables()
6934    2   1    0 spoon.support.reflect.declaration.CtClassImpl.clone()
6935    7   4    0 spoon.support.reflect.declaration.CtClassImpl.newInstance()
6936    2   1    0 spoon.support.reflect.declaration.CtClassImpl.NewInstanceClassloader.NewInstanceClassloader(File)
6937    4   3    0 spoon.support.reflect.declaration.CtClassImpl.NewInstanceClassloader.loadClass(String)
6938    7   3    1 spoon.support.reflect.declaration.CtClassImpl.getAllExecutables()
6939    2   1    0 spoon.support.reflect.declaration.CtUsedServiceImpl.getServiceType()
6940    6   2    0 spoon.support.reflect.declaration.CtUsedServiceImpl.setServiceType(CtTypeReference)
6941    2   1    0 spoon.support.reflect.declaration.CtUsedServiceImpl.accept(CtVisitor)
6942    2   1    0 spoon.support.reflect.declaration.CtUsedServiceImpl.clone()
6943    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.accept(CtVisitor)
6944    7   1    0 spoon.support.reflect.declaration.CtEnumImpl.getAllMethods()
6945    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.isSubtypeOf(CtTypeReference)
6946   10   5    0 spoon.support.reflect.declaration.CtEnumImpl.addEnumValue(CtEnumValue)
6947    5   3    0 spoon.support.reflect.declaration.CtEnumImpl.removeEnumValue(CtEnumValue)
6948    5   4    0 spoon.support.reflect.declaration.CtEnumImpl.getEnumValue(String)
6949    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.getEnumValues()
6950   12   6    0 spoon.support.reflect.declaration.CtEnumImpl.setEnumValues(CtEnumValue)
6951    5   1    0 spoon.support.reflect.declaration.CtEnumImpl.getFields()
6952    5   3    0 spoon.support.reflect.declaration.CtEnumImpl.getField(String)
6953    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.clone()
6954    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.getSuperclass()
6955    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.setSuperclass(CtTypeReference)
6956   10   2    0 spoon.support.reflect.declaration.CtEnumImpl.valuesMethod()
6957   12   2    0 spoon.support.reflect.declaration.CtEnumImpl.valueOfMethod()
6958    8   8    0 spoon.support.reflect.declaration.CtEnumImpl.getMethod(String,CtTypeReference)
6959    8  10    0 spoon.support.reflect.declaration.CtEnumImpl.getMethod(R,String,CtTypeReference)
6960    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.isClass()
6961    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.isEnum()
6962    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.getFormalCtTypeParameters()
6963    2   1    0 spoon.support.reflect.declaration.CtEnumImpl.setFormalCtTypeParameters(CtTypeParameter)
6964    1   1    0 spoon.support.reflect.declaration.CtParameterImpl.CtParameterImpl()
6965    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.accept(CtVisitor)
6966    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.getDefaultExpression()
6967    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.getReference()
6968    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.getType()
6969    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.setDefaultExpression(T)
6970    6   2    0 spoon.support.reflect.declaration.CtParameterImpl.setType(T)
6971    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isVarArgs()
6972    4   1    0 spoon.support.reflect.declaration.CtParameterImpl.setVarArgs(boolean)
6973    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.getModifiers()
6974    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.hasModifier(ModifierKind)
6975    3   1    0 spoon.support.reflect.declaration.CtParameterImpl.setModifiers(ModifierKind)
6976    3   1    0 spoon.support.reflect.declaration.CtParameterImpl.addModifier(ModifierKind)
6977    3   1    0 spoon.support.reflect.declaration.CtParameterImpl.removeModifier(ModifierKind)
6978    3   1    0 spoon.support.reflect.declaration.CtParameterImpl.setVisibility(ModifierKind)
6979    3   1    0 spoon.support.reflect.declaration.CtParameterImpl.getVisibility()
6980    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.getParent()
6981    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.getExtendedModifiers()
6982    3   1    0 spoon.support.reflect.declaration.CtParameterImpl.setExtendedModifiers(CtExtendedModifier)
6983    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isShadow()
6984    4   1    0 spoon.support.reflect.declaration.CtParameterImpl.setShadow(boolean)
6985    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.clone()
6986    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isPublic()
6987    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isPrivate()
6988    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isProtected()
6989    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isFinal()
6990    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isStatic()
6991    2   1    0 spoon.support.reflect.declaration.CtParameterImpl.isAbstract()
6992    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.accept(CtVisitor)
6993    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.getDefaultExpression()
6994    6   2    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.setDefaultExpression(T)
6995    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.getBody()
6996    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.setBody(CtStatement)
6997    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.getThrownTypes()
6998    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.setThrownTypes(Throwable)
6999    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.getFormalCtTypeParameters()
7000    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.setFormalCtTypeParameters(CtTypeParameter)
7001    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.getParameters()
7002    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.setParameters(CtParameter)
7003    2   1    0 spoon.support.reflect.declaration.CtAnnotationMethodImpl.clone()
7004    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.TreeMap$1.Comparator$1.compare(CtExpression,CtExpression)
7005    7   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.TreeMap$1.entrySet()
7006    1   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.CtAnnotationImpl()
7007    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.accept(CtVisitor)
7008    4   3    0 spoon.support.reflect.declaration.CtAnnotationImpl.addValue(String,Object)
7009   44  11    0 spoon.support.reflect.declaration.CtAnnotationImpl.convertValueToExpression(Object)
7010    2   9    0 spoon.support.reflect.declaration.CtAnnotationImpl.isPrimitive(Class)
7011   22   5    0 spoon.support.reflect.declaration.CtAnnotationImpl.addValueExpression(String,CtExpression)
7012    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.addValue(String,CtLiteral)
7013    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.addValue(String,CtExpression)
7014    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.addValue(String,CtFieldAccess)
7015    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.addValue(String,CtAnnotation)
7016   39  25    1 spoon.support.reflect.declaration.CtAnnotationImpl.convertElementToRuntimeObject(CtElement)
7017   10   6    0 spoon.support.reflect.declaration.CtAnnotationImpl.getElementType(String)
7018    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getAnnotationType()
7019    7   2    0 spoon.support.reflect.declaration.CtAnnotationImpl.getDefaultExpression(String)
7020    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getValue(String)
7021    5   3    0 spoon.support.reflect.declaration.CtAnnotationImpl.getValueAsInt(String)
7022    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getValueAsString(String)
7023    5   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getValueAsObject(String)
7024   26  26    0 spoon.support.reflect.declaration.CtAnnotationImpl.forceObjectToType(Object,Class)
7025    8   2    1 spoon.support.reflect.declaration.CtAnnotationImpl.toArray(CtNewArray)
7026   11   7    0 spoon.support.reflect.declaration.CtAnnotationImpl.getValueAsExpression(String)
7027   16   6    0 spoon.support.reflect.declaration.CtAnnotationImpl.getWrappedValue(String)
7028    5   2    0 spoon.support.reflect.declaration.CtAnnotationImpl.getElementValues()
7029    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getValues()
7030    7   2    0 spoon.support.reflect.declaration.CtAnnotationImpl.getAllValues()
7031    6   4    0 spoon.support.reflect.declaration.CtAnnotationImpl.getReflectValue(String)
7032    6   2    0 spoon.support.reflect.declaration.CtAnnotationImpl.setAnnotationType(Annotation)
7033    6   2    0 spoon.support.reflect.declaration.CtAnnotationImpl.setElementValues(Object)
7034    6   2    0 spoon.support.reflect.declaration.CtAnnotationImpl.setValues(CtExpression)
7035    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getAnnotatedElement()
7036    3   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getAnnotatedElementType()
7037    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.AnnotationInvocationHandler.AnnotationInvocationHandler(Annotation)
7038    8   5    0 spoon.support.reflect.declaration.CtAnnotationImpl.AnnotationInvocationHandler.invoke(Object,Method,Object[])
7039   14   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getActualAnnotation()
7040    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.isShadow()
7041    4   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.setShadow(boolean)
7042    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.clone()
7043    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.getTypeCasts()
7044    2   1    0 spoon.support.reflect.declaration.CtAnnotationImpl.setTypeCasts(CtTypeReference)
7045    2   1    0 spoon.support.reflect.declaration.InvisibleArrayConstructorImpl.getType()
7046    5   3    0 spoon.support.reflect.declaration.InvisibleArrayConstructorImpl.setType(T)
7047    2   1    0 spoon.support.reflect.declaration.InvisibleArrayConstructorImpl.toString()
7048    2   1    0 spoon.support.reflect.declaration.InvisibleArrayConstructorImpl.getDeclaringType()
7049    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.accept(CtVisitor)
7050    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.isAnnotationType()
7051    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.getSuperInterfaces()
7052    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.getSuperclass()
7053    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.setSuperclass(CtTypeReference)
7054    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.setSuperInterfaces(CtTypeReference)
7055    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.getFormalCtTypeParameters()
7056    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.setFormalCtTypeParameters(CtTypeParameter)
7057    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.isSubtypeOf(CtTypeReference)
7058    2   1    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.clone()
7059    5   2    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.getAnnotationMethods()
7060    4   4    0 spoon.support.reflect.declaration.CtAnnotationTypeImpl.addMethod(M)
7061    1   1    0 spoon.support.reflect.declaration.CtFieldImpl.CtFieldImpl()
7062    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.accept(CtVisitor)
7063    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getDeclaringType()
7064    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getTopLevelType()
7065    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getDefaultExpression()
7066    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getReference()
7067    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getType()
7068    6   2    0 spoon.support.reflect.declaration.CtFieldImpl.setDefaultExpression(T)
7069    6   2    0 spoon.support.reflect.declaration.CtFieldImpl.setType(T)
7070    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getModifiers()
7071    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.hasModifier(ModifierKind)
7072    3   1    0 spoon.support.reflect.declaration.CtFieldImpl.setModifiers(ModifierKind)
7073    3   1    0 spoon.support.reflect.declaration.CtFieldImpl.addModifier(ModifierKind)
7074    3   1    0 spoon.support.reflect.declaration.CtFieldImpl.removeModifier(ModifierKind)
7075    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getExtendedModifiers()
7076    3   1    0 spoon.support.reflect.declaration.CtFieldImpl.setExtendedModifiers(CtExtendedModifier)
7077    3   1    0 spoon.support.reflect.declaration.CtFieldImpl.setVisibility(ModifierKind)
7078    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getVisibility()
7079    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.getAssignment()
7080    3   1    0 spoon.support.reflect.declaration.CtFieldImpl.setAssignment(T)
7081    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isShadow()
7082    4   1    0 spoon.support.reflect.declaration.CtFieldImpl.setShadow(boolean)
7083    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.clone()
7084    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isPublic()
7085    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isPrivate()
7086    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isProtected()
7087    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isFinal()
7088    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isStatic()
7089    2   1    0 spoon.support.reflect.declaration.CtFieldImpl.isAbstract()
7090    1   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.CtPackageExportImpl()
7091    4   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.setOpenedPackage(boolean)
7092    2   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.isOpenedPackage()
7093    2   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.getPackageReference()
7094    6   2    0 spoon.support.reflect.declaration.CtPackageExportImpl.setPackageReference(CtPackageReference)
7095    2   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.getTargetExport()
7096   11   6    0 spoon.support.reflect.declaration.CtPackageExportImpl.setTargetExport(CtModuleReference)
7097    9   4    0 spoon.support.reflect.declaration.CtPackageExportImpl.addTargetExport(CtModuleReference)
7098    2   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.accept(CtVisitor)
7099    2   1    0 spoon.support.reflect.declaration.CtPackageExportImpl.clone()
7100    1   1    0 spoon.support.reflect.declaration.CtModuleImpl.CtModuleImpl()
7101    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.isUnnamedModule()
7102    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.isOpenModule()
7103   11   6    0 spoon.support.reflect.declaration.CtModuleImpl.setModuleDirectives(CtModuleDirective)
7104   11   5    0 spoon.support.reflect.declaration.CtModuleImpl.addModuleDirective(CtModuleDirective)
7105   11   5    0 spoon.support.reflect.declaration.CtModuleImpl.addModuleDirectiveAt(int,CtModuleDirective)
7106    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.getModuleDirectives()
7107   10   6    0 spoon.support.reflect.declaration.CtModuleImpl.removeModuleDirective(CtModuleDirective)
7108    4   1    0 spoon.support.reflect.declaration.CtModuleImpl.setIsOpenModule(boolean)
7109    9   5    0 spoon.support.reflect.declaration.CtModuleImpl.getUsedServices()
7110    9   5    0 spoon.support.reflect.declaration.CtModuleImpl.setUsedServices(CtUsedService)
7111    5   3    0 spoon.support.reflect.declaration.CtModuleImpl.addUsedService(CtUsedService)
7112    4   3    0 spoon.support.reflect.declaration.CtModuleImpl.removeUsedService(CtUsedService)
7113   11   6    0 spoon.support.reflect.declaration.CtModuleImpl.getExportedPackages()
7114   10   5    0 spoon.support.reflect.declaration.CtModuleImpl.setExportedPackages(CtPackageExport)
7115    6   3    0 spoon.support.reflect.declaration.CtModuleImpl.addExportedPackage(CtPackageExport)
7116    4   3    0 spoon.support.reflect.declaration.CtModuleImpl.removeExportedPackage(CtPackageExport)
7117   11   6    0 spoon.support.reflect.declaration.CtModuleImpl.getOpenedPackages()
7118   10   5    0 spoon.support.reflect.declaration.CtModuleImpl.setOpenedPackages(CtPackageExport)
7119    6   3    0 spoon.support.reflect.declaration.CtModuleImpl.addOpenedPackage(CtPackageExport)
7120    4   3    0 spoon.support.reflect.declaration.CtModuleImpl.removeOpenedPackage(CtPackageExport)
7121    9   5    0 spoon.support.reflect.declaration.CtModuleImpl.getRequiredModules()
7122    9   5    0 spoon.support.reflect.declaration.CtModuleImpl.setRequiredModules(CtModuleRequirement)
7123    5   3    0 spoon.support.reflect.declaration.CtModuleImpl.addRequiredModule(CtModuleRequirement)
7124    4   3    0 spoon.support.reflect.declaration.CtModuleImpl.removeRequiredModule(CtModuleRequirement)
7125    9   5    0 spoon.support.reflect.declaration.CtModuleImpl.getProvidedServices()
7126    9   5    0 spoon.support.reflect.declaration.CtModuleImpl.setProvidedServices(CtProvidedService)
7127    5   3    0 spoon.support.reflect.declaration.CtModuleImpl.addProvidedService(CtProvidedService)
7128    4   3    0 spoon.support.reflect.declaration.CtModuleImpl.removeProvidedService(CtProvidedService)
7129    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.getRootPackage()
7130    6   2    0 spoon.support.reflect.declaration.CtModuleImpl.setRootPackage(CtPackage)
7131    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.accept(CtVisitor)
7132    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.getReference()
7133    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.clone()
7134    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.setParent(T)
7135    2   1    0 spoon.support.reflect.declaration.CtModuleImpl.getParent()
7136    1   1    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.CtProvidedServiceImpl()
7137    2   1    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.getServiceType()
7138    6   2    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.setServiceType(CtTypeReference)
7139    2   1    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.getImplementationTypes()
7140   11   6    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.setImplementationTypes(CtTypeReference)
7141    9   4    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.addImplementationType(CtTypeReference)
7142    2   1    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.accept(CtVisitor)
7143    2   1    0 spoon.support.reflect.declaration.CtProvidedServiceImpl.clone()
7144    2   1    0 spoon.support.reflect.declaration.CtInterfaceImpl.accept(CtVisitor)
7145    2   1    0 spoon.support.reflect.declaration.CtInterfaceImpl.isSubtypeOf(CtTypeReference)
7146    2   1    0 spoon.support.reflect.declaration.CtInterfaceImpl.isInterface()
7147    8   4    0 spoon.support.reflect.declaration.CtInterfaceImpl.getDeclaredExecutables()
7148    2   1    0 spoon.support.reflect.declaration.CtInterfaceImpl.clone()
7149    2   1    0 spoon.support.reflect.declaration.CtInterfaceImpl.setSuperclass(CtTypeReference)
7150    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtVisitor)
7151    3   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.addModifier(ModifierKind)
7152    3   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.removeModifier(ModifierKind)
7153    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getModifiers()
7154    8   7    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getVisibility()
7155    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.hasModifier(ModifierKind)
7156    3   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setModifiers(ModifierKind)
7157    3   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setVisibility(ModifierKind)
7158    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getExtendedModifiers()
7159    3   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setExtendedModifiers(CtExtendedModifier)
7160    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getParameters()
7161    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setParameters(List)
7162    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.addParameter(CtParameter)
7163    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.removeParameter(CtParameter)
7164    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getThrownTypes()
7165    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setThrownTypes(Set)
7166    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.addThrownType(CtTypeReference)
7167    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.removeThrownType(CtTypeReference)
7168    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getSimpleName()
7169    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setSimpleName(String)
7170    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.getType()
7171    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.setType(Void)
7172    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.clone()
7173    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.isPublic()
7174    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.isPrivate()
7175    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.isProtected()
7176    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.isFinal()
7177    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.isStatic()
7178    2   1    0 spoon.support.reflect.declaration.CtAnonymousExecutableImpl.isAbstract()
7179    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.accept(CtVisitor)
7180    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.setSimpleName(String)
7181    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.getSimpleName()
7182    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.getDeclaringType()
7183    4   3    0 spoon.support.reflect.declaration.CtConstructorImpl.getType()
7184    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.setType(T)
7185    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.getFormalCtTypeParameters()
7186   11   6    0 spoon.support.reflect.declaration.CtConstructorImpl.setFormalCtTypeParameters(CtTypeParameter)
7187    9   4    0 spoon.support.reflect.declaration.CtConstructorImpl.addFormalCtTypeParameter(CtTypeParameter)
7188    5   3    0 spoon.support.reflect.declaration.CtConstructorImpl.removeFormalCtTypeParameter(CtTypeParameter)
7189    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.getModifiers()
7190    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.hasModifier(ModifierKind)
7191    3   1    0 spoon.support.reflect.declaration.CtConstructorImpl.setModifiers(ModifierKind)
7192    3   1    0 spoon.support.reflect.declaration.CtConstructorImpl.addModifier(ModifierKind)
7193    3   1    0 spoon.support.reflect.declaration.CtConstructorImpl.removeModifier(ModifierKind)
7194    3   1    0 spoon.support.reflect.declaration.CtConstructorImpl.setVisibility(ModifierKind)
7195    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.getVisibility()
7196    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.getExtendedModifiers()
7197    3   1    0 spoon.support.reflect.declaration.CtConstructorImpl.setExtendedModifiers(CtExtendedModifier)
7198    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isShadow()
7199    4   1    0 spoon.support.reflect.declaration.CtConstructorImpl.setShadow(boolean)
7200    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.clone()
7201    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isPublic()
7202    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isPrivate()
7203    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isProtected()
7204    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isFinal()
7205    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isStatic()
7206    2   1    0 spoon.support.reflect.declaration.CtConstructorImpl.isAbstract()
7207    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.ModelSet$1.getOwner()
7208    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.ModelSet$1.getRole()
7209   13   8    0 spoon.support.reflect.declaration.CtPackageImpl.ModelSet$1.add(CtPackage)
7210    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.ModelSet$1.getOwner()
7211    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.ModelSet$1.getRole()
7212    1   1    0 spoon.support.reflect.declaration.CtPackageImpl.CtPackageImpl()
7213    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.accept(CtVisitor)
7214    3   1    0 spoon.support.reflect.declaration.CtPackageImpl.addPackage(CtPackage)
7215    6   6    1 spoon.support.reflect.declaration.CtPackageImpl.addAllTypes(CtPackage,CtPackage)
7216    3   2    1 spoon.support.reflect.declaration.CtPackageImpl.addAllPackages(CtPackage,CtPackage)
7217    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.removePackage(CtPackage)
7218    4   3    0 spoon.support.reflect.declaration.CtPackageImpl.getDeclaringModule()
7219    4   3    0 spoon.support.reflect.declaration.CtPackageImpl.getDeclaringPackage()
7220    5   4    0 spoon.support.reflect.declaration.CtPackageImpl.getPackage(String)
7221    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.getPackages()
7222    5   4    0 spoon.support.reflect.declaration.CtPackageImpl.getQualifiedName()
7223    5   4    0 spoon.support.reflect.declaration.CtPackageImpl.getType(String)
7224    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.getTypes()
7225    3   1    0 spoon.support.reflect.declaration.CtPackageImpl.setPackages(CtPackage)
7226    3   1    0 spoon.support.reflect.declaration.CtPackageImpl.setTypes(CtType)
7227    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.getReference()
7228    3   1    0 spoon.support.reflect.declaration.CtPackageImpl.addType(CtType)
7229    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.removeType(CtType)
7230    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.toString()
7231    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.isShadow()
7232    4   1    0 spoon.support.reflect.declaration.CtPackageImpl.setShadow(boolean)
7233    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.clone()
7234    2   1    0 spoon.support.reflect.declaration.CtPackageImpl.isUnnamedPackage()
7235    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.accept(CtVisitor)
7236    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getSuperclass()
7237    6   2    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setSuperclass(CtTypeReference)
7238    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getQualifiedName()
7239    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getReference()
7240    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isGenerics()
7241    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.clone()
7242    4   3    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getTypeParameterDeclarer()
7243    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addFieldAtTop(F)
7244    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addField(F)
7245    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addField(int,F)
7246    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setFields(CtField)
7247    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.removeField(F)
7248    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getField(String)
7249    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getFields()
7250    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addNestedType(N)
7251    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.removeNestedType(N)
7252    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setNestedTypes(CtType)
7253    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getNestedType(String)
7254    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getNestedTypes()
7255    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getPackage()
7256    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isTopLevel()
7257    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getModifiers()
7258    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.hasModifier(ModifierKind)
7259    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setModifiers(ModifierKind)
7260    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addModifier(ModifierKind)
7261    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.removeModifier(ModifierKind)
7262    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setVisibility(ModifierKind)
7263    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getVisibility()
7264    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isPrimitive()
7265    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isAnonymous()
7266    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isLocalType()
7267    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getAllFields()
7268    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getDeclaredFields()
7269    5   3    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isSubtypeOf(CtTypeReference)
7270   12   8    0 spoon.support.reflect.declaration.CtTypeParameterImpl.isSubtypeOf(GenericTypeAdapter,CtTypeParameter,CtTypeParameter)
7271    4   3    1 spoon.support.reflect.declaration.CtTypeParameterImpl.isSameInSameScope(CtTypeParameter,CtTypeReference)
7272    3   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getTypeErasure()
7273    5   2    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getBound(CtTypeParameter)
7274    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addMethod(M)
7275    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.removeMethod(M)
7276    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.addSuperInterface(S)
7277    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.removeSuperInterface(S)
7278    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getMethod(R,String,CtTypeReference)
7279    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getMethod(String,CtTypeReference)
7280    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getMethods()
7281    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getMethodsAnnotatedWith(CtTypeReference)
7282    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getMethodsByName(String)
7283    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getSuperInterfaces()
7284    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setMethods(CtMethod)
7285    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setSuperInterfaces(CtTypeReference)
7286    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getDeclaredExecutables()
7287    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getAllExecutables()
7288    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getAllMethods()
7289    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getFormalCtTypeParameters()
7290    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setFormalCtTypeParameters(CtTypeParameter)
7291    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.getTypeMembers()
7292    2   1    0 spoon.support.reflect.declaration.CtTypeParameterImpl.setTypeMembers(CtTypeMember)
7293    1   1    0 spoon.support.reflect.declaration.CtExecutableImpl.CtExecutableImpl()
7294    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getDeclaringType()
7295    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getTopLevelType()
7296    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getBody()
7297   11   3    0 spoon.support.reflect.declaration.CtExecutableImpl.setBody(CtStatement)
7298    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getParameters()
7299   11   6    0 spoon.support.reflect.declaration.CtExecutableImpl.setParameters(CtParameter)
7300    9   4    0 spoon.support.reflect.declaration.CtExecutableImpl.addParameter(CtParameter)
7301    5   3    0 spoon.support.reflect.declaration.CtExecutableImpl.removeParameter(CtParameter)
7302    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getThrownTypes()
7303   11   6    0 spoon.support.reflect.declaration.CtExecutableImpl.setThrownTypes(Throwable)
7304    9   4    0 spoon.support.reflect.declaration.CtExecutableImpl.addThrownType(Throwable)
7305    5   3    0 spoon.support.reflect.declaration.CtExecutableImpl.removeThrownType(Throwable)
7306    4   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getSignature()
7307    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.getReference()
7308    2   1    0 spoon.support.reflect.declaration.CtExecutableImpl.clone()
7309    6   2    0 spoon.support.reflect.declaration.CtPackageDeclarationImpl.setReference(CtPackageReference)
7310    2   1    0 spoon.support.reflect.declaration.CtPackageDeclarationImpl.getReference()
7311    2   1    0 spoon.support.reflect.declaration.CtPackageDeclarationImpl.accept(CtVisitor)
7312    2   1    0 spoon.support.reflect.declaration.CtPackageDeclarationImpl.clone()
7313    1   1    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.CtModuleRequirementImpl()
7314    2   1    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.getRequiresModifiers()
7315   12   6    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.setRequiresModifiers(RequiresModifier)
7316    2   1    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.getModuleReference()
7317    6   2    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.setModuleReference(CtModuleReference)
7318    2   1    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.accept(CtVisitor)
7319    2   1    0 spoon.support.reflect.declaration.CtModuleRequirementImpl.clone()
7320    1   1    0 spoon.support.reflect.declaration.CtImportImpl.CtImportImpl()
7321   19  14    0 spoon.support.reflect.declaration.CtImportImpl.getImportKind()
7322    6   2    0 spoon.support.reflect.declaration.CtImportImpl.setReference(CtReference)
7323    2   1    0 spoon.support.reflect.declaration.CtImportImpl.getReference()
7324    2   1    0 spoon.support.reflect.declaration.CtImportImpl.accept(CtVisitor)
7325   19   7    0 spoon.support.reflect.declaration.CtImportImpl.accept(CtImportVisitor)
7326    2   1    0 spoon.support.reflect.declaration.CtImportImpl.clone()
7327    2   1    0 spoon.support.reflect.declaration.CtNamedElementImpl.getReference()
7328    2   1    0 spoon.support.reflect.declaration.CtNamedElementImpl.getSimpleName()
7329   10   4    0 spoon.support.reflect.declaration.CtNamedElementImpl.setSimpleName(String)
7330    2   1    0 spoon.support.reflect.declaration.CtNamedElementImpl.clone()
7331    1   1    0 spoon.support.template.UndefinedParameterException.UndefinedParameterException()
7332    2   1    0 spoon.support.template.UndefinedParameterException.UndefinedParameterException(String)
7333    2   1    0 spoon.support.template.UndefinedParameterException.UndefinedParameterException(Throwable)
7334    1   1    0 spoon.support.template.Parameters.Parameters()
7335    5   3    1 spoon.support.template.Parameters.getIndex(CtExpression)
7336   13   8    1 spoon.support.template.Parameters.getValue(Template,String,Integer)
7337   12  10    0 spoon.support.template.Parameters.getValue(Template,String,Field)
7338   13   8    0 spoon.support.template.Parameters.getParameterField(Template,String)
7339   20  12    1 spoon.support.template.Parameters.setValue(Template,String,Integer,Object)
7340    6   3    0 spoon.support.template.Parameters.getParameterName(Field)
7341    6   3    0 spoon.support.template.Parameters.getParameterName(CtFieldReference)
7342    8   5    1 spoon.support.template.Parameters.getNames(Template)
7343    9   5    1 spoon.support.template.Parameters.getNamesToValues(Template,Template)
7344   19   9    1 spoon.support.template.Parameters.getTemplateParametersAsMap(Factory,CtType,Template)
7345   11   9    1 spoon.support.template.Parameters.isParameterSource(CtFieldReference)
7346    2   2    1 spoon.support.template.Parameters.isParameterSource(Field)
7347    4   2    0 spoon.support.template.Parameters.getTemplateParameterType(Factory)
7348    2   1    0 spoon.support.template.Parameters.TemplateParameter$1.S()
7349    2   1    0 spoon.support.template.Parameters.TemplateParameter$1.S()
7350    8   3    1 spoon.support.template.Parameters.NIL(T)
7351    8   5    1 spoon.support.template.Parameters.getAllTemplateParameterFields(Template)
7352    8   4    1 spoon.support.template.Parameters.getAllTemplateParameterFields(Template,Factory)
7353    1   1    1 spoon.support.StandardEnvironment.StandardEnvironment()
7354    2   1    0 spoon.support.StandardEnvironment.debugMessage(String)
7355    2   1    0 spoon.support.StandardEnvironment.isAutoImports()
7356    2   1    0 spoon.support.StandardEnvironment.setAutoImports(boolean)
7357    2   1    0 spoon.support.StandardEnvironment.getDefaultFileGenerator()
7358    2   1    0 spoon.support.StandardEnvironment.getLevel()
7359    3   1    0 spoon.support.StandardEnvironment.setLevel(String)
7360    2   1    0 spoon.support.StandardEnvironment.shouldCompile()
7361    2   1    0 spoon.support.StandardEnvironment.setShouldCompile(boolean)
7362    2   1    0 spoon.support.StandardEnvironment.checksAreSkipped()
7363    2   1    0 spoon.support.StandardEnvironment.disableConsistencyChecks()
7364    4   4    0 spoon.support.StandardEnvironment.toLevel(String)
7365    2   1    0 spoon.support.StandardEnvironment.getManager()
7366    4   3    0 spoon.support.StandardEnvironment.getProcessorProperties(String)
7367    2   1    1 spoon.support.StandardEnvironment.isProcessingStopped()
7368    8   3    0 spoon.support.StandardEnvironment.prefix(StringBuilder,Level)
7369   17   6    0 spoon.support.StandardEnvironment.report(Processor,Level,CtElement,String)
7370    2   1    0 spoon.support.StandardEnvironment.report(Processor,Level,CtElement,String,ProblemFixer)
7371    5   1    0 spoon.support.StandardEnvironment.report(Processor,Level,String)
7372   12   5    0 spoon.support.StandardEnvironment.print(String,Level)
7373   16   7    1 spoon.support.StandardEnvironment.reportEnd()
7374    2   1    0 spoon.support.StandardEnvironment.reportProgressMessage(String)
7375    1   1    0 spoon.support.StandardEnvironment.setDebug(boolean)
7376    2   1    0 spoon.support.StandardEnvironment.setDefaultFileGenerator(CtElement)
7377    2   1    0 spoon.support.StandardEnvironment.setManager(ProcessingManager)
7378    2   1    0 spoon.support.StandardEnvironment.setProcessingStopped(boolean)
7379    1   1    0 spoon.support.StandardEnvironment.setVerbose(boolean)
7380    2   1    0 spoon.support.StandardEnvironment.getComplianceLevel()
7381    2   1    0 spoon.support.StandardEnvironment.setComplianceLevel(int)
7382    2   1    0 spoon.support.StandardEnvironment.setProcessorProperties(String,ProcessorProperties)
7383    2   1    0 spoon.support.StandardEnvironment.isUsingTabulations()
7384    2   1    0 spoon.support.StandardEnvironment.useTabulations(boolean)
7385    2   1    0 spoon.support.StandardEnvironment.getTabulationSize()
7386    2   1    0 spoon.support.StandardEnvironment.setTabulationSize(int)
7387   17  10    0 spoon.support.StandardEnvironment.setInputClassLoader(ClassLoader)
7388    6   4    0 spoon.support.StandardEnvironment.getInputClassLoader()
7389    9   5    1 spoon.support.StandardEnvironment.urlClasspath()
7390    2   1    0 spoon.support.StandardEnvironment.getSourceClasspath()
7391    4   1    0 spoon.support.StandardEnvironment.setSourceClasspath(String[])
7392   14   8    0 spoon.support.StandardEnvironment.verifySourceClasspath(String[])
7393    2   1    0 spoon.support.StandardEnvironment.getErrorCount()
7394    2   1    0 spoon.support.StandardEnvironment.getWarningCount()
7395    2   1    0 spoon.support.StandardEnvironment.isPreserveLineNumbers()
7396    2   1    0 spoon.support.StandardEnvironment.setPreserveLineNumbers(boolean)
7397    2   1    0 spoon.support.StandardEnvironment.setNoClasspath(boolean)
7398    5   2    0 spoon.support.StandardEnvironment.getNoClasspath()
7399    2   1    0 spoon.support.StandardEnvironment.isCopyResources()
7400    2   1    0 spoon.support.StandardEnvironment.setCopyResources(boolean)
7401    2   1    0 spoon.support.StandardEnvironment.isCommentsEnabled()
7402    2   1    0 spoon.support.StandardEnvironment.setCommentEnabled(boolean)
7403    2   1    0 spoon.support.StandardEnvironment.setBinaryOutputDirectory(String)
7404    2   1    0 spoon.support.StandardEnvironment.getBinaryOutputDirectory()
7405    9   7    0 spoon.support.StandardEnvironment.setSourceOutputDirectory(File)
7406    2   1    0 spoon.support.StandardEnvironment.getSourceOutputDirectory()
7407    2   1    0 spoon.support.StandardEnvironment.setOutputDestinationHandler(OutputDestinationHandler)
7408    2   1    0 spoon.support.StandardEnvironment.getOutputDestinationHandler()
7409    2   1    0 spoon.support.StandardEnvironment.getModelChangeListener()
7410    2   1    0 spoon.support.StandardEnvironment.setModelChangeListener(FineModelChangeListener)
7411    2   1    0 spoon.support.StandardEnvironment.getEncoding()
7412    2   1    0 spoon.support.StandardEnvironment.getEncodingProvider()
7413    2   1    0 spoon.support.StandardEnvironment.setEncoding(Charset)
7414    2   1    0 spoon.support.StandardEnvironment.setEncodingProvider(EncodingProvider)
7415    2   1    0 spoon.support.StandardEnvironment.setOutputType(OutputType)
7416    2   1    0 spoon.support.StandardEnvironment.getOutputType()
7417    2   1    0 spoon.support.StandardEnvironment.getSpoonProgress()
7418    2   1    0 spoon.support.StandardEnvironment.setSpoonProgress(SpoonProgress)
7419    2   1    0 spoon.support.StandardEnvironment.getCompressionType()
7420    2   1    0 spoon.support.StandardEnvironment.setCompressionType(CompressionType)
7421    4   3    0 spoon.support.StandardEnvironment.createPrettyPrinter()
7422    2   1    0 spoon.support.StandardEnvironment.setPrettyPrinterCreator(PrettyPrinter)
7423    2   1    1 spoon.support.JavaOutputProcessor.JavaOutputProcessor(PrettyPrinter)
7424    1   1    1 spoon.support.JavaOutputProcessor.JavaOutputProcessor()
7425    2   1    0 spoon.support.JavaOutputProcessor.getEnvironment()
7426    4   3    0 spoon.support.JavaOutputProcessor.getPrinter()
7427    2   1    0 spoon.support.JavaOutputProcessor.getCreatedFiles()
7428    2   1    0 spoon.support.JavaOutputProcessor.getOutputDirectory()
7429    7   6    0 spoon.support.JavaOutputProcessor.init()
7430   20   7    1 spoon.support.JavaOutputProcessor.createJavaFile(CtType)
7431    2   5    0 spoon.support.JavaOutputProcessor.isToBeProcessed(CtNamedElement)
7432    9   5    1 spoon.support.JavaOutputProcessor.process(CtNamedElement)
7433    7   3    0 spoon.support.JavaOutputProcessor.createPackageFile(CtPackage)
7434    8   5    0 spoon.support.JavaOutputProcessor.createModuleFile(CtModule)
7435    2   1    0 spoon.support.JavaOutputProcessor.getElementPath(CtModule)
7436    2   1    0 spoon.support.JavaOutputProcessor.getElementPath(CtPackage)
7437    2   1    0 spoon.support.JavaOutputProcessor.getElementPath(CtType)
7438    5   4    0 spoon.support.JavaOutputProcessor.createFolders(Path)
7439    2   1    0 spoon.support.JavaOutputProcessor.getLineNumberMappings()
7440    2   1    0 spoon.support.JavaOutputProcessor.getTraversalStrategy()
7441    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onObjectUpdate(CtElement,CtRole,CtElement,CtElement)
7442    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onObjectUpdate(CtElement,CtRole,Object,Object)
7443    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onObjectDelete(CtElement,CtRole,CtElement)
7444    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onListAdd(CtElement,CtRole,List,CtElement)
7445    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onListAdd(CtElement,CtRole,List,int,CtElement)
7446    3   2    0 spoon.support.modelobs.EmptyModelChangeListener.onListDelete(CtElement,CtRole,List,CtElement)
7447    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onListDelete(CtElement,CtRole,List,int,CtElement)
7448    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onListDeleteAll(CtElement,CtRole,List,List)
7449    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onMapAdd(CtElement,CtRole,V,K,CtElement)
7450    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onMapDeleteAll(CtElement,CtRole,V,V)
7451    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onSetAdd(CtElement,CtRole,Set,CtElement)
7452    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onSetAdd(CtElement,CtRole,Set,T)
7453    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onSetDelete(CtElement,CtRole,Set,CtElement)
7454    3   2    0 spoon.support.modelobs.EmptyModelChangeListener.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7455    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7456    1   1    0 spoon.support.modelobs.EmptyModelChangeListener.onSetDeleteAll(CtElement,CtRole,Set,Set)
7457   13   5    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.propagateModelChange(Action)
7458    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onObjectUpdate(CtElement,CtRole,CtElement,CtElement)
7459    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onObjectUpdate(CtElement,CtRole,Object,Object)
7460    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onObjectDelete(CtElement,CtRole,CtElement)
7461    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onListAdd(CtElement,CtRole,List,CtElement)
7462    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onListAdd(CtElement,CtRole,List,int,CtElement)
7463    3   2    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onListDelete(CtElement,CtRole,List,CtElement)
7464    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onListDelete(CtElement,CtRole,List,int,CtElement)
7465    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onListDeleteAll(CtElement,CtRole,List,List)
7466    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onMapAdd(CtElement,CtRole,V,K,CtElement)
7467    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onMapDeleteAll(CtElement,CtRole,V,V)
7468    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onSetAdd(CtElement,CtRole,Set,CtElement)
7469    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onSetAdd(CtElement,CtRole,Set,T)
7470    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onSetDelete(CtElement,CtRole,Set,CtElement)
7471    3   2    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7472    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7473    2   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onSetDeleteAll(CtElement,CtRole,Set,Set)
7474    1   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onDelete(DeleteAction)
7475    1   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onDeleteAll(DeleteAllAction)
7476    1   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onAdd(AddAction)
7477    1   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onUpdate(UpdateAction)
7478    1   1    0 spoon.support.modelobs.ActionBasedChangeListenerImpl.onAction(Action)
7479    2   1    0 spoon.support.modelobs.context.SetContext.SetContext(CtElement,CtRole,Set)
7480    2   1    0 spoon.support.modelobs.context.ListContext.ListContext(CtElement,CtRole,List)
7481    3   1    0 spoon.support.modelobs.context.ListContext.ListContext(CtElement,CtRole,List,int)
7482    2   1    1 spoon.support.modelobs.context.ListContext.getPosition()
7483    2   1    0 spoon.support.modelobs.context.ObjectContext.ObjectContext(CtElement,CtRole)
7484    3   1    0 spoon.support.modelobs.context.Context.Context(CtElement,CtRole)
7485    2   1    1 spoon.support.modelobs.context.Context.getElementWhereChangeHappens()
7486    2   1    1 spoon.support.modelobs.context.Context.getChangedProperty()
7487    3   1    0 spoon.support.modelobs.context.CollectionContext.CollectionContext(CtElement,CtRole,T)
7488    3   1    0 spoon.support.modelobs.context.MapContext.MapContext(CtElement,CtRole,V)
7489    3   1    0 spoon.support.modelobs.context.MapContext.MapContext(CtElement,CtRole,V,K)
7490    2   1    1 spoon.support.modelobs.context.MapContext.getKey()
7491    2   1    1 spoon.support.modelobs.context.MapContext.getMap()
7492    5   3    1 spoon.support.modelobs.ChangeCollector.getChangeCollector(Environment)
7493    7   2    1 spoon.support.modelobs.ChangeCollector.runWithoutChangeListener(Environment,Runnable)
7494    3   1    1 spoon.support.modelobs.ChangeCollector.attachTo(Environment)
7495    5   3    1 spoon.support.modelobs.ChangeCollector.getDirectChanges(CtElement)
7496   10   6    0 spoon.support.modelobs.ChangeCollector.CtScannerListener$1.enter(CtElement)
7497    2   1    0 spoon.support.modelobs.ChangeCollector.CtScannerListener$1.exit(CtElement)
7498   20   1    1 spoon.support.modelobs.ChangeCollector.getChanges(CtElement)
7499    2   1    0 spoon.support.modelobs.ChangeCollector.Scanner.Scanner()
7500    2   1    0 spoon.support.modelobs.ChangeCollector.Scanner.getScannedRole()
7501    8   3    1 spoon.support.modelobs.ChangeCollector.onChange(CtElement,CtRole)
7502    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.getChangeCollector()
7503    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onObjectUpdate(CtElement,CtRole,CtElement,CtElement)
7504    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onObjectUpdate(CtElement,CtRole,Object,Object)
7505    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onObjectDelete(CtElement,CtRole,CtElement)
7506    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onListAdd(CtElement,CtRole,List,CtElement)
7507    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onListAdd(CtElement,CtRole,List,int,CtElement)
7508    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onListDelete(CtElement,CtRole,List,CtElement)
7509    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onListDelete(CtElement,CtRole,List,int,CtElement)
7510    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onListDeleteAll(CtElement,CtRole,List,List)
7511    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onMapAdd(CtElement,CtRole,V,K,CtElement)
7512    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onMapDeleteAll(CtElement,CtRole,V,V)
7513    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onSetAdd(CtElement,CtRole,Set,CtElement)
7514    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onSetAdd(CtElement,CtRole,Set,T)
7515    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onSetDelete(CtElement,CtRole,Set,CtElement)
7516    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7517    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7518    2   1    0 spoon.support.modelobs.ChangeCollector.ChangeListener.onSetDeleteAll(CtElement,CtRole,Set,Set)
7519    1   1    1 spoon.support.modelobs.ActionBasedChangeListener.onDelete(DeleteAction)
7520    1   1    1 spoon.support.modelobs.ActionBasedChangeListener.onDeleteAll(DeleteAllAction)
7521    1   1    1 spoon.support.modelobs.ActionBasedChangeListener.onAdd(AddAction)
7522    1   1    1 spoon.support.modelobs.ActionBasedChangeListener.onUpdate(UpdateAction)
7523    1   1    1 spoon.support.modelobs.ActionBasedChangeListener.onAction(Action)
7524    3   1    0 spoon.support.modelobs.action.AddAction.AddAction(Context,T)
7525    2   1    0 spoon.support.modelobs.action.AddAction.getChangedValue()
7526    2   1    1 spoon.support.modelobs.action.AddAction.getNewValue()
7527    2   1    0 spoon.support.modelobs.action.DeleteAllAction.DeleteAllAction(Context,Collection)
7528    2   1    0 spoon.support.modelobs.action.DeleteAllAction.DeleteAllAction(Context,Map)
7529    2   1    0 spoon.support.modelobs.action.Action.Action(Context)
7530    1   1    1 spoon.support.modelobs.action.Action.getChangedValue()
7531    2   1    1 spoon.support.modelobs.action.Action.getContext()
7532    3   1    0 spoon.support.modelobs.action.DeleteAction.DeleteAction(Context,T)
7533    2   1    0 spoon.support.modelobs.action.DeleteAction.getChangedValue()
7534    2   1    1 spoon.support.modelobs.action.DeleteAction.getRemovedValue()
7535    4   1    0 spoon.support.modelobs.action.UpdateAction.UpdateAction(Context,T,T)
7536    2   1    0 spoon.support.modelobs.action.UpdateAction.getChangedValue()
7537    2   1    1 spoon.support.modelobs.action.UpdateAction.getNewValue()
7538    2   1    1 spoon.support.modelobs.action.UpdateAction.getOldValue()
7539    7   4    0 spoon.support.modelobs.SourceFragmentCreator.onChange(CtElement,CtRole)
7540    1   1    1 spoon.support.modelobs.FineModelChangeListener.onObjectUpdate(CtElement,CtRole,CtElement,CtElement)
7541    1   1    1 spoon.support.modelobs.FineModelChangeListener.onObjectUpdate(CtElement,CtRole,Object,Object)
7542    1   1    1 spoon.support.modelobs.FineModelChangeListener.onObjectDelete(CtElement,CtRole,CtElement)
7543    1   1    1 spoon.support.modelobs.FineModelChangeListener.onListAdd(CtElement,CtRole,List,CtElement)
7544    1   1    1 spoon.support.modelobs.FineModelChangeListener.onListAdd(CtElement,CtRole,List,int,CtElement)
7545    1   1    1 spoon.support.modelobs.FineModelChangeListener.onListDelete(CtElement,CtRole,List,CtElement)
7546    1   1    1 spoon.support.modelobs.FineModelChangeListener.onListDelete(CtElement,CtRole,List,int,CtElement)
7547    1   1    1 spoon.support.modelobs.FineModelChangeListener.onListDeleteAll(CtElement,CtRole,List,List)
7548    1   1    0 spoon.support.modelobs.FineModelChangeListener.onMapAdd(CtElement,CtRole,V,K,CtElement)
7549    1   1    0 spoon.support.modelobs.FineModelChangeListener.onMapDeleteAll(CtElement,CtRole,V,V)
7550    1   1    1 spoon.support.modelobs.FineModelChangeListener.onSetAdd(CtElement,CtRole,Set,CtElement)
7551    1   1    0 spoon.support.modelobs.FineModelChangeListener.onSetAdd(CtElement,CtRole,Set,T)
7552    1   1    1 spoon.support.modelobs.FineModelChangeListener.onSetDelete(CtElement,CtRole,Set,CtElement)
7553    1   1    1 spoon.support.modelobs.FineModelChangeListener.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7554    1   1    1 spoon.support.modelobs.FineModelChangeListener.onSetDelete(CtElement,CtRole,Set,ModifierKind)
7555    1   1    1 spoon.support.modelobs.FineModelChangeListener.onSetDeleteAll(CtElement,CtRole,Set,Set)
7556    1   1    1 spoon.support.SerializationModelStreamer.SerializationModelStreamer()
7557   11   4    0 spoon.support.SerializationModelStreamer.save(Factory,OutputStream)
7558    3   1    0 spoon.support.SerializationModelStreamer.Filter$1.matches(CtElement)
7559   23   8    0 spoon.support.SerializationModelStreamer.load(InputStream)
7560    2   1    0 spoon.support.visitor.SubInheritanceHierarchyResolver.SubInheritanceHierarchyResolver(CtPackage)
7561    5   2    1 spoon.support.visitor.SubInheritanceHierarchyResolver.addSuperType(CtTypeInformation)
7562    3   1    1 spoon.support.visitor.SubInheritanceHierarchyResolver.includingInterfaces(boolean)
7563    3   1    1 spoon.support.visitor.SubInheritanceHierarchyResolver.failOnClassNotFound(boolean)
7564   15   7    0 spoon.support.visitor.SubInheritanceHierarchyResolver.CtScannerListener$1.enter(CtElement)
7565    6   4    0 spoon.support.visitor.SubInheritanceHierarchyResolver.CtScannerListener$1.exit(CtElement)
7566    1   1    0 spoon.support.visitor.SubInheritanceHierarchyResolver.CtConsumer$1.accept(CtType)
7567   31   2    1 spoon.support.visitor.SubInheritanceHierarchyResolver.forEachSubTypeInPackage(T)
7568    2   1    0 spoon.support.visitor.SubInheritanceHierarchyResolver.Filter$1.matches(CtType)
7569    7   1    0 spoon.support.visitor.java.reflect.RtParameter.RtParameter(String,Class,Type,RtMethod,Constructor,int)
7570    5   4    1 spoon.support.visitor.java.reflect.RtParameter.getName()
7571    2   1    1 spoon.support.visitor.java.reflect.RtParameter.getType()
7572    2   1    0 spoon.support.visitor.java.reflect.RtParameter.getGenericType()
7573    5   3    1 spoon.support.visitor.java.reflect.RtParameter.getDeclaredAnnotations()
7574    4   5    1 spoon.support.visitor.java.reflect.RtParameter.isVarArgs()
7575    7   7    1 spoon.support.visitor.java.reflect.RtParameter.equals(Object)
7576    4   3    1 spoon.support.visitor.java.reflect.RtParameter.hashCode()
7577    5   2    1 spoon.support.visitor.java.reflect.RtParameter.parametersOf(RtMethod)
7578   21   7    1 spoon.support.visitor.java.reflect.RtParameter.parametersOf(Constructor)
7579   15   1    0 spoon.support.visitor.java.reflect.RtMethod.RtMethod(Class,Method,String,Class,Type,Method[],Class[],Type[],Class[],int,Annotation[],Annotation[][],boolean,boolean)
7580    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getDeclaringClass()
7581    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getMethod()
7582    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getName()
7583    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getReturnType()
7584    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getTypeParameters()
7585    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getParameterTypes()
7586    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getExceptionTypes()
7587    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getModifiers()
7588    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getDeclaredAnnotations()
7589    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getParameterAnnotations()
7590    2   1    0 spoon.support.visitor.java.reflect.RtMethod.isVarArgs()
7591    2   1    0 spoon.support.visitor.java.reflect.RtMethod.isDefault()
7592    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getGenericReturnType()
7593    2   1    0 spoon.support.visitor.java.reflect.RtMethod.getGenericParameterTypes()
7594   13  12    0 spoon.support.visitor.java.reflect.RtMethod.equals(Object)
7595    2   1    0 spoon.support.visitor.java.reflect.RtMethod.hashCode()
7596    2   1    0 spoon.support.visitor.java.reflect.RtMethod.create(Method)
7597    8   8    0 spoon.support.visitor.java.reflect.RtMethod._java8_isDefault(Method)
7598    6   2    0 spoon.support.visitor.java.reflect.RtMethod.methodsOf(T)
7599    8   5    1 spoon.support.visitor.java.reflect.RtMethod.sameMethodsWithDifferentTypeOf(T,RtMethod)
7600    8   8    0 spoon.support.visitor.java.reflect.RtMethod.isLightEquals(RtMethod)
7601    5   1    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.TypeReferenceRuntimeBuilderContext(Type,CtTypeReference)
7602    2   1    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.addPackage(CtPackage)
7603   16   9    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7604    2   1    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.addAnnotation(Annotation)
7605    3   1    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.addFormalType(CtTypeParameter)
7606    2   2    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.getTypeParameter(GenericDeclaration,String)
7607    7   6    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.equals(Object)
7608    2   1    0 spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext.hashCode()
7609    3   1    0 spoon.support.visitor.java.internal.PackageRuntimeBuilderContext.PackageRuntimeBuilderContext(CtPackage)
7610    2   1    0 spoon.support.visitor.java.internal.PackageRuntimeBuilderContext.addType(CtType)
7611    2   1    0 spoon.support.visitor.java.internal.PackageRuntimeBuilderContext.addAnnotation(Annotation)
7612    2   1    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.AbstractRuntimeBuilderContext(CtShadowable)
7613    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addPackage(CtPackage)
7614    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addType(CtType)
7615    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addAnnotation(Annotation)
7616    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addConstructor(CtConstructor)
7617    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addMethod(CtMethod)
7618    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addField(CtField)
7619    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addEnumValue(CtEnumValue)
7620    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addParameter(CtParameter)
7621    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addFormalType(CtTypeParameter)
7622    2   2    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7623    2   1    0 spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext.getTypeParameter(GenericDeclaration,String)
7624    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addPackage(CtPackage)
7625    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addType(CtType)
7626    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addAnnotation(Annotation)
7627    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addConstructor(CtConstructor)
7628    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addMethod(CtMethod)
7629    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addField(CtField)
7630    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addEnumValue(CtEnumValue)
7631    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addParameter(CtParameter)
7632    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7633    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.addFormalType(CtTypeParameter)
7634    1   1    0 spoon.support.visitor.java.internal.RuntimeBuilderContext.getTypeParameter(GenericDeclaration,String)
7635    5   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.TypeRuntimeBuilderContext(Type,CtType)
7636    2   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addPackage(CtPackage)
7637    2   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addType(CtType)
7638    2   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addAnnotation(Annotation)
7639    2   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addMethod(CtMethod)
7640    2   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addField(CtField)
7641    3   1    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addFormalType(CtTypeParameter)
7642   10   7    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7643    2   2    0 spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.getTypeParameter(GenericDeclaration,String)
7644    3   1    0 spoon.support.visitor.java.internal.VariableRuntimeBuilderContext.VariableRuntimeBuilderContext(CtField)
7645    3   1    0 spoon.support.visitor.java.internal.VariableRuntimeBuilderContext.VariableRuntimeBuilderContext(CtParameter)
7646    2   1    0 spoon.support.visitor.java.internal.VariableRuntimeBuilderContext.addAnnotation(Annotation)
7647    6   3    0 spoon.support.visitor.java.internal.VariableRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7648    3   1    0 spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext.AnnotationRuntimeBuilderContext(Annotation)
7649    2   1    0 spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext.addAnnotation(Annotation)
7650    7   3    0 spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7651    2   1    0 spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext.getCtAnnotation()
7652    5   1    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.ExecutableRuntimeBuilderContext(Executable,CtMethod)
7653    5   1    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.ExecutableRuntimeBuilderContext(Executable,CtConstructor)
7654    2   1    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.addAnnotation(Annotation)
7655    2   1    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.addParameter(CtParameter)
7656    9   5    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.addTypeReference(CtRole,CtTypeReference)
7657    6   3    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.addFormalType(CtTypeParameter)
7658    2   2    0 spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext.getTypeParameter(GenericDeclaration,String)
7659    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitPackage(Package)
7660    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitClass(T)
7661    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitInterface(T)
7662    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitEnum(T)
7663    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitAnnotationClass(T)
7664    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitAnnotation(Annotation)
7665    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitConstructor(T)
7666    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitMethod(RtMethod)
7667    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitField(Field)
7668    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitEnumValue(Field)
7669    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitParameter(RtParameter)
7670    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitTypeParameter(T)
7671    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitTypeParameterReference(CtRole,T)
7672    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitTypeReference(CtRole,Type)
7673    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitTypeReference(CtRole,ParameterizedType)
7674    1   1    1 spoon.support.visitor.java.JavaReflectionVisitor.visitTypeReference(CtRole,WildcardType)
7675    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitTypeReference(CtRole,T)
7676    1   1    0 spoon.support.visitor.java.JavaReflectionVisitor.visitArrayReference(CtRole,Type)
7677    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.JavaReflectionTreeBuilder(Factory)
7678    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.enter(RuntimeBuilderContext)
7679    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.exit()
7680   28  10    1 spoon.support.visitor.java.JavaReflectionTreeBuilder.scan(T)
7681    6   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitPackage(Package)
7682    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeRuntimeBuilderContext$1.addConstructor(CtConstructor)
7683    6   3    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeRuntimeBuilderContext$1.addTypeReference(CtRole,CtTypeReference)
7684   16   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitClass(T)
7685    8   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitInterface(T)
7686    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeRuntimeBuilderContext$1.addConstructor(CtConstructor)
7687    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeRuntimeBuilderContext$1.addEnumValue(CtEnumValue)
7688   12   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitEnum(T)
7689    7   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeRuntimeBuilderContext$1.addMethod(CtMethod)
7690   15   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitAnnotationClass(T)
7691    9   4    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.AnnotationRuntimeBuilderContext$1.addMethod(CtMethod)
7692   15   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitAnnotation(Annotation)
7693    8   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitConstructor(T)
7694   11   2    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitMethod(RtMethod,Annotation)
7695    8   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitField(Field)
7696    8   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitEnumValue(Field)
7697    8   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitParameter(RtParameter)
7698    9   4    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeRuntimeBuilderContext$1.addTypeReference(CtRole,CtTypeReference)
7699   22   4    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitTypeParameter(T)
7700   18   6    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitTypeParameterReference(CtRole,T)
7701    2   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeReferenceRuntimeBuilderContext$1.addType(CtType)
7702   14   4    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitTypeReference(CtRole,ParameterizedType)
7703    7   2    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitTypeReference(CtRole,WildcardType)
7704   19   8    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.getTypeName(Type)
7705    6   3    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.TypeReferenceRuntimeBuilderContext$1.addTypeReference(CtRole,CtTypeReference)
7706   12   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitArrayReference(CtRole,Type)
7707    7   1    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.visitTypeReference(CtRole,T)
7708   36  20    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.setModifier(CtModifiable,int,Class)
7709    2   2    0 spoon.support.visitor.java.JavaReflectionTreeBuilder.isInterface(Class)
7710    1   1    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitPackage(Package)
7711   33  22    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitClass(T)
7712   11   4    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitType(T)
7713   26  16    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitInterface(T)
7714   37  26    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitEnum(T)
7715   20  12    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitAnnotationClass(T)
7716    6   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitAnnotation(Annotation)
7717   13   6    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitConstructor(T)
7718    5   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.getNumberOfEnclosingClasses(Class)
7719    2   1    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitMethod(RtMethod)
7720   12   8    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitMethod(RtMethod,Annotation)
7721    5   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitField(Field)
7722    5   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitEnumValue(Field)
7723    5   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitParameter(RtParameter)
7724    5   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeParameter(T)
7725    5   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeParameterReference(CtRole,T)
7726   21  14    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,Type)
7727   11   6    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,ParameterizedType)
7728    6   6    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,WildcardType)
7729    2   1    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitArrayReference(CtRole,Type)
7730    5   4    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.visitTypeReference(CtRole,T)
7731    8   3    0 spoon.support.visitor.java.JavaReflectionVisitorImpl.getDeclaredMethods(T)
7732    1   1    0 spoon.support.visitor.MethodTypingContext.MethodTypingContext()
7733    2   1    0 spoon.support.visitor.MethodTypingContext.getAdaptationScope()
7734   29  10    0 spoon.support.visitor.MethodTypingContext.setMethod(CtMethod)
7735    5   1    0 spoon.support.visitor.MethodTypingContext.setConstructor(CtConstructor)
7736    4   3    0 spoon.support.visitor.MethodTypingContext.getEnclosingGenericTypeAdapter()
7737    4   1    0 spoon.support.visitor.MethodTypingContext.setClassTypingContext(ClassTypingContext)
7738    9   4    0 spoon.support.visitor.MethodTypingContext.setInvocation(CtInvocation)
7739   17   8    0 spoon.support.visitor.MethodTypingContext.setExecutableReference(CtExecutableReference)
7740   17  12    1 spoon.support.visitor.MethodTypingContext.adaptTypeParameter(CtTypeParameter)
7741   14   8    1 spoon.support.visitor.MethodTypingContext.hasSameMethodFormalTypeParameters(CtFormalTypeDeclarer)
7742    9   5    0 spoon.support.visitor.MethodTypingContext.isSameMethodFormalTypeParameter(CtTypeParameter,CtTypeParameter)
7743    7   5    0 spoon.support.visitor.MethodTypingContext.getIndexOfTypeParam(CtFormalTypeDeclarer,CtTypeReference)
7744    5   2    0 spoon.support.visitor.MethodTypingContext.getBound(CtTypeParameter)
7745    4   4    0 spoon.support.visitor.MethodTypingContext.getScopeMethodDeclaringType()
7746   11   8    0 spoon.support.visitor.MethodTypingContext.adaptTypeForNewMethod(CtTypeReference)
7747    7   7    0 spoon.support.visitor.MethodTypingContext.checkSameTypingContext(ClassTypingContext,CtFormalTypeDeclarer)
7748    1   1    0 spoon.support.visitor.SignaturePrinter.SignaturePrinter()
7749    2   1    0 spoon.support.visitor.SignaturePrinter.getSignature()
7750    3   1    0 spoon.support.visitor.SignaturePrinter.visitCtArrayTypeReference(T)
7751    2   1    0 spoon.support.visitor.SignaturePrinter.visitCtExecutableReference(T)
7752   16   7    1 spoon.support.visitor.SignaturePrinter.writeNameAndParameters(T)
7753    2   1    0 spoon.support.visitor.SignaturePrinter.visitCtTypeReference(T)
7754    2   1    0 spoon.support.visitor.SignaturePrinter.visitCtTypeParameterReference(CtTypeParameterReference)
7755    8   4    0 spoon.support.visitor.SignaturePrinter.visitCtWildcardReference(CtWildcardReference)
7756    5   2    0 spoon.support.visitor.SignaturePrinter.visitCtIntersectionTypeReference(T)
7757   10   4    0 spoon.support.visitor.SignaturePrinter.visitCtConstructor(T)
7758    2   1    0 spoon.support.visitor.SignaturePrinter.visitCtAnnotationMethod(T)
7759    9   3    1 spoon.support.visitor.SignaturePrinter.visitCtMethod(T)
7760    3   1    0 spoon.support.visitor.SignaturePrinter.clearLast()
7761    3   1    0 spoon.support.visitor.SignaturePrinter.write(String)
7762    7   2    1 spoon.support.visitor.ClassTypingContext.ClassTypingContext(CtTypeReference)
7763    7   2    1 spoon.support.visitor.ClassTypingContext.ClassTypingContext(CtType)
7764    2   1    0 spoon.support.visitor.ClassTypingContext.getAdaptationScope()
7765   12   9    1 spoon.support.visitor.ClassTypingContext.isSubtypeOf(CtTypeReference)
7766   21   8    0 spoon.support.visitor.ClassTypingContext.CtConsumer$1.accept(CtTypeReference)
7767   40  11    1 spoon.support.visitor.ClassTypingContext.resolveActualTypeArgumentsOf(CtTypeReference)
7768    9   6    1 spoon.support.visitor.ClassTypingContext.isOverriding(CtMethod,CtMethod)
7769    2   1    1 spoon.support.visitor.ClassTypingContext.isSubSignature(CtMethod,CtMethod)
7770    4   4    1 spoon.support.visitor.ClassTypingContext.isSameSignature(CtExecutable,CtMethod)
7771    2   1    0 spoon.support.visitor.ClassTypingContext.getEnclosingGenericTypeAdapter()
7772    2   1    1 spoon.support.visitor.ClassTypingContext.createEnclosingHierarchy(CtType)
7773    2   1    1 spoon.support.visitor.ClassTypingContext.createEnclosingHierarchy(CtTypeReference)
7774    5   2    0 spoon.support.visitor.ClassTypingContext.getTypeReferences(CtType)
7775    9   7    1 spoon.support.visitor.ClassTypingContext.getEnclosingType(CtType)
7776   11   8    1 spoon.support.visitor.ClassTypingContext.getEnclosingType(CtTypeReference)
7777   12   9    1 spoon.support.visitor.ClassTypingContext.adaptTypeParameter(CtTypeParameter)
7778    4   2    1 spoon.support.visitor.ClassTypingContext.getVisitedSet()
7779    2   1    0 spoon.support.visitor.ClassTypingContext.HierarchyListener.HierarchyListener(String)
7780    9   6    0 spoon.support.visitor.ClassTypingContext.HierarchyListener.enter(CtTypeReference,boolean)
7781   12   5    1 spoon.support.visitor.ClassTypingContext.resolveTypeParameters(CtTypeReference)
7782   13   8    0 spoon.support.visitor.ClassTypingContext.resolveTypeParameter(CtFormalTypeDeclarer,CtTypeParameterReference,CtTypeParameter,CtTypeReference)
7783    7   5    0 spoon.support.visitor.ClassTypingContext.getActualTypeArguments(String)
7784    5   3    0 spoon.support.visitor.ClassTypingContext.getValue(CtTypeReference,CtTypeParameter,CtFormalTypeDeclarer)
7785    8   5    1 spoon.support.visitor.ClassTypingContext.substituteBy(CtTypeParameter,CtFormalTypeDeclarer,U)
7786   15  10    1 spoon.support.visitor.ClassTypingContext.isSubTypeByActualTypeArguments(CtTypeReference,CtTypeReference)
7787   21  15    1 spoon.support.visitor.ClassTypingContext.isSubTypeArg(CtTypeReference,CtTypeReference)
7788   19  10    0 spoon.support.visitor.ClassTypingContext.isSameSignature(CtExecutable,CtExecutable,boolean)
7789   41  23    0 spoon.support.visitor.ClassTypingContext.ExecutableContext.isSameSignatureLikeScopeMethod(CtExecutable,boolean)
7790    5   2    0 spoon.support.visitor.ClassTypingContext.ExecutableContext.getParameterTypes(CtParameter)
7791    1   1    0 spoon.support.visitor.equals.NotEqualException.NotEqualException()
7792    2   1    0 spoon.support.visitor.equals.EqualsVisitor.equals(CtElement,CtElement)
7793    2   1    0 spoon.support.visitor.equals.EqualsVisitor.EqualsVisitor()
7794    2   1    0 spoon.support.visitor.equals.EqualsVisitor.EqualsVisitor(EqualsChecker)
7795    7   3    0 spoon.support.visitor.equals.EqualsVisitor.enter(CtElement)
7796   15  10    0 spoon.support.visitor.equals.EqualsVisitor.biScan(CtRole,CtElement,CtElement)
7797    2   1    0 spoon.support.visitor.equals.EqualsVisitor.biScan(CtElement,CtElement)
7798   20  12    0 spoon.support.visitor.equals.EqualsVisitor.biScan(CtRole,CtElement,CtElement)
7799    6   1    0 spoon.support.visitor.equals.EqualsVisitor.fail(CtRole,Object,Object)
7800    3   1    1 spoon.support.visitor.equals.EqualsVisitor.checkEquals(CtElement,CtElement)
7801    2   1    1 spoon.support.visitor.equals.EqualsVisitor.isEqual()
7802    2   1    1 spoon.support.visitor.equals.EqualsVisitor.getNotEqualRole()
7803    2   1    1 spoon.support.visitor.equals.EqualsVisitor.getNotEqualElement()
7804    2   1    1 spoon.support.visitor.equals.EqualsVisitor.getNotEqualOther()
7805    4   1    0 spoon.support.visitor.equals.CloneHelper.clone(T)
7806    7   5    0 spoon.support.visitor.equals.CloneHelper.clone(T)
7807    9   7    0 spoon.support.visitor.equals.CloneHelper.clone(T)
7808    9   7    0 spoon.support.visitor.equals.CloneHelper.clone(T)
7809    7   5    0 spoon.support.visitor.equals.CloneHelper.clone(T)
7810    2   1    1 spoon.support.visitor.equals.CloneHelper.addClone(T,T)
7811    2   1    1 spoon.support.visitor.equals.CloneHelper.addClone(T,String,T)
7812    2   1    0 spoon.support.visitor.equals.CloneHelper.CtScanner$1.visitCtExecutableReference(T)
7813    4   1    1 spoon.support.visitor.equals.CloneHelper.tailor(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
7814    3   1    0 spoon.support.visitor.equals.EqualsChecker.setOther(CtElement)
7815    2   1    0 spoon.support.visitor.equals.EqualsChecker.isNotEqual()
7816    2   1    0 spoon.support.visitor.equals.EqualsChecker.getNotEqualRole()
7817    4   2    1 spoon.support.visitor.equals.EqualsChecker.setNotEqual(CtRole)
7818    5   2    0 spoon.support.visitor.equals.EqualsChecker.scanCtNamedElement(CtNamedElement)
7819    5   2    0 spoon.support.visitor.equals.EqualsChecker.scanCtReference(CtReference)
7820   10   6    0 spoon.support.visitor.equals.EqualsChecker.scanCtStatement(CtStatement)
7821   16   7    0 spoon.support.visitor.equals.EqualsChecker.scanCtModifiable(CtModifiable)
7822    4   3    0 spoon.support.visitor.equals.EqualsChecker.visitCtAssignment(A)
7823   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtOperatorAssignment(A)
7824   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtBinaryOperator(T)
7825   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtUnaryOperator(T)
7826    5   2    0 spoon.support.visitor.equals.EqualsChecker.visitCtArrayTypeReference(T)
7827   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtBreak(CtBreak)
7828   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtContinue(CtContinue)
7829    5   2    0 spoon.support.visitor.equals.EqualsChecker.visitCtExecutableReference(T)
7830    5   2    0 spoon.support.visitor.equals.EqualsChecker.visitCtMethod(T)
7831    5   2    0 spoon.support.visitor.equals.EqualsChecker.visitCtParameter(T)
7832   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtLiteral(T)
7833   12   5    0 spoon.support.visitor.equals.EqualsChecker.visitCtImport(CtImport)
7834    2   1    0 spoon.support.visitor.clone.CloneVisitor.CloneVisitor(spoon.support.visitor.equals.CloneHelper)
7835    2   1    0 spoon.support.visitor.clone.CloneVisitor.getClone()
7836   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAnnotation(A)
7837    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAnnotationType(A)
7838    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
7839   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtArrayRead(T)
7840   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtArrayWrite(T)
7841   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtArrayTypeReference(T)
7842    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAssert(T)
7843   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAssignment(A)
7844   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtBinaryOperator(T)
7845    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtBlock(R)
7846    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtBreak(spoon.reflect.code.CtBreak)
7847    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCase(S)
7848    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCatch(spoon.reflect.code.CtCatch)
7849   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtClass(T)
7850    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
7851   12   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtConditional(T)
7852   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtConstructor(T)
7853    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtContinue(spoon.reflect.code.CtContinue)
7854    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtDo(spoon.reflect.code.CtDo)
7855   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtEnum(T)
7856   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtExecutableReference(T)
7857    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtField(T)
7858    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtEnumValue(T)
7859   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtThisAccess(T)
7860   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAnnotationFieldAccess(T)
7861    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtFieldReference(T)
7862   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtFor(spoon.reflect.code.CtFor)
7863   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtForEach(spoon.reflect.code.CtForEach)
7864   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtIf(spoon.reflect.code.CtIf)
7865   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtInterface(T)
7866   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtInvocation(T)
7867    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtLiteral(T)
7868    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtLocalVariable(T)
7869    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtLocalVariableReference(T)
7870    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCatchVariable(T)
7871    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCatchVariableReference(T)
7872   12   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtMethod(T)
7873    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtAnnotationMethod(T)
7874   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtNewArray(T)
7875   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtConstructorCall(T)
7876   12   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtNewClass(T)
7877   12   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtLambda(T)
7878   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtExecutableReferenceExpression(E)
7879   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtOperatorAssignment(A)
7880    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtPackage(spoon.reflect.declaration.CtPackage)
7881    6   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
7882    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtParameter(T)
7883    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtParameterReference(T)
7884    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtReturn(R)
7885    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtStatementList(spoon.reflect.code.CtStatementList)
7886    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtSwitch(S)
7887    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtSynchronized(spoon.reflect.code.CtSynchronized)
7888    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtThrow(spoon.reflect.code.CtThrow)
7889   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTry(spoon.reflect.code.CtTry)
7890   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
7891    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
7892    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
7893   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtIntersectionTypeReference(T)
7894   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTypeReference(T)
7895    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTypeAccess(T)
7896   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtUnaryOperator(T)
7897    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtVariableRead(T)
7898    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtVariableWrite(T)
7899    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtWhile(spoon.reflect.code.CtWhile)
7900    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCodeSnippetExpression(T)
7901    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
7902    6   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtUnboundVariableReference(T)
7903   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtFieldRead(T)
7904   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtFieldWrite(T)
7905   10   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtSuperAccess(T)
7906    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtComment(spoon.reflect.code.CtComment)
7907    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
7908    7   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
7909    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtImport(spoon.reflect.declaration.CtImport)
7910    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtModule(spoon.reflect.declaration.CtModule)
7911    6   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
7912    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
7913    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
7914    9   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
7915    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtUsedService(spoon.reflect.declaration.CtUsedService)
7916   11   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtCompilationUnit(spoon.reflect.declaration.CtCompilationUnit)
7917    8   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtPackageDeclaration(spoon.reflect.declaration.CtPackageDeclaration)
7918    6   1    0 spoon.support.visitor.clone.CloneVisitor.visitCtTypeMemberWildcardImportReference(spoon.reflect.reference.CtTypeMemberWildcardImportReference)
7919    3   1    0 spoon.support.visitor.clone.CloneBuilder.copy(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
7920    4   1    0 spoon.support.visitor.clone.CloneBuilder.build(spoon.support.visitor.clone.CloneBuilder,spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
7921    2   1    0 spoon.support.visitor.clone.CloneBuilder.setOther(spoon.reflect.declaration.CtElement)
7922    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtCodeSnippetExpression(T)
7923    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
7924    5   1    1 spoon.support.visitor.clone.CloneBuilder.scanCtElement(spoon.reflect.declaration.CtElement)
7925    3   1    1 spoon.support.visitor.clone.CloneBuilder.scanCtNamedElement(spoon.reflect.declaration.CtNamedElement)
7926    3   1    1 spoon.support.visitor.clone.CloneBuilder.scanCtReference(spoon.reflect.reference.CtReference)
7927    3   1    1 spoon.support.visitor.clone.CloneBuilder.scanCtStatement(spoon.reflect.code.CtStatement)
7928    4   1    1 spoon.support.visitor.clone.CloneBuilder.scanCtType(T)
7929    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtOperatorAssignment(A)
7930    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtAnnotation(A)
7931    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
7932    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtBinaryOperator(T)
7933    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtBreak(spoon.reflect.code.CtBreak)
7934    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtConstructor(T)
7935    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtContinue(spoon.reflect.code.CtContinue)
7936    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtExecutableReference(T)
7937    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtField(T)
7938    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtFieldReference(T)
7939    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtInvocation(T)
7940    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtLiteral(T)
7941    5   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtLocalVariable(T)
7942    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtCatchVariable(T)
7943    5   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtMethod(T)
7944    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtConstructorCall(T)
7945    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtLambda(T)
7946    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtOperatorAssignement(A)
7947    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtPackage(spoon.reflect.declaration.CtPackage)
7948    5   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtParameter(T)
7949    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
7950    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtTypeReference(T)
7951    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtUnaryOperator(T)
7952    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtComment(spoon.reflect.code.CtComment)
7953    5   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
7954    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtModule(spoon.reflect.declaration.CtModule)
7955    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
7956    3   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
7957    4   1    0 spoon.support.visitor.clone.CloneBuilder.visitCtCompilationUnit(spoon.reflect.declaration.CtCompilationUnit)
7958    1   1    1 spoon.support.visitor.GenericTypeAdapter.getAdaptationScope()
7959    1   1    1 spoon.support.visitor.GenericTypeAdapter.adaptType(CtTypeInformation)
7960    1   1    1 spoon.support.visitor.GenericTypeAdapter.getEnclosingGenericTypeAdapter()
7961    1   1    0 spoon.support.visitor.AbstractTypingContext.AbstractTypingContext()
7962   25  10    0 spoon.support.visitor.AbstractTypingContext.adaptType(CtTypeInformation)
7963    4   3    0 spoon.support.visitor.AbstractTypingContext.adaptTypeParameterReference(CtTypeParameterReference)
7964    5   2    0 spoon.support.visitor.AbstractTypingContext.adaptTypeParameterReferenceBoundingType(CtWildcardReference,CtTypeReference)
7965    1   1    1 spoon.support.visitor.AbstractTypingContext.adaptTypeParameter(CtTypeParameter)
7966    2   1    1 spoon.support.visitor.TypeReferenceScanner.TypeReferenceScanner()
7967    2   1    1 spoon.support.visitor.TypeReferenceScanner.TypeReferenceScanner(CtTypeReference)
7968    2   1    1 spoon.support.visitor.TypeReferenceScanner.getReferences()
7969    2   1    1 spoon.support.visitor.TypeReferenceScanner.addReference(T)
7970    9   1    0 spoon.support.visitor.TypeReferenceScanner.visitCtFieldRead(T)
7971    8   1    0 spoon.support.visitor.TypeReferenceScanner.visitCtFieldWrite(T)
7972    4   1    0 spoon.support.visitor.TypeReferenceScanner.visitCtFieldReference(T)
7973    5   1    0 spoon.support.visitor.TypeReferenceScanner.visitCtExecutableReference(T)
7974    4   2    0 spoon.support.visitor.TypeReferenceScanner.visitCtTypeReference(T)
7975    3   1    0 spoon.support.visitor.TypeReferenceScanner.visitCtAnnotationType(A)
7976    3   1    0 spoon.support.visitor.TypeReferenceScanner.visitCtEnum(T)
7977    6   3    0 spoon.support.visitor.TypeReferenceScanner.visitCtInterface(T)
7978    6   3    0 spoon.support.visitor.TypeReferenceScanner.visitCtClass(T)
7979    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener.CtTypedElementTypeReplaceListener(spoon.reflect.declaration.CtTypedElement)
7980    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
7981    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener.CtElementCommentsReplaceListener(spoon.reflect.declaration.CtElement)
7982    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener.set(java.util.List)
7983    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener.CtAnnotationAnnotationTypeReplaceListener(spoon.reflect.declaration.CtAnnotation)
7984    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
7985    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener.CtElementAnnotationsReplaceListener(spoon.reflect.declaration.CtElement)
7986    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener.set(java.util.List)
7987    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener.CtAnnotationValuesReplaceListener(spoon.reflect.declaration.CtAnnotation)
7988    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener.set(java.util.Map)
7989    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener.CtTypeTypeMembersReplaceListener(spoon.reflect.declaration.CtType)
7990    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener.set(java.util.List)
7991    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener.CtExecutableBodyReplaceListener(spoon.reflect.code.CtBodyHolder)
7992    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener.set(spoon.reflect.code.CtBlock)
7993    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener.CtExpressionTypeCastsReplaceListener(spoon.reflect.code.CtExpression)
7994    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener.set(java.util.List)
7995    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener.CtTargetedExpressionTargetReplaceListener(spoon.reflect.code.CtTargetedExpression)
7996    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener.set(spoon.reflect.code.CtExpression)
7997    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener.CtArrayAccessIndexExpressionReplaceListener(spoon.reflect.code.CtArrayAccess)
7998    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
7999    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener.CtTypeReferencePackageReplaceListener(spoon.reflect.reference.CtTypeReference)
8000    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener.set(spoon.reflect.reference.CtPackageReference)
8001    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener.CtTypeReferenceDeclaringTypeReplaceListener(spoon.reflect.reference.CtTypeReference)
8002    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8003    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener.CtArrayTypeReferenceComponentTypeReplaceListener(spoon.reflect.reference.CtArrayTypeReference)
8004    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8005    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener.CtActualTypeContainerActualTypeArgumentsReplaceListener(spoon.reflect.reference.CtActualTypeContainer)
8006    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener.set(java.util.List)
8007    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener.CtAssertAssertExpressionReplaceListener(spoon.reflect.code.CtAssert)
8008    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8009    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener.CtAssertExpressionReplaceListener(spoon.reflect.code.CtAssert)
8010    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8011    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener.CtAssignmentAssignedReplaceListener(spoon.reflect.code.CtAssignment)
8012    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener.set(spoon.reflect.code.CtExpression)
8013    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener.CtRHSReceiverAssignmentReplaceListener(spoon.reflect.code.CtRHSReceiver)
8014    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener.set(spoon.reflect.code.CtExpression)
8015    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener.CtBinaryOperatorLeftHandOperandReplaceListener(spoon.reflect.code.CtBinaryOperator)
8016    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener.set(spoon.reflect.code.CtExpression)
8017    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener.CtBinaryOperatorRightHandOperandReplaceListener(spoon.reflect.code.CtBinaryOperator)
8018    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener.set(spoon.reflect.code.CtExpression)
8019    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener.CtStatementListStatementsReplaceListener(spoon.reflect.code.CtStatementList)
8020    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener.set(java.util.List)
8021    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener.CtCaseCaseExpressionReplaceListener(spoon.reflect.code.CtCase)
8022    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8023    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener.CtCatchParameterReplaceListener(spoon.reflect.code.CtCatch)
8024    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener.set(spoon.reflect.code.CtCatchVariable)
8025    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener.CtCatchBodyReplaceListener(spoon.reflect.code.CtBodyHolder)
8026    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener.set(spoon.reflect.code.CtBlock)
8027    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener.CtTypeInformationSuperclassReplaceListener(spoon.reflect.declaration.CtType)
8028    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8029    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener.CtTypeInformationSuperInterfacesReplaceListener(spoon.reflect.declaration.CtType)
8030    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener.set(java.util.Set)
8031    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(spoon.reflect.declaration.CtFormalTypeDeclarer)
8032    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener.set(java.util.List)
8033    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener.CtConditionalConditionReplaceListener(spoon.reflect.code.CtConditional)
8034    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener.set(spoon.reflect.code.CtExpression)
8035    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener.CtConditionalThenExpressionReplaceListener(spoon.reflect.code.CtConditional)
8036    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8037    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener.CtConditionalElseExpressionReplaceListener(spoon.reflect.code.CtConditional)
8038    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8039    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener.CtExecutableParametersReplaceListener(spoon.reflect.declaration.CtExecutable)
8040    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener.set(java.util.List)
8041    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener.CtExecutableThrownTypesReplaceListener(spoon.reflect.declaration.CtExecutable)
8042    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener.set(java.util.Set)
8043    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener.CtDoLoopingExpressionReplaceListener(spoon.reflect.code.CtDo)
8044    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8045    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener.CtLoopBodyReplaceListener(spoon.reflect.code.CtBodyHolder)
8046    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener.set(spoon.reflect.code.CtStatement)
8047    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener.CtEnumEnumValuesReplaceListener(spoon.reflect.declaration.CtEnum)
8048    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener.set(java.util.List)
8049    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener.CtExecutableReferenceDeclaringTypeReplaceListener(spoon.reflect.reference.CtExecutableReference)
8050    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8051    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener.CtExecutableReferenceTypeReplaceListener(spoon.reflect.reference.CtExecutableReference)
8052    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8053    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener.CtExecutableReferenceParametersReplaceListener(spoon.reflect.reference.CtExecutableReference)
8054    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener.set(java.util.List)
8055    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener.CtVariableDefaultExpressionReplaceListener(spoon.reflect.declaration.CtVariable)
8056    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8057    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener.CtAnnotationFieldAccessVariableReplaceListener(spoon.reflect.code.CtVariableAccess)
8058    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener.set(spoon.reflect.reference.CtFieldReference)
8059    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener.CtFieldReferenceDeclaringTypeReplaceListener(spoon.reflect.reference.CtFieldReference)
8060    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8061    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener.CtVariableReferenceTypeReplaceListener(spoon.reflect.reference.CtVariableReference)
8062    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8063    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener.CtForForInitReplaceListener(spoon.reflect.code.CtFor)
8064    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener.set(java.util.List)
8065    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener.CtForExpressionReplaceListener(spoon.reflect.code.CtFor)
8066    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8067    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener.CtForForUpdateReplaceListener(spoon.reflect.code.CtFor)
8068    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener.set(java.util.List)
8069    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener.CtForEachVariableReplaceListener(spoon.reflect.code.CtForEach)
8070    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener.set(spoon.reflect.code.CtLocalVariable)
8071    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener.CtForEachExpressionReplaceListener(spoon.reflect.code.CtForEach)
8072    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8073    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener.CtIfConditionReplaceListener(spoon.reflect.code.CtIf)
8074    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener.set(spoon.reflect.code.CtExpression)
8075    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener.CtIfThenStatementReplaceListener(spoon.reflect.code.CtIf)
8076    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener.set(spoon.reflect.code.CtStatement)
8077    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener.CtIfElseStatementReplaceListener(spoon.reflect.code.CtIf)
8078    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener.set(spoon.reflect.code.CtStatement)
8079    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener.CtAbstractInvocationExecutableReplaceListener(spoon.reflect.code.CtAbstractInvocation)
8080    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener.set(spoon.reflect.reference.CtExecutableReference)
8081    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener.CtAbstractInvocationArgumentsReplaceListener(spoon.reflect.code.CtAbstractInvocation)
8082    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener.set(java.util.List)
8083    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener.CtMultiTypedElementMultiTypesReplaceListener(spoon.reflect.declaration.CtMultiTypedElement)
8084    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener.set(java.util.List)
8085    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener.CtAnnotationMethodDefaultExpressionReplaceListener(spoon.reflect.declaration.CtAnnotationMethod)
8086    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8087    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener.CtNewArrayElementsReplaceListener(spoon.reflect.code.CtNewArray)
8088    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener.set(java.util.List)
8089    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener.CtNewArrayDimensionExpressionsReplaceListener(spoon.reflect.code.CtNewArray)
8090    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener.set(java.util.List)
8091    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener.CtNewClassAnonymousClassReplaceListener(spoon.reflect.code.CtNewClass)
8092    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener.set(spoon.reflect.declaration.CtClass)
8093    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener.CtLambdaExpressionReplaceListener(spoon.reflect.code.CtLambda)
8094    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8095    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener.CtExecutableReferenceExpressionExecutableReplaceListener(spoon.reflect.code.CtExecutableReferenceExpression)
8096    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener.set(spoon.reflect.reference.CtExecutableReference)
8097    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener.CtPackagePackagesReplaceListener(spoon.reflect.declaration.CtPackage)
8098    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener.set(java.util.Set)
8099    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener.CtPackageTypesReplaceListener(spoon.reflect.declaration.CtPackage)
8100    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener.set(java.util.Set)
8101    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener.CtReturnReturnedExpressionReplaceListener(spoon.reflect.code.CtReturn)
8102    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8103    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener.CtSwitchSelectorReplaceListener(spoon.reflect.code.CtSwitch)
8104    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener.set(spoon.reflect.code.CtExpression)
8105    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener.CtSwitchCasesReplaceListener(spoon.reflect.code.CtSwitch)
8106    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener.set(java.util.List)
8107    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener.CtSynchronizedExpressionReplaceListener(spoon.reflect.code.CtSynchronized)
8108    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8109    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener.CtSynchronizedBlockReplaceListener(spoon.reflect.code.CtSynchronized)
8110    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener.set(spoon.reflect.code.CtBlock)
8111    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener.CtThrowThrownExpressionReplaceListener(spoon.reflect.code.CtThrow)
8112    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8113    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener.CtTryBodyReplaceListener(spoon.reflect.code.CtBodyHolder)
8114    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener.set(spoon.reflect.code.CtBlock)
8115    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener.CtTryCatchersReplaceListener(spoon.reflect.code.CtTry)
8116    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener.set(java.util.List)
8117    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener.CtTryFinalizerReplaceListener(spoon.reflect.code.CtTry)
8118    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener.set(spoon.reflect.code.CtBlock)
8119    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener.CtTryWithResourceResourcesReplaceListener(spoon.reflect.code.CtTryWithResource)
8120    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener.set(java.util.List)
8121    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtWildcardReferenceBoundingTypeReplaceListener.CtWildcardReferenceBoundingTypeReplaceListener(spoon.reflect.reference.CtWildcardReference)
8122    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtWildcardReferenceBoundingTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8123    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener.CtIntersectionTypeReferenceBoundsReplaceListener(spoon.reflect.reference.CtIntersectionTypeReference)
8124    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener.set(java.util.List)
8125    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener.CtTypeAccessAccessedTypeReplaceListener(spoon.reflect.code.CtTypeAccess)
8126    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8127    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener.CtUnaryOperatorOperandReplaceListener(spoon.reflect.code.CtUnaryOperator)
8128    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener.set(spoon.reflect.code.CtExpression)
8129    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener.CtVariableAccessVariableReplaceListener(spoon.reflect.code.CtVariableAccess)
8130    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener.set(spoon.reflect.reference.CtVariableReference)
8131    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener.CtWhileLoopingExpressionReplaceListener(spoon.reflect.code.CtWhile)
8132    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener.set(spoon.reflect.code.CtExpression)
8133    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener.CtFieldAccessVariableReplaceListener(spoon.reflect.code.CtVariableAccess)
8134    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener.set(spoon.reflect.reference.CtFieldReference)
8135    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener.CtJavaDocTagsReplaceListener(spoon.reflect.code.CtJavaDoc)
8136    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener.set(java.util.List)
8137    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtImportReferenceReplaceListener.CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport)
8138    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtImportReferenceReplaceListener.set(spoon.reflect.reference.CtReference)
8139    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtModuleModuleDirectivesReplaceListener.CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule)
8140    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtModuleModuleDirectivesReplaceListener.set(java.util.List)
8141    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtModuleRootPackageReplaceListener.CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule)
8142    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtModuleRootPackageReplaceListener.set(spoon.reflect.declaration.CtPackage)
8143    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageExportPackageReferenceReplaceListener.CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport)
8144    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageExportPackageReferenceReplaceListener.set(spoon.reflect.reference.CtPackageReference)
8145    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageExportTargetExportReplaceListener.CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport)
8146    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageExportTargetExportReplaceListener.set(java.util.List)
8147    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtModuleRequirementModuleReferenceReplaceListener.CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement)
8148    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtModuleRequirementModuleReferenceReplaceListener.set(spoon.reflect.reference.CtModuleReference)
8149    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtProvidedServiceServiceTypeReplaceListener.CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService)
8150    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtProvidedServiceServiceTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8151    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtProvidedServiceImplementationTypesReplaceListener.CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService)
8152    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtProvidedServiceImplementationTypesReplaceListener.set(java.util.List)
8153    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtUsedServiceServiceTypeReplaceListener.CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService)
8154    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtUsedServiceServiceTypeReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8155    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitPackageDeclarationReplaceListener.CtCompilationUnitPackageDeclarationReplaceListener(spoon.reflect.declaration.CtCompilationUnit)
8156    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitPackageDeclarationReplaceListener.set(spoon.reflect.declaration.CtPackageDeclaration)
8157    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitImportsReplaceListener.CtCompilationUnitImportsReplaceListener(spoon.reflect.declaration.CtCompilationUnit)
8158    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitImportsReplaceListener.set(java.util.Collection)
8159    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitDeclaredModuleReferenceReplaceListener.CtCompilationUnitDeclaredModuleReferenceReplaceListener(spoon.reflect.declaration.CtCompilationUnit)
8160    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitDeclaredModuleReferenceReplaceListener.set(spoon.reflect.reference.CtModuleReference)
8161    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitDeclaredTypeReferencesReplaceListener.CtCompilationUnitDeclaredTypeReferencesReplaceListener(spoon.reflect.declaration.CtCompilationUnit)
8162    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtCompilationUnitDeclaredTypeReferencesReplaceListener.set(java.util.List)
8163    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageDeclarationReferenceReplaceListener.CtPackageDeclarationReferenceReplaceListener(spoon.reflect.declaration.CtPackageDeclaration)
8164    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtPackageDeclarationReferenceReplaceListener.set(spoon.reflect.reference.CtPackageReference)
8165    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeMemberWildcardImportReferenceTypeReferenceReplaceListener.CtTypeMemberWildcardImportReferenceTypeReferenceReplaceListener(spoon.reflect.reference.CtTypeMemberWildcardImportReference)
8166    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.CtTypeMemberWildcardImportReferenceTypeReferenceReplaceListener.set(spoon.reflect.reference.CtTypeReference)
8167    4   4    0 spoon.support.visitor.replace.ReplacementVisitor.replace(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
8168    4   3    0 spoon.support.visitor.replace.ReplacementVisitor.replace(spoon.reflect.declaration.CtElement,E)
8169    3   2    0 spoon.support.visitor.replace.ReplacementVisitor.ReplacementVisitor(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)
8170   22   8    0 spoon.support.visitor.replace.ReplacementVisitor.replaceInMapIfExist(V,spoon.support.visitor.replace.ReplaceMapListener)
8171   14   6    0 spoon.support.visitor.replace.ReplacementVisitor.replaceInSetIfExist(T,spoon.support.visitor.replace.ReplaceSetListener)
8172   19   7    0 spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(T,spoon.support.visitor.replace.ReplaceListListener)
8173   10   6    0 spoon.support.visitor.replace.ReplacementVisitor.replaceElementIfExist(spoon.reflect.declaration.CtElement,spoon.support.visitor.replace.ReplaceListener)
8174    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAnnotation(A)
8175    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAnnotationType(A)
8176    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable)
8177    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtArrayRead(T)
8178    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtArrayWrite(T)
8179    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtArrayTypeReference(T)
8180    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAssert(T)
8181    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAssignment(A)
8182    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtBinaryOperator(T)
8183    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtBlock(R)
8184    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtBreak(spoon.reflect.code.CtBreak)
8185    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCase(S)
8186    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCatch(spoon.reflect.code.CtCatch)
8187    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtClass(T)
8188    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter)
8189    8   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtConditional(T)
8190    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtConstructor(T)
8191    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtContinue(spoon.reflect.code.CtContinue)
8192    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtDo(spoon.reflect.code.CtDo)
8193    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtEnum(T)
8194    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtExecutableReference(T)
8195    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtField(T)
8196    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtEnumValue(T)
8197    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtThisAccess(T)
8198    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAnnotationFieldAccess(T)
8199    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtFieldReference(T)
8200    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(spoon.reflect.code.CtFor)
8201    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtForEach(spoon.reflect.code.CtForEach)
8202    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtIf(spoon.reflect.code.CtIf)
8203    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtInterface(T)
8204    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtInvocation(T)
8205    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtLiteral(T)
8206    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtLocalVariable(T)
8207    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtLocalVariableReference(T)
8208    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCatchVariable(T)
8209    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCatchVariableReference(T)
8210    8   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtMethod(T)
8211    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtAnnotationMethod(T)
8212    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtNewArray(T)
8213    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtConstructorCall(T)
8214    8   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtNewClass(T)
8215    8   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtLambda(T)
8216    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtExecutableReferenceExpression(E)
8217    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtOperatorAssignment(A)
8218    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtPackage(spoon.reflect.declaration.CtPackage)
8219    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtPackageReference(spoon.reflect.reference.CtPackageReference)
8220    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtParameter(T)
8221    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtParameterReference(T)
8222    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtReturn(R)
8223    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtStatementList(spoon.reflect.code.CtStatementList)
8224    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtSwitch(S)
8225    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtSynchronized(spoon.reflect.code.CtSynchronized)
8226    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtThrow(spoon.reflect.code.CtThrow)
8227    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTry(spoon.reflect.code.CtTry)
8228    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTryWithResource(spoon.reflect.code.CtTryWithResource)
8229    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference)
8230    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference)
8231    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtIntersectionTypeReference(T)
8232    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTypeReference(T)
8233    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTypeAccess(T)
8234    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtUnaryOperator(T)
8235    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtVariableRead(T)
8236    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtVariableWrite(T)
8237    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtWhile(spoon.reflect.code.CtWhile)
8238    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCodeSnippetExpression(T)
8239    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement)
8240    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtUnboundVariableReference(T)
8241    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtFieldRead(T)
8242    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtFieldWrite(T)
8243    6   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtSuperAccess(T)
8244    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtComment(spoon.reflect.code.CtComment)
8245    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtJavaDoc(spoon.reflect.code.CtJavaDoc)
8246    3   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtJavaDocTag(spoon.reflect.code.CtJavaDocTag)
8247    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtImport(spoon.reflect.declaration.CtImport)
8248    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtModule(spoon.reflect.declaration.CtModule)
8249    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtModuleReference(spoon.reflect.reference.CtModuleReference)
8250    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtPackageExport(spoon.reflect.declaration.CtPackageExport)
8251    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtModuleRequirement(spoon.reflect.declaration.CtModuleRequirement)
8252    5   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtProvidedService(spoon.reflect.declaration.CtProvidedService)
8253    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtUsedService(spoon.reflect.declaration.CtUsedService)
8254    7   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtCompilationUnit(spoon.reflect.declaration.CtCompilationUnit)
8255    4   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtPackageDeclaration(spoon.reflect.declaration.CtPackageDeclaration)
8256    2   1    0 spoon.support.visitor.replace.ReplacementVisitor.visitCtTypeMemberWildcardImportReference(spoon.reflect.reference.CtTypeMemberWildcardImportReference)
8257    1   1    0 spoon.support.visitor.replace.ReplaceListener.set(T)
8258    1   1    0 spoon.support.visitor.replace.InvalidReplaceException.InvalidReplaceException()
8259    2   1    0 spoon.support.visitor.replace.InvalidReplaceException.InvalidReplaceException(String)
8260    2   1    0 spoon.support.visitor.replace.InvalidReplaceException.InvalidReplaceException(Throwable)
8261    2   1    0 spoon.support.visitor.replace.InvalidReplaceException.InvalidReplaceException(String,Throwable)
8262    1   1    0 spoon.support.visitor.replace.ReplaceMapListener.set(T)
8263    1   1    0 spoon.support.visitor.replace.ReplaceListListener.set(T)
8264    1   1    0 spoon.support.visitor.replace.ReplaceSetListener.set(T)
8265    2   1    0 spoon.support.visitor.replace.CtListener.CtListener(CtElement)
8266    1   1    0 spoon.support.visitor.replace.CtListener.set(CtElement)
8267    3   2    0 spoon.support.visitor.HashcodeVisitor.scanCtNamedElement(CtNamedElement)
8268    2   1    0 spoon.support.visitor.HashcodeVisitor.scanCtReference(CtReference)
8269    3   2    0 spoon.support.visitor.HashcodeVisitor.visitCtImport(CtImport)
8270    3   1    0 spoon.support.visitor.HashcodeVisitor.scan(CtElement)
8271    2   1    0 spoon.support.visitor.HashcodeVisitor.getHasCode()
8272    2   1    1 spoon.support.visitor.ProcessingVisitor.ProcessingVisitor(Factory)
8273    7   7    0 spoon.support.visitor.ProcessingVisitor.canBeProcessed(CtElement)
8274    2   1    0 spoon.support.visitor.ProcessingVisitor.getProcessor()
8275   11   9    1 spoon.support.visitor.ProcessingVisitor.scan(CtElement)
8276    2   1    0 spoon.support.visitor.ProcessingVisitor.setProcessor(Processor)
8277    4   1    0 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.SpoonObjectTableModel(Object)
8278    2   1    0 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.getColumnCount()
8279    2   1    0 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.getColumnName(int)
8280    2   1    0 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.getRowCount()
8281   19  12    0 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.getValueAt(int,int)
8282    7   4    0 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectTableModel.scanFields(Class)
8283    3   1    1 spoon.support.gui.SpoonObjectFieldsTable.SpoonObjectFieldsTable(Object)
8284    6   2    1 spoon.support.gui.SpoonObjectFieldsTable.getJContentPane()
8285    5   2    1 spoon.support.gui.SpoonObjectFieldsTable.getJScrollPane()
8286    4   2    1 spoon.support.gui.SpoonObjectFieldsTable.getJTable()
8287    7   1    1 spoon.support.gui.SpoonObjectFieldsTable.initialize()
8288    4   1    0 spoon.support.gui.SpoonTreeBuilder.SpoonTreeBuilder()
8289    2   1    0 spoon.support.gui.SpoonTreeBuilder.DefaultMutableTreeNode$1.getASTNodeName()
8290   11   3    0 spoon.support.gui.SpoonTreeBuilder.DefaultMutableTreeNode$1.toString()
8291   19   2    0 spoon.support.gui.SpoonTreeBuilder.createNode(Object,CtRole)
8292    3   1    0 spoon.support.gui.SpoonTreeBuilder.scan(CtRole,CtElement)
8293    3   1    0 spoon.support.gui.SpoonTreeBuilder.enter(CtElement)
8294    3   1    0 spoon.support.gui.SpoonTreeBuilder.exit(CtElement)
8295    2   1    0 spoon.support.gui.SpoonTreeBuilder.getRoot()
8296    6   1    1 spoon.support.gui.SpoonModelTree.SpoonModelTree(Factory)
8297    6   1    0 spoon.support.gui.SpoonModelTree.SpoonModelTree(CtElement)
8298    8   2    1 spoon.support.gui.SpoonModelTree.getJContentPane()
8299    5   2    1 spoon.support.gui.SpoonModelTree.getJScrollPane()
8300    6   2    1 spoon.support.gui.SpoonModelTree.getJTree()
8301    9   3    0 spoon.support.gui.SpoonModelTree.ActionListener$1.actionPerformed(ActionEvent)
8302    5   2    0 spoon.support.gui.SpoonModelTree.ActionListener$1.actionPerformed(ActionEvent)
8303    2   1    0 spoon.support.gui.SpoonModelTree.ActionListener$1.actionPerformed(ActionEvent)
8304    2   1    0 spoon.support.gui.SpoonModelTree.ActionListener$1.actionPerformed(ActionEvent)
8305    5   2    0 spoon.support.gui.SpoonModelTree.ActionListener$1.actionPerformed(ActionEvent)
8306   45   2    0 spoon.support.gui.SpoonModelTree.getMenu()
8307    7   1    1 spoon.support.gui.SpoonModelTree.initialize()
8308    1   1    0 spoon.support.gui.SpoonModelTree.keyPressed(KeyEvent)
8309    1   1    0 spoon.support.gui.SpoonModelTree.keyReleased(KeyEvent)
8310   11   5    0 spoon.support.gui.SpoonModelTree.keyTyped(KeyEvent)
8311    3   2    0 spoon.support.gui.SpoonModelTree.maybeShowPopup(MouseEvent)
8312    1   1    0 spoon.support.gui.SpoonModelTree.mouseClicked(MouseEvent)
8313    1   1    0 spoon.support.gui.SpoonModelTree.mouseEntered(MouseEvent)
8314    1   1    0 spoon.support.gui.SpoonModelTree.mouseExited(MouseEvent)
8315    3   1    0 spoon.support.gui.SpoonModelTree.mousePressed(MouseEvent)
8316    2   1    0 spoon.support.gui.SpoonModelTree.mouseReleased(MouseEvent)
8317    8   6    1 spoon.support.gui.SpoonModelTree.next()
8318    9   4    1 spoon.support.gui.SpoonModelTree.search()
8319   13   5    0 spoon.support.gui.SpoonModelTree.Runnable$1.run()
8320   19   4    1 spoon.support.gui.SpoonModelTree.expandAll(DefaultMutableTreeNode)
8321    5   2    0 spoon.support.gui.SpoonModelTree.Runnable$1.run()
8322    7   1    0 spoon.support.gui.SpoonModelTree.expand(DefaultMutableTreeNode)
8323    4   1    0 spoon.support.gui.SpoonModelTree.setVisible(DefaultMutableTreeNode)
8324    2   1    1 spoon.support.DefaultCoreFactory.DefaultCoreFactory()
8325    2   1    0 spoon.support.DefaultCoreFactory.clone(T)
8326    4   1    0 spoon.support.DefaultCoreFactory.createAnnotation()
8327    5   1    0 spoon.support.DefaultCoreFactory.createAnnotationType()
8328    4   1    0 spoon.support.DefaultCoreFactory.createAnonymousExecutable()
8329    4   1    0 spoon.support.DefaultCoreFactory.createArrayRead()
8330    4   1    0 spoon.support.DefaultCoreFactory.createArrayWrite()
8331    4   1    0 spoon.support.DefaultCoreFactory.createArrayTypeReference()
8332    4   1    0 spoon.support.DefaultCoreFactory.createAssert()
8333    4   1    0 spoon.support.DefaultCoreFactory.createAssignment()
8334    4   1    0 spoon.support.DefaultCoreFactory.createBinaryOperator()
8335    4   1    0 spoon.support.DefaultCoreFactory.createBlock()
8336    4   1    0 spoon.support.DefaultCoreFactory.createBreak()
8337    4   1    0 spoon.support.DefaultCoreFactory.createCase()
8338    4   1    0 spoon.support.DefaultCoreFactory.createCatch()
8339    5   1    0 spoon.support.DefaultCoreFactory.createClass()
8340    4   1    0 spoon.support.DefaultCoreFactory.createTypeParameter()
8341    4   1    0 spoon.support.DefaultCoreFactory.createConditional()
8342    4   1    0 spoon.support.DefaultCoreFactory.createConstructor()
8343    4   1    0 spoon.support.DefaultCoreFactory.createInvisibleArrayConstructor()
8344    4   1    0 spoon.support.DefaultCoreFactory.createContinue()
8345    4   1    0 spoon.support.DefaultCoreFactory.createDo()
8346    5   1    0 spoon.support.DefaultCoreFactory.createEnum()
8347    4   1    0 spoon.support.DefaultCoreFactory.createExecutableReference()
8348    4   1    0 spoon.support.DefaultCoreFactory.createField()
8349    4   1    0 spoon.support.DefaultCoreFactory.createEnumValue()
8350    4   1    0 spoon.support.DefaultCoreFactory.createFieldRead()
8351    4   1    0 spoon.support.DefaultCoreFactory.createFieldWrite()
8352    4   1    0 spoon.support.DefaultCoreFactory.createAnnotationFieldAccess()
8353    4   1    0 spoon.support.DefaultCoreFactory.createUnboundVariableReference()
8354    4   1    0 spoon.support.DefaultCoreFactory.createFieldReference()
8355    4   1    0 spoon.support.DefaultCoreFactory.createFor()
8356    4   1    0 spoon.support.DefaultCoreFactory.createForEach()
8357    4   1    0 spoon.support.DefaultCoreFactory.createIf()
8358    5   1    0 spoon.support.DefaultCoreFactory.createInterface()
8359    4   1    0 spoon.support.DefaultCoreFactory.createInvocation()
8360    4   1    0 spoon.support.DefaultCoreFactory.createLiteral()
8361    4   1    0 spoon.support.DefaultCoreFactory.createLocalVariable()
8362    4   1    0 spoon.support.DefaultCoreFactory.createLocalVariableReference()
8363    4   1    0 spoon.support.DefaultCoreFactory.createCatchVariable()
8364    4   1    0 spoon.support.DefaultCoreFactory.createCatchVariableReference()
8365    4   1    0 spoon.support.DefaultCoreFactory.createMethod()
8366    4   1    0 spoon.support.DefaultCoreFactory.createAnnotationMethod()
8367    4   1    0 spoon.support.DefaultCoreFactory.createNewArray()
8368    4   1    0 spoon.support.DefaultCoreFactory.createConstructorCall()
8369    4   1    0 spoon.support.DefaultCoreFactory.createNewClass()
8370    4   1    0 spoon.support.DefaultCoreFactory.createLambda()
8371    4   1    0 spoon.support.DefaultCoreFactory.createExecutableReferenceExpression()
8372    4   1    0 spoon.support.DefaultCoreFactory.createOperatorAssignment()
8373    5   1    0 spoon.support.DefaultCoreFactory.createPackage()
8374    4   1    0 spoon.support.DefaultCoreFactory.createPackageReference()
8375    4   1    0 spoon.support.DefaultCoreFactory.createParameter()
8376    4   1    0 spoon.support.DefaultCoreFactory.createParameterReference()
8377    4   1    0 spoon.support.DefaultCoreFactory.createReturn()
8378    4   1    0 spoon.support.DefaultCoreFactory.createStatementList()
8379    4   1    0 spoon.support.DefaultCoreFactory.createSwitch()
8380    4   1    0 spoon.support.DefaultCoreFactory.createSynchronized()
8381    4   1    0 spoon.support.DefaultCoreFactory.createThrow()
8382    4   1    0 spoon.support.DefaultCoreFactory.createTry()
8383    4   1    0 spoon.support.DefaultCoreFactory.createTryWithResource()
8384    4   1    0 spoon.support.DefaultCoreFactory.createTypeParameterReference()
8385    4   1    0 spoon.support.DefaultCoreFactory.createWildcardReference()
8386    4   1    0 spoon.support.DefaultCoreFactory.createIntersectionTypeReference()
8387    4   1    0 spoon.support.DefaultCoreFactory.createTypeReference()
8388    4   1    0 spoon.support.DefaultCoreFactory.createTypeAccess()
8389    4   1    0 spoon.support.DefaultCoreFactory.createUnaryOperator()
8390    4   1    0 spoon.support.DefaultCoreFactory.createVariableRead()
8391    4   1    0 spoon.support.DefaultCoreFactory.createVariableWrite()
8392    4   1    0 spoon.support.DefaultCoreFactory.createCodeSnippetExpression()
8393    4   1    0 spoon.support.DefaultCoreFactory.createCodeSnippetStatement()
8394    6   1    0 spoon.support.DefaultCoreFactory.createComment()
8395    4   1    0 spoon.support.DefaultCoreFactory.createJavaDoc()
8396    4   1    0 spoon.support.DefaultCoreFactory.createJavaDocTag()
8397    4   1    0 spoon.support.DefaultCoreFactory.createWhile()
8398    4   1    0 spoon.support.DefaultCoreFactory.createImport()
8399    4   1    0 spoon.support.DefaultCoreFactory.createPackageDeclaration()
8400    2   1    0 spoon.support.DefaultCoreFactory.getMainFactory()
8401    2   1    0 spoon.support.DefaultCoreFactory.setMainFactory(Factory)
8402    2   1    0 spoon.support.DefaultCoreFactory.createSourcePosition(CompilationUnit,int,int,int[])
8403    2   1    0 spoon.support.DefaultCoreFactory.createPartialSourcePosition(CompilationUnit)
8404    2   1    0 spoon.support.DefaultCoreFactory.createCompoundSourcePosition(CompilationUnit,int,int,int,int,int[])
8405    2   1    0 spoon.support.DefaultCoreFactory.createDeclarationSourcePosition(CompilationUnit,int,int,int,int,int,int,int[])
8406    2   1    0 spoon.support.DefaultCoreFactory.createBodyHolderSourcePosition(CompilationUnit,int,int,int,int,int,int,int,int,int[])
8407    4   1    0 spoon.support.DefaultCoreFactory.createCompilationUnit()
8408    4   1    0 spoon.support.DefaultCoreFactory.createThisAccess()
8409    4   1    0 spoon.support.DefaultCoreFactory.createSuperAccess()
8410  168 168    0 spoon.support.DefaultCoreFactory.create(CtElement)
8411    4   1    0 spoon.support.DefaultCoreFactory.createTypeMemberWildcardImportReference()
8412    5   1    0 spoon.support.DefaultCoreFactory.createModule()
8413    4   1    0 spoon.support.DefaultCoreFactory.createModuleReference()
8414    4   1    0 spoon.support.DefaultCoreFactory.createModuleRequirement()
8415    4   1    0 spoon.support.DefaultCoreFactory.createPackageExport()
8416    4   1    0 spoon.support.DefaultCoreFactory.createProvidedService()
8417    4   1    0 spoon.support.DefaultCoreFactory.createUsedService()
8418    1   1    0 spoon.support.OutputDestinationHandler.getOutputPath(CtModule,CtPackage,CtType)
8419    1   1    0 spoon.support.OutputDestinationHandler.getDefaultOutputDirectory()
8420    3   1    0 spoon.support.sniper.internal.TokenType.TokenType(boolean,boolean)
8421    2   1    0 spoon.support.sniper.internal.TokenType.isWhiteSpace()
8422    2   1    0 spoon.support.sniper.internal.TokenType.isTab()
8423    1   1    1 spoon.support.sniper.internal.SourceFragmentContext.onPrintEvent(PrinterEvent)
8424    1   1    1 spoon.support.sniper.internal.SourceFragmentContext.onFinished()
8425    1   1    1 spoon.support.sniper.internal.SourceFragmentContext.matchesPrinterEvent(PrinterEvent)
8426    1   1    0 spoon.support.sniper.internal.SourceFragmentContextPrettyPrint.SourceFragmentContextPrettyPrint()
8427    2   1    0 spoon.support.sniper.internal.SourceFragmentContextPrettyPrint.onPrintEvent(PrinterEvent)
8428    1   1    0 spoon.support.sniper.internal.SourceFragmentContextPrettyPrint.onFinished()
8429    2   1    0 spoon.support.sniper.internal.SourceFragmentContextPrettyPrint.matchesPrinterEvent(PrinterEvent)
8430    1   1    1 spoon.support.sniper.internal.SourceFragment.getSourceCode()
8431    1   1    1 spoon.support.sniper.internal.PrinterEvent.getRole()
8432    1   1    1 spoon.support.sniper.internal.PrinterEvent.print(Boolean)
8433    1   1    1 spoon.support.sniper.internal.PrinterEvent.printSourceFragment(SourceFragment,Boolean)
8434    1   1    1 spoon.support.sniper.internal.PrinterEvent.getElement()
8435    1   1    1 spoon.support.sniper.internal.PrinterEvent.getToken()
8436    1   1    1 spoon.support.sniper.internal.PrinterEvent.isWhitespace()
8437    4   2    0 spoon.support.sniper.internal.ChangeResolver.ChangeResolver(ChangeCollector,CtElement)
8438    4   2    0 spoon.support.sniper.internal.ChangeResolver.EarlyTerminatingScanner$1.enter(CtElement)
8439   12   4    1 spoon.support.sniper.internal.ChangeResolver.isElementExists(SourcePositionHolder)
8440    4   3    1 spoon.support.sniper.internal.ChangeResolver.getChanges(SourcePositionHolder)
8441    4   3    1 spoon.support.sniper.internal.ChangeResolver.isRoleModified(CtRole)
8442    2   1    1 spoon.support.sniper.internal.ChangeResolver.hasChangedRole()
8443    2   1    1 spoon.support.sniper.internal.ChangeResolver.getChangeCollector()
8444    2   1    1 spoon.support.sniper.internal.SourceFragmentContextSet.SourceFragmentContextSet(MutableTokenWriter,CtElement,SourceFragment,ChangeResolver)
8445    4   1    0 spoon.support.sniper.internal.TokenPrinterEvent.TokenPrinterEvent(TokenType,String,CtComment)
8446    6   5    0 spoon.support.sniper.internal.TokenPrinterEvent.getRole()
8447    2   1    0 spoon.support.sniper.internal.TokenPrinterEvent.getElement()
8448    2   1    0 spoon.support.sniper.internal.TokenPrinterEvent.getToken()
8449    2   2    0 spoon.support.sniper.internal.TokenPrinterEvent.isModifierKeyword(TokenType,String)
8450    2   1    0 spoon.support.sniper.internal.TokenPrinterEvent.isWhitespace()
8451    2   1    0 spoon.support.sniper.internal.TokenPrinterEvent.getType()
8452    2   1    0 spoon.support.sniper.internal.TokenPrinterEvent.toString()
8453    3   1    0 spoon.support.sniper.internal.ElementPrinterEvent.ElementPrinterEvent(CtRole,SourcePositionHolder)
8454    2   1    0 spoon.support.sniper.internal.ElementPrinterEvent.getRole()
8455    2   1    0 spoon.support.sniper.internal.ElementPrinterEvent.getElement()
8456    2   1    0 spoon.support.sniper.internal.ElementPrinterEvent.getToken()
8457    2   1    0 spoon.support.sniper.internal.ElementPrinterEvent.isWhitespace()
8458    2   1    0 spoon.support.sniper.internal.ElementPrinterEvent.toString()
8459    2   1    0 spoon.support.sniper.internal.CollectionSourceFragment.CollectionSourceFragment(SourceFragment)
8460    5   2    0 spoon.support.sniper.internal.CollectionSourceFragment.getSourceCode()
8461    2   1    1 spoon.support.sniper.internal.CollectionSourceFragment.getItems()
8462    2   1    0 spoon.support.sniper.internal.CollectionSourceFragment.toString()
8463   14   8    1 spoon.support.sniper.internal.CollectionSourceFragment.isOrdered()
8464    2   1    1 spoon.support.sniper.internal.SourceFragmentContextList.SourceFragmentContextList(MutableTokenWriter,CtElement,SourceFragment,ChangeResolver)
8465    5   3    0 spoon.support.sniper.internal.SourceFragmentContextList.findIndexOfNextChildTokenOfEvent(PrinterEvent)
8466    2   1    0 spoon.support.sniper.internal.SourceFragmentContextList.printOriginSpacesUntilFragmentIndex(int)
8467    7   4    1 spoon.support.sniper.internal.SourceFragmentContextList.getLastWhiteSpaceBefore(int)
8468    2   1    0 spoon.support.sniper.internal.AbstractSourceFragmentContextCollection.AbstractSourceFragmentContextCollection(MutableTokenWriter,SourceFragment,ChangeResolver)
8469   18  15    0 spoon.support.sniper.internal.AbstractSourceFragmentContextCollection.matchesPrinterEvent(PrinterEvent)
8470    2   1    0 spoon.support.sniper.internal.AbstractSourceFragmentContextCollection.isFragmentModified(SourceFragment)
8471    6   4    1 spoon.support.sniper.internal.AbstractSourceFragmentContextCollection.getSuffixSpace()
8472    7   3    0 spoon.support.sniper.internal.AbstractSourceFragmentContextCollection.onFinished()
8473    2   1    0 spoon.support.sniper.internal.MutableTokenWriter.MutableTokenWriter(Environment)
8474    2   1    1 spoon.support.sniper.internal.MutableTokenWriter.isMuted()
8475    2   1    1 spoon.support.sniper.internal.MutableTokenWriter.setMuted(boolean)
8476    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeSeparator(String)
8477    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeOperator(String)
8478    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeLiteral(String)
8479    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeKeyword(String)
8480    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeIdentifier(String)
8481    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeCodeSnippet(String)
8482    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeComment(CtComment)
8483    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeln()
8484    5   3    0 spoon.support.sniper.internal.MutableTokenWriter.incTab()
8485    5   3    0 spoon.support.sniper.internal.MutableTokenWriter.decTab()
8486    2   1    0 spoon.support.sniper.internal.MutableTokenWriter.getPrinterHelper()
8487    4   3    0 spoon.support.sniper.internal.MutableTokenWriter.reset()
8488    6   3    0 spoon.support.sniper.internal.MutableTokenWriter.writeSpace()
8489    2   1    0 spoon.support.sniper.internal.MutableTokenWriter.toString()
8490    2   1    1 spoon.support.sniper.internal.SourceFragmentContextNormal.SourceFragmentContextNormal(MutableTokenWriter,ElementSourceFragment,ChangeResolver)
8491    2   1    0 spoon.support.sniper.internal.SourceFragmentContextNormal.matchesPrinterEvent(PrinterEvent)
8492    3   2    0 spoon.support.sniper.internal.SourceFragmentContextNormal.onFinished()
8493    2   1    0 spoon.support.sniper.internal.DirectPrinterHelper.DirectPrinterHelper(Environment)
8494    7   2    1 spoon.support.sniper.internal.DirectPrinterHelper.directPrint(String)
8495    2   1    1 spoon.support.sniper.internal.DirectPrinterHelper.setShouldWriteTabs(boolean)
8496    3   1    0 spoon.support.sniper.internal.TokenSourceFragment.TokenSourceFragment(String,TokenType)
8497    2   1    0 spoon.support.sniper.internal.TokenSourceFragment.getSourceCode()
8498    2   1    1 spoon.support.sniper.internal.TokenSourceFragment.getType()
8499    2   1    0 spoon.support.sniper.internal.TokenSourceFragment.toString()
8500    4   3    0 spoon.support.compiler.ZipFolder.ZipFolder(File)
8501    2   1    0 spoon.support.compiler.ZipFolder.getAllFiles()
8502    6   3    0 spoon.support.compiler.ZipFolder.getAllJavaFiles()
8503   15   5    0 spoon.support.compiler.ZipFolder.getFiles()
8504    2   1    0 spoon.support.compiler.ZipFolder.getName()
8505    5   3    0 spoon.support.compiler.ZipFolder.getParent()
8506    2   1    0 spoon.support.compiler.ZipFolder.getSubFolders()
8507    2   1    0 spoon.support.compiler.ZipFolder.isFile()
8508    2   1    0 spoon.support.compiler.ZipFolder.toString()
8509    5   3    0 spoon.support.compiler.ZipFolder.getPath()
8510    2   1    0 spoon.support.compiler.ZipFolder.isArchive()
8511    2   1    0 spoon.support.compiler.ZipFolder.getFileSystemParent()
8512    2   1    0 spoon.support.compiler.ZipFolder.toFile()
8513    2   1    0 spoon.support.compiler.ZipFolder.equals(Object)
8514    2   1    0 spoon.support.compiler.ZipFolder.hashCode()
8515    2   2    0 spoon.support.compiler.ZipFolder.addFile(SpoonFile)
8516    2   2    0 spoon.support.compiler.ZipFolder.addFolder(SpoonFolder)
8517   16   5    1 spoon.support.compiler.ZipFolder.extract(File)
8518    2   1    0 spoon.support.compiler.SnippetCompilationError.SnippetCompilationError(String)
8519    4   1    0 spoon.support.compiler.SnippetCompilationError.SnippetCompilationError(String)
8520    2   1    0 spoon.support.compiler.VirtualFile.VirtualFile(String)
8521    3   1    0 spoon.support.compiler.VirtualFile.VirtualFile(String,String)
8522    2   1    0 spoon.support.compiler.VirtualFile.getContent()
8523    2   1    0 spoon.support.compiler.VirtualFile.getContentChars(Environment)
8524    2   1    0 spoon.support.compiler.VirtualFile.isJava()
8525    2   1    0 spoon.support.compiler.VirtualFile.getName()
8526    2   1    0 spoon.support.compiler.VirtualFile.getParent()
8527    2   1    0 spoon.support.compiler.VirtualFile.getFileSystemParent()
8528    2   1    0 spoon.support.compiler.VirtualFile.getPath()
8529    2   1    0 spoon.support.compiler.VirtualFile.isFile()
8530    2   1    0 spoon.support.compiler.VirtualFile.isArchive()
8531    2   1    0 spoon.support.compiler.VirtualFile.toFile()
8532    2   1    0 spoon.support.compiler.VirtualFile.isActualFile()
8533    5   3    1 spoon.support.compiler.FilteringFolder.removeAllThatMatch(String)
8534    1   1    0 spoon.support.compiler.SnippetCompilationHelper.SnippetCompilationHelper()
8535   21   4    1 spoon.support.compiler.SnippetCompilationHelper.compileAndReplaceSnippetsIn(CtType)
8536    2   1    0 spoon.support.compiler.SnippetCompilationHelper.compileStatement(CtCodeSnippetStatement)
8537    2   1    0 spoon.support.compiler.SnippetCompilationHelper.compileStatement(CtCodeSnippetStatement,CtTypeReference)
8538   16   2    0 spoon.support.compiler.SnippetCompilationHelper.internalCompileStatement(CtElement,CtTypeReference)
8539    6   1    0 spoon.support.compiler.SnippetCompilationHelper.compileExpression(T)
8540    5   3    0 spoon.support.compiler.SnippetCompilationHelper.build(Factory,String)
8541   17   3    0 spoon.support.compiler.SnippetCompilationHelper.createWrapperContent(CtElement,Factory,CtTypeReference)
8542    4   1    0 spoon.support.compiler.ZipFile.ZipFile(ZipFolder,String,String[])
8543    2   1    0 spoon.support.compiler.ZipFile.getContent()
8544    2   1    0 spoon.support.compiler.ZipFile.getName()
8545    2   1    0 spoon.support.compiler.ZipFile.getParent()
8546    2   1    0 spoon.support.compiler.ZipFile.getFileSystemParent()
8547    2   1    0 spoon.support.compiler.ZipFile.isFile()
8548    2   1    0 spoon.support.compiler.ZipFile.isJava()
8549    2   1    0 spoon.support.compiler.ZipFile.getPath()
8550    2   1    0 spoon.support.compiler.ZipFile.toString()
8551    2   1    0 spoon.support.compiler.ZipFile.isArchive()
8552    2   1    0 spoon.support.compiler.ZipFile.toFile()
8553    2   1    0 spoon.support.compiler.ZipFile.isActualFile()
8554    2   1    0 spoon.support.compiler.ZipFile.equals(Object)
8555    2   1    0 spoon.support.compiler.ZipFile.hashCode()
8556    6   5    0 spoon.support.compiler.FileSystemFolder.FileSystemFolder(File)
8557    2   1    0 spoon.support.compiler.FileSystemFolder.FileSystemFolder(String)
8558    5   2    0 spoon.support.compiler.FileSystemFolder.getAllFiles()
8559    7   3    0 spoon.support.compiler.FileSystemFolder.getFiles()
8560    2   1    0 spoon.support.compiler.FileSystemFolder.getName()
8561    5   3    0 spoon.support.compiler.FileSystemFolder.getParent()
8562    9   5    0 spoon.support.compiler.FileSystemFolder.getSubFolders()
8563    2   1    0 spoon.support.compiler.FileSystemFolder.isFile()
8564    2   1    0 spoon.support.compiler.FileSystemFolder.toString()
8565    8   4    0 spoon.support.compiler.FileSystemFolder.getAllJavaFiles()
8566    2   1    0 spoon.support.compiler.FileSystemFolder.getPath()
8567    2   1    0 spoon.support.compiler.FileSystemFolder.isArchive()
8568    2   1    0 spoon.support.compiler.FileSystemFolder.getFileSystemParent()
8569    2   1    0 spoon.support.compiler.FileSystemFolder.toFile()
8570    4   3    0 spoon.support.compiler.FileSystemFolder.equals(Object)
8571    2   1    0 spoon.support.compiler.FileSystemFolder.hashCode()
8572    2   2    0 spoon.support.compiler.FileSystemFolder.addFile(SpoonFile)
8573    2   2    0 spoon.support.compiler.FileSystemFolder.addFolder(SpoonFolder)
8574    1   1    0 spoon.support.compiler.jdt.JDTTreeBuilderQuery.JDTTreeBuilderQuery()
8575    8   8    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchTypeBinding(ReferenceBinding,String)
8576   12  11    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchTypeBinding(String,CompilationUnitDeclaration[])
8577    8   7    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchType(String,ImportReference[])
8578   17   8    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.searchPackage(ImportReference[][],CompilationUnitDeclaration[])
8579   20  16    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.hasAnnotationWithType(Annotation,CtAnnotatedElementType)
8580    2   4    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.isValidProblemBindingField(QualifiedNameReference)
8581    2   2    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.isLhsAssignment(ContextBuilder,Expression)
8582   11   9    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.getUnaryOperator(int)
8583   47  45    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.getBinaryOperatorKind(int)
8584   25  13    1 spoon.support.compiler.jdt.JDTTreeBuilderQuery.getModifiers(int,boolean,boolean)
8585    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.JDTTreeBuilderHelper(JDTTreeBuilder)
8586    3   1    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.computeAnonymousName(String[])
8587    6   2    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createQualifiedTypeName(String[][])
8588   10   3    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createCatchVariable(TypeReference)
8589    7   2    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createVariableAccess(T,boolean)
8590    8   2    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createVariableAccess(SingleNameReference)
8591   35  12    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createVariableAccessNoClasspath(SingleNameReference)
8592   44  14    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createVariableAccess(QualifiedNameReference)
8593    9   2    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createFieldAccess(T,CtExpression,boolean)
8594   15   6    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createFieldAccess(SingleNameReference)
8595   14   4    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createFieldAccessNoClasspath(SingleNameReference)
8596   11   1    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createFieldAccessNoClasspath(QualifiedNameReference)
8597    9   2    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createFieldAccess(FieldReference)
8598    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.JDTTreeBuilder.OnAccessListener$1.onAccess(boolean[][],int)
8599   17   4    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createTypeAccess(QualifiedNameReference,CtFieldReference)
8600   24   5    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createTypeAccessNoClasspath(QualifiedNameReference)
8601    8   2    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createTypeAccessNoClasspath(SingleNameReference)
8602   11   5    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createTargetFieldAccess(QualifiedNameReference,Object)
8603   11   5    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createParameter(Argument)
8604   11   3    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createExecutableReferenceExpression(ReferenceExpression)
8605   28  11    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createType(TypeDeclaration)
8606   31  16    1 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createModule(ModuleDeclaration)
8607    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createUsedService(UsesStatement)
8608   13   3    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createModuleRequirement(RequiresStatement)
8609   13   4    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createModuleExport(ExportsStatement)
8610   13   4    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createModuleExport(OpensStatement)
8611   11   2    0 spoon.support.compiler.jdt.JDTTreeBuilderHelper.createModuleProvidedService(ProvidesStatement)
8612    1   1    0 spoon.support.compiler.jdt.FactoryCompilerConfig.FactoryCompilerConfig()
8613    7   3    1 spoon.support.compiler.jdt.FactoryCompilerConfig.initializeCompiler(JDTBatchCompiler)
8614    3   1    0 spoon.support.compiler.jdt.JDTSnippetCompiler.JDTSnippetCompiler(Factory,String)
8615    2   1    0 spoon.support.compiler.jdt.JDTSnippetCompiler.build()
8616   16   5    0 spoon.support.compiler.jdt.JDTSnippetCompiler.build(JDTBuilder)
8617    2   1    0 spoon.support.compiler.jdt.JDTSnippetCompiler.buildSources(JDTBuilder)
8618    3   3    0 spoon.support.compiler.jdt.JDTSnippetCompiler.report(Environment,CategorizedProblem)
8619    2   1    1 spoon.support.compiler.jdt.JDTSnippetCompiler.getSnippetCompilationUnit()
8620    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getLogger()
8621    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getPositionBuilder()
8622    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getContextBuilder()
8623    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getReferencesBuilder()
8624    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getHelper()
8625    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getExiter()
8626    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.getFactory()
8627    8   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.JDTTreeBuilder(Factory)
8628    1   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.OnAccessListener.onAccess(boolean[][],int)
8629    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.SpoonReferenceBinding.SpoonReferenceBinding(ReferenceBinding[],ReferenceBinding)
8630    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.SpoonReferenceBinding.enclosingType()
8631    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(AllocationExpression,BlockScope)
8632    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(AND_AND_Expression,BlockScope)
8633    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(AnnotationMethodDeclaration,ClassScope)
8634    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(Argument,BlockScope)
8635    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayAllocationExpression,BlockScope)
8636    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayInitializer,BlockScope)
8637    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayReference,BlockScope)
8638    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayTypeReference,BlockScope)
8639    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayTypeReference,ClassScope)
8640    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayQualifiedTypeReference,BlockScope)
8641    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ArrayQualifiedTypeReference,ClassScope)
8642    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(AssertStatement,BlockScope)
8643    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(Assignment,BlockScope)
8644    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(BinaryExpression,BlockScope)
8645    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(Block,BlockScope)
8646    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(BreakStatement,BlockScope)
8647    1   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(CaseStatement,BlockScope)
8648    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(CharLiteral,BlockScope)
8649    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ClassLiteralAccess,BlockScope)
8650    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(CompoundAssignment,BlockScope)
8651    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ConditionalExpression,BlockScope)
8652    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ConstructorDeclaration,ClassScope)
8653    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ContinueStatement,BlockScope)
8654    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(DoStatement,BlockScope)
8655    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(DoubleLiteral,BlockScope)
8656    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(EqualExpression,BlockScope)
8657    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ExplicitConstructorCall,BlockScope)
8658    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ExtendedStringLiteral,BlockScope)
8659    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(FalseLiteral,BlockScope)
8660    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(FieldDeclaration,MethodScope)
8661    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(FieldReference,BlockScope)
8662    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(FloatLiteral,BlockScope)
8663    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ForeachStatement,BlockScope)
8664    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ForStatement,BlockScope)
8665    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(IfStatement,BlockScope)
8666    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(Initializer,MethodScope)
8667    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(InstanceOfExpression,BlockScope)
8668    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(IntLiteral,BlockScope)
8669   18   5    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(LabeledStatement,BlockScope)
8670    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(LocalDeclaration,BlockScope)
8671    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(LongLiteral,BlockScope)
8672    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(NormalAnnotation,ClassScope)
8673    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(MarkerAnnotation,ClassScope)
8674    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(MarkerAnnotation,BlockScope)
8675    3   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(MemberValuePair,ClassScope)
8676    3   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(MemberValuePair,BlockScope)
8677    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(MessageSend,BlockScope)
8678    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(MethodDeclaration,ClassScope)
8679    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(NormalAnnotation,BlockScope)
8680    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(NullLiteral,BlockScope)
8681    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(OR_OR_Expression,BlockScope)
8682    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ParameterizedQualifiedTypeReference,ClassScope)
8683    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ParameterizedQualifiedTypeReference,BlockScope)
8684    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ParameterizedSingleTypeReference,BlockScope)
8685    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ParameterizedSingleTypeReference,ClassScope)
8686    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(PostfixExpression,BlockScope)
8687    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(PrefixExpression,BlockScope)
8688    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedAllocationExpression,BlockScope)
8689    3   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedNameReference,BlockScope)
8690    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedThisReference,BlockScope)
8691    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedTypeReference,BlockScope)
8692    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedTypeReference,ClassScope)
8693    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ReturnStatement,BlockScope)
8694    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SingleMemberAnnotation,BlockScope)
8695    3   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SingleNameReference,BlockScope)
8696    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SingleTypeReference,BlockScope)
8697    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SingleTypeReference,ClassScope)
8698    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(StringLiteral,BlockScope)
8699    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(StringLiteralConcatenation,BlockScope)
8700    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedSuperReference,BlockScope)
8701    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SuperReference,BlockScope)
8702    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(QualifiedThisReference,ClassScope)
8703    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ThisReference,BlockScope)
8704    4   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SwitchStatement,BlockScope)
8705    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(SynchronizedStatement,BlockScope)
8706    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ThrowStatement,BlockScope)
8707    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TrueLiteral,BlockScope)
8708    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TryStatement,BlockScope)
8709    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TypeParameter,BlockScope)
8710    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TypeParameter,ClassScope)
8711    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TypeDeclaration,BlockScope)
8712    3   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TypeDeclaration,ClassScope)
8713    3   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(TypeDeclaration,CompilationUnitScope)
8714    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(UnaryExpression,BlockScope)
8715    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(WhileStatement,BlockScope)
8716    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(CompilationUnitDeclaration,CompilationUnitScope)
8717    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(Javadoc,BlockScope)
8718    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(Javadoc,ClassScope)
8719   24   9    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(CompilationUnitDeclaration,CompilationUnitScope)
8720    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ReferenceExpression,BlockScope)
8721    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(ReferenceExpression,BlockScope)
8722    8   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(LambdaExpression,BlockScope)
8723    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(LambdaExpression,BlockScope)
8724    9   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(AllocationExpression,BlockScope)
8725    9   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedAllocationExpression,BlockScope)
8726    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(AND_AND_Expression,BlockScope)
8727    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(AnnotationMethodDeclaration,ClassScope)
8728    6   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(Argument,BlockScope)
8729    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayAllocationExpression,BlockScope)
8730    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayInitializer,BlockScope)
8731    8   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayReference,BlockScope)
8732    7   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayTypeReference,BlockScope)
8733    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayTypeReference,ClassScope)
8734    7   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayQualifiedTypeReference,BlockScope)
8735    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ArrayQualifiedTypeReference,ClassScope)
8736    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(AssertStatement,BlockScope)
8737    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(Assignment,BlockScope)
8738    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(CompoundAssignment,BlockScope)
8739    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(BinaryExpression,BlockScope)
8740    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(Block,BlockScope)
8741    6   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(BreakStatement,BlockScope)
8742    7   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(CastExpression,BlockScope)
8743    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(CharLiteral,BlockScope)
8744    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ClassLiteralAccess,BlockScope)
8745    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ConditionalExpression,BlockScope)
8746   16   6    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(MethodDeclaration,ClassScope)
8747   12   4    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ConstructorDeclaration,ClassScope)
8748    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TypeParameter,ClassScope)
8749    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TypeParameter,BlockScope)
8750    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visitTypeParameter(TypeParameter,Scope)
8751    6   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ContinueStatement,BlockScope)
8752    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(DoStatement,BlockScope)
8753    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(DoubleLiteral,BlockScope)
8754    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(EqualExpression,BlockScope)
8755    8   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ExplicitConstructorCall,BlockScope)
8756    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ExtendedStringLiteral,BlockScope)
8757    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(FalseLiteral,BlockScope)
8758   18   8    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(FieldDeclaration,MethodScope)
8759    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(FieldReference,BlockScope)
8760    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(FloatLiteral,BlockScope)
8761    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ForeachStatement,BlockScope)
8762    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ForStatement,BlockScope)
8763    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(IfStatement,BlockScope)
8764    6   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(Initializer,MethodScope)
8765    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(InstanceOfExpression,BlockScope)
8766    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(IntLiteral,BlockScope)
8767    6   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(LabeledStatement,BlockScope)
8768   12   4    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(LocalDeclaration,BlockScope)
8769    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(LongLiteral,BlockScope)
8770    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(NormalAnnotation,ClassScope)
8771    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(NormalAnnotation,BlockScope)
8772    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(MarkerAnnotation,ClassScope)
8773    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(MarkerAnnotation,BlockScope)
8774    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SingleMemberAnnotation,BlockScope)
8775    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visitNormalAnnotation(NormalAnnotation,Scope)
8776    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visitMarkerAnnotation(Annotation,Scope)
8777    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(MemberValuePair,ClassScope)
8778    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(MemberValuePair,BlockScope)
8779   10   5    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(MessageSend,BlockScope)
8780    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(NullLiteral,BlockScope)
8781    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(OR_OR_Expression,BlockScope)
8782    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ParameterizedQualifiedTypeReference,BlockScope)
8783    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ParameterizedQualifiedTypeReference,ClassScope)
8784    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ParameterizedSingleTypeReference,BlockScope)
8785    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ParameterizedSingleTypeReference,ClassScope)
8786    7   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.createParameterizedType(TypeReference)
8787    8   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(PostfixExpression,BlockScope)
8788    8   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(PrefixExpression,BlockScope)
8789   18  10    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedNameReference,BlockScope)
8790   12   7    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedTypeReference,BlockScope)
8791    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedTypeReference,ClassScope)
8792    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ReturnStatement,BlockScope)
8793   22   9    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SingleNameReference,BlockScope)
8794    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedSuperReference,BlockScope)
8795    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SuperReference,BlockScope)
8796    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(QualifiedThisReference,BlockScope)
8797    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ThisReference,BlockScope)
8798    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(UnionTypeReference,BlockScope)
8799    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.endVisit(UnionTypeReference,ClassScope)
8800    5   3    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(UnionTypeReference,BlockScope)
8801    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(UnionTypeReference,ClassScope)
8802   18   8    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SingleTypeReference,BlockScope)
8803    2   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SingleTypeReference,ClassScope)
8804    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(StringLiteral,BlockScope)
8805    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(StringLiteralConcatenation,BlockScope)
8806    5   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(CaseStatement,BlockScope)
8807    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SwitchStatement,BlockScope)
8808    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(SynchronizedStatement,BlockScope)
8809    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ThrowStatement,BlockScope)
8810    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TrueLiteral,BlockScope)
8811    8   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TryStatement,BlockScope)
8812   10   2    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TypeDeclaration,BlockScope)
8813    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TypeDeclaration,ClassScope)
8814   18   9    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(TypeDeclaration,CompilationUnitScope)
8815    5   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(UnaryExpression,BlockScope)
8816    3   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(WhileStatement,BlockScope)
8817    4   1    0 spoon.support.compiler.jdt.JDTTreeBuilder.visit(ModuleDeclaration,CompilationUnitScope)
8818    7   1    0 spoon.support.compiler.jdt.JDTImportBuilder.JDTImportBuilder(CompilationUnitDeclaration,Factory)
8819   30  12    0 spoon.support.compiler.jdt.JDTImportBuilder.build()
8820    7   1    0 spoon.support.compiler.jdt.JDTImportBuilder.createImportWithPosition(CtReference,ImportReference)
8821   15   9    0 spoon.support.compiler.jdt.JDTImportBuilder.getOrLoadClass(String)
8822    3   1    0 spoon.support.compiler.jdt.ASTPair.ASTPair(CtElement,ASTNode)
8823    2   1    0 spoon.support.compiler.jdt.ASTPair.toString()
8824    2   1    0 spoon.support.compiler.jdt.ReferenceBuilder.ReferenceBuilder(JDTTreeBuilder)
8825    5   1    0 spoon.support.compiler.jdt.ReferenceBuilder.getBoundedTypeReference(TypeBinding)
8826    2   1    0 spoon.support.compiler.jdt.ReferenceBuilder.buildTypeReference(TypeReference,Scope)
8827    5   3    0 spoon.support.compiler.jdt.ReferenceBuilder.buildTypeReference(TypeReference,Scope,boolean)
8828    2   1    0 spoon.support.compiler.jdt.ReferenceBuilder.JDTTreeBuilder.OnAccessListener$1.onAccess(boolean[][],int)
8829   10   4    0 spoon.support.compiler.jdt.ReferenceBuilder.buildTypeReference(QualifiedTypeReference,Scope)
8830    4   3    1 spoon.support.compiler.jdt.ReferenceBuilder.buildTypeParameterReference(TypeReference,Scope)
8831   38  27    0 spoon.support.compiler.jdt.ReferenceBuilder.buildTypeReferenceInternal(T,TypeReference,Scope,boolean)
8832    4   2    0 spoon.support.compiler.jdt.ReferenceBuilder.getTypeReferenceOfArrayComponent(CtTypeReference)
8833    9   6    0 spoon.support.compiler.jdt.ReferenceBuilder.isTypeArgumentExplicit(TypeReference[][])
8834   23  12    0 spoon.support.compiler.jdt.ReferenceBuilder.getQualifiedTypeReference(T[][],TypeBinding,ReferenceBinding,JDTTreeBuilder.OnAccessListener)
8835   41  20    1 spoon.support.compiler.jdt.ReferenceBuilder.getDeclaringReferenceFromImports(CtReference[])
8836   43  17    0 spoon.support.compiler.jdt.ReferenceBuilder.getExecutableReference(MethodBinding)
8837   15   4    0 spoon.support.compiler.jdt.ReferenceBuilder.getExecutableReference(AllocationExpression)
8838   20   8    0 spoon.support.compiler.jdt.ReferenceBuilder.getExecutableReference(MessageSend)
8839    2   1    0 spoon.support.compiler.jdt.ReferenceBuilder.getPackageReference(PackageBinding)
8840    6   3    0 spoon.support.compiler.jdt.ReferenceBuilder.getPackageReference(String)
8841    6   4    0 spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(TypeBinding,TypeReference)
8842   12   5    0 spoon.support.compiler.jdt.ReferenceBuilder.getTypeParameterReference(TypeBinding,TypeReference)
8843   10   8    1 spoon.support.compiler.jdt.ReferenceBuilder.isCorrectTypeReference(TypeReference)
8844    6   6    0 spoon.support.compiler.jdt.ReferenceBuilder.insertGenericTypesInNoClasspathFromJDTInSpoon(TypeReference,T)
8845   27  12    0 spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(TypeReference)
8846    6   2    0 spoon.support.compiler.jdt.ReferenceBuilder.concatSubArray(String[],int)
8847   29   9    1 spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(String)
8848   24   9    1 spoon.support.compiler.jdt.ReferenceBuilder.getTypeParameterReference(String)
8849    2   1    0 spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(TypeBinding)
8850  183  67    0 spoon.support.compiler.jdt.ReferenceBuilder.getTypeReference(TypeBinding,boolean)
8851    2   1    0 spoon.support.compiler.jdt.ReferenceBuilder.getCtCircularTypeReference(TypeBinding)
8852    9   2    0 spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(MethodBinding)
8853   13   5    0 spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(FieldBinding)
8854    6   3    0 spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(FieldBinding,FieldBinding[])
8855   26  10    0 spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(VariableBinding)
8856    7   3    0 spoon.support.compiler.jdt.ReferenceBuilder.getVariableReference(ProblemBinding)
8857    5   2    0 spoon.support.compiler.jdt.ReferenceBuilder.getBoundedTypesReferences(TypeBinding[])
8858   16   6    1 spoon.support.compiler.jdt.ReferenceBuilder.setPackageOrDeclaringType(CtTypeReference,CtReference)
8859   21  10    1 spoon.support.compiler.jdt.ReferenceBuilder.getLambdaExecutableReference(SingleNameReference)
8860    7   3    0 spoon.support.compiler.jdt.ReferenceBuilder.getMethodParameterType(CtParameter)
8861    9   3    0 spoon.support.compiler.jdt.ReferenceBuilder.getModuleReference(ModuleReference)
8862    2   1    0 spoon.support.compiler.jdt.PositionBuilder.PositionBuilder(JDTTreeBuilder)
8863    4   1    0 spoon.support.compiler.jdt.PositionBuilder.buildPosition(int,int)
8864  208 106    0 spoon.support.compiler.jdt.PositionBuilder.buildPositionCtElement(CtElement,ASTNode)
8865   10   5    0 spoon.support.compiler.jdt.PositionBuilder.getParentsSourceStart()
8866   10   7    0 spoon.support.compiler.jdt.PositionBuilder.getNrOfDimensions(int[],int,int)
8867    9   1    0 spoon.support.compiler.jdt.PositionBuilder.buildPosition(CtCatch)
8868   10   3    0 spoon.support.compiler.jdt.PositionBuilder.buildPosition(CtCase)
8869    6   2    1 spoon.support.compiler.jdt.PositionBuilder.getEndOfLastTryBlock(CtTry,int)
8870    2   1    0 spoon.support.compiler.jdt.PositionBuilder.getNrOfFirstCastExpressionBrackets()
8871    5   2    0 spoon.support.compiler.jdt.PositionBuilder.getNrOfCastExpressionBrackets()
8872   17   5    0 spoon.support.compiler.jdt.PositionBuilder.setModifiersPosition(CtModifiable,int,int)
8873   13   8    0 spoon.support.compiler.jdt.PositionBuilder.getSourceEndOfTypeReference(int[],TypeReference,int)
8874    6   4    1 spoon.support.compiler.jdt.PositionBuilder.findNextChar(int[],int,int,char)
8875    2   1    1 spoon.support.compiler.jdt.PositionBuilder.findNextNonWhitespace(int[],int,int)
8876   11   7    0 spoon.support.compiler.jdt.PositionBuilder.findNextNonWhitespace(boolean,boolean[],int,int)
8877    8   6    1 spoon.support.compiler.jdt.PositionBuilder.findNextWhitespace(int[],int,int)
8878   12   5    1 spoon.support.compiler.jdt.PositionBuilder.findPrevNonWhitespace(int[],int,int)
8879    8   5    1 spoon.support.compiler.jdt.PositionBuilder.findPrevWhitespace(int[],int,int)
8880   21  18    1 spoon.support.compiler.jdt.PositionBuilder.getEndOfComment(int[],int,int)
8881   14  11    1 spoon.support.compiler.jdt.PositionBuilder.getStartOfComment(int[],int,int)
8882    5   4    0 spoon.support.compiler.jdt.PositionBuilder.handlePositionProblem(String)
8883    6   1    0 spoon.support.compiler.jdt.FileCompilerConfig.FileCompilerConfig$1.getFiles(JDTBatchCompiler)
8884    2   1    0 spoon.support.compiler.jdt.FileCompilerConfig.FileCompilerConfig(SpoonFile)
8885   10   4    0 spoon.support.compiler.jdt.FileCompilerConfig.initializeCompiler(JDTBatchCompiler)
8886    2   1    0 spoon.support.compiler.jdt.FileCompilerConfig.getFiles(JDTBatchCompiler)
8887    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.JDTBatchCompiler(JDTBasedSpoonCompiler)
8888    5   2    0 spoon.support.compiler.jdt.JDTBatchCompiler.JDTBatchCompiler(JDTBasedSpoonCompiler,OutputStream,OutputStream)
8889   25   9    1 spoon.support.compiler.jdt.JDTBatchCompiler.getCompilationUnits()
8890    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.setCompilationUnits(CompilationUnit[])
8891    8   5    0 spoon.support.compiler.jdt.JDTBatchCompiler.ICompilerRequestor$1.acceptResult(CompilationResult)
8892   11   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.getBatchRequestor()
8893    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.ignoreFile(String)
8894    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.IErrorHandlingPolicy$1.proceedOnErrors()
8895    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.IErrorHandlingPolicy$1.stopOnFirstError()
8896    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.IErrorHandlingPolicy$1.ignoreAllErrors()
8897    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.IErrorHandlingPolicy$1.proceedOnErrors()
8898    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.IErrorHandlingPolicy$1.stopOnFirstError()
8899    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.IErrorHandlingPolicy$1.ignoreAllErrors()
8900    1   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.CompilationProgress$1.begin(int)
8901    1   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.CompilationProgress$1.done()
8902    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.CompilationProgress$1.isCanceled()
8903    6   3    0 spoon.support.compiler.jdt.JDTBatchCompiler.CompilationProgress$1.setTaskName(String)
8904    5   3    0 spoon.support.compiler.jdt.JDTBatchCompiler.CompilationProgress$1.worked(int,int)
8905    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.ProblemReporter$1.computeSeverity(int)
8906   68  11    1 spoon.support.compiler.jdt.JDTBatchCompiler.getUnits()
8907    2   1    0 spoon.support.compiler.jdt.JDTBatchCompiler.getJdtCompiler()
8908    1   1    1 spoon.support.compiler.jdt.CompilationUnitFilter.exclude(String)
8909    2   1    1 spoon.support.compiler.jdt.TreeBuilderRequestor.TreeBuilderRequestor(JDTBasedSpoonCompiler)
8910    4   3    0 spoon.support.compiler.jdt.TreeBuilderRequestor.acceptResult(CompilationResult)
8911    3   1    0 spoon.support.compiler.jdt.CompilationUnitWrapper.CompilationUnitWrapper(CtType)
8912    6   1    0 spoon.support.compiler.jdt.CompilationUnitWrapper.getContents()
8913    9   3    1 spoon.support.compiler.jdt.JDTCommentBuilder.JDTCommentBuilder(CompilationUnitDeclaration,Factory)
8914    6   4    1 spoon.support.compiler.jdt.JDTCommentBuilder.build()
8915   18   3    1 spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(positions[])
8916   22  11    1 spoon.support.compiler.jdt.JDTCommentBuilder.addCommentToNear(CtComment,CtElement)
8917   15   9    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.scan(CtElement)
8918    3   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.scanCtReference(CtReference)
8919    5   2    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtStatementList(CtStatementList)
8920    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtMethod(T)
8921    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtConstructor(T)
8922    6   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtConditional(T)
8923    5   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtBinaryOperator(T)
8924   12   8    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtClass(T)
8925    9   5    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtInterface(T)
8926    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.scanCtVariable(T)
8927   25  14    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtSwitch(E)
8928   14  11    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtIf(CtIf)
8929    3   4    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.scanCtStatement(CtStatement)
8930    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtAnonymousExecutable(CtAnonymousExecutable)
8931    5   2    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtNewArray(T)
8932    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtParameter(T)
8933    3   2    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtCatch(CtCatch)
8934    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtModule(CtModule)
8935    2   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.CtInheritanceScanner$1.visitCtAnnotation(A)
8936  137   8    1 spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(CtComment)
8937    3   1    0 spoon.support.compiler.jdt.JDTCommentBuilder.FindCommentParentScanner.FindCommentParentScanner(int,int)
8938    2   3    0 spoon.support.compiler.jdt.JDTCommentBuilder.FindCommentParentScanner.isCommentBetweenElementPosition(CtElement)
8939   13  11    0 spoon.support.compiler.jdt.JDTCommentBuilder.FindCommentParentScanner.scan(CtElement)
8940   30   3    1 spoon.support.compiler.jdt.JDTCommentBuilder.findCommentParent(CtComment)
8941    4   3    1 spoon.support.compiler.jdt.JDTCommentBuilder.getBody(CtElement)
8942    2   1    1 spoon.support.compiler.jdt.JDTCommentBuilder.getCommentContent(int,int)
8943    4   3    0 spoon.support.compiler.jdt.JDTCommentBuilder.cleanComment(String)
8944   27  14    0 spoon.support.compiler.jdt.JDTCommentBuilder.cleanComment(Reader)
8945    2   1    1 spoon.support.compiler.jdt.ParentExiter.ParentExiter(JDTTreeBuilder)
8946    2   1    0 spoon.support.compiler.jdt.ParentExiter.setChild(CtElement)
8947    2   1    0 spoon.support.compiler.jdt.ParentExiter.setChild(ASTNode)
8948    2   1    0 spoon.support.compiler.jdt.ParentExiter.setParent(ASTNode)
8949   14  11    0 spoon.support.compiler.jdt.ParentExiter.scanCtElement(CtElement)
8950   10   6    0 spoon.support.compiler.jdt.ParentExiter.substituteAnnotation(CtTypedElement)
8951   13   9    0 spoon.support.compiler.jdt.ParentExiter.scanCtExecutable(R)
8952    3   3    0 spoon.support.compiler.jdt.ParentExiter.scanCtFormalTypeDeclarer(CtFormalTypeDeclarer)
8953    8   4    0 spoon.support.compiler.jdt.ParentExiter.scanCtLoop(CtLoop)
8954    5   3    0 spoon.support.compiler.jdt.ParentExiter.scanCtTargetedExpression(E)
8955   20  13    0 spoon.support.compiler.jdt.ParentExiter.scanCtType(T)
8956   10   7    0 spoon.support.compiler.jdt.ParentExiter.scanCtVariable(T)
8957    6   7    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToDefaultValue(T)
8958    4   2    0 spoon.support.compiler.jdt.ParentExiter.visitCtAnnotation(A)
8959    9   6    0 spoon.support.compiler.jdt.ParentExiter.visitCtConstructor(T)
8960   14   9    0 spoon.support.compiler.jdt.ParentExiter.visitCtMethod(T)
8961    3   3    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToType(T)
8962    5   4    0 spoon.support.compiler.jdt.ParentExiter.visitCtAnnotationMethod(T)
8963    3   3    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToDefaultValue(T)
8964    5   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtAnonymousExecutable(CtAnonymousExecutable)
8965    3   2    0 spoon.support.compiler.jdt.ParentExiter.visitCtArrayRead(T)
8966    3   2    0 spoon.support.compiler.jdt.ParentExiter.visitCtArrayWrite(T)
8967    9   5    0 spoon.support.compiler.jdt.ParentExiter.visitArrayAccess(E)
8968    9   5    0 spoon.support.compiler.jdt.ParentExiter.visitCtAssert(T)
8969   10   6    0 spoon.support.compiler.jdt.ParentExiter.visitCtAssignment(A)
8970   28  11    0 spoon.support.compiler.jdt.ParentExiter.visitCtBinaryOperator(T)
8971    5   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtBlock(R)
8972   10   8    0 spoon.support.compiler.jdt.ParentExiter.visitCtCase(E)
8973    9   5    0 spoon.support.compiler.jdt.ParentExiter.visitCtCatch(CtCatch)
8974    5   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtCatchVariable(T)
8975    6   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtClass(T)
8976   14   6    0 spoon.support.compiler.jdt.ParentExiter.visitCtTypeParameter(CtTypeParameter)
8977   11   5    0 spoon.support.compiler.jdt.ParentExiter.visitCtConditional(T)
8978    5   5    0 spoon.support.compiler.jdt.ParentExiter.visitCtDo(CtDo)
8979   13  10    0 spoon.support.compiler.jdt.ParentExiter.visitCtFor(CtFor)
8980   10   9    0 spoon.support.compiler.jdt.ParentExiter.isContainedInForInit()
8981   10   9    0 spoon.support.compiler.jdt.ParentExiter.isContainedInForUpdate()
8982    9   7    0 spoon.support.compiler.jdt.ParentExiter.visitCtForEach(CtForEach)
8983    5   4    0 spoon.support.compiler.jdt.ParentExiter.visitCtWhile(CtWhile)
8984   22  11    0 spoon.support.compiler.jdt.ParentExiter.visitCtIf(CtIf)
8985    5   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtSuperAccess(T)
8986   19  12    0 spoon.support.compiler.jdt.ParentExiter.visitCtInvocation(T)
8987    5   5    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToQualification(T)
8988    5   5    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToReceiver(T)
8989    4   3    0 spoon.support.compiler.jdt.ParentExiter.getFinalExpressionFromCast(Expression)
8990   13   8    0 spoon.support.compiler.jdt.ParentExiter.visitCtNewArray(T)
8991   10   9    0 spoon.support.compiler.jdt.ParentExiter.isContainedInDimensionExpression()
8992   15   7    0 spoon.support.compiler.jdt.ParentExiter.visitCtConstructorCall(T)
8993    5   5    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToEnclosingInstance(T)
8994    3   2    0 spoon.support.compiler.jdt.ParentExiter.hasChildEqualsToType(T)
8995   12   7    0 spoon.support.compiler.jdt.ParentExiter.visitCtNewClass(T)
8996   12   6    0 spoon.support.compiler.jdt.ParentExiter.visitCtLambda(T)
8997    4   2    0 spoon.support.compiler.jdt.ParentExiter.visitCtExecutableReferenceExpression(E)
8998   11   5    0 spoon.support.compiler.jdt.ParentExiter.visitCtPackage(CtPackage)
8999    5   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtReturn(R)
9000    9   6    0 spoon.support.compiler.jdt.ParentExiter.visitCtSwitch(E)
9001    8   7    0 spoon.support.compiler.jdt.ParentExiter.visitCtSynchronized(CtSynchronized)
9002    5   4    0 spoon.support.compiler.jdt.ParentExiter.visitCtThrow(CtThrow)
9003   18   9    0 spoon.support.compiler.jdt.ParentExiter.visitCtTry(CtTry)
9004    6   3    1 spoon.support.compiler.jdt.ParentExiter.getLastCatcher(CtTry)
9005    4   2    0 spoon.support.compiler.jdt.ParentExiter.visitCtTryWithResource(CtTryWithResource)
9006    5   4    0 spoon.support.compiler.jdt.ParentExiter.visitCtUnaryOperator(T)
9007    4   3    0 spoon.support.compiler.jdt.ParentExiter.visitCtWildcardReference(CtWildcardReference)
9008    2   1    0 spoon.support.compiler.ProgressLogger.ProgressLogger(StandardEnvironment)
9009    4   1    0 spoon.support.compiler.ProgressLogger.start(Process)
9010    3   1    0 spoon.support.compiler.ProgressLogger.step(Process,String,int,int)
9011    3   1    0 spoon.support.compiler.ProgressLogger.step(Process,String)
9012    2   1    0 spoon.support.compiler.ProgressLogger.end(Process)
9013    2   1    0 spoon.support.compiler.ProgressLogger.getCurrentTimeInMillis()
9014    2   1    0 spoon.support.compiler.VirtualFolder.addFile(SpoonFile)
9015    4   3    0 spoon.support.compiler.VirtualFolder.addFolder(SpoonFolder)
9016    2   1    0 spoon.support.compiler.VirtualFolder.getAllFiles()
9017    6   3    0 spoon.support.compiler.VirtualFolder.getAllJavaFiles()
9018    2   1    0 spoon.support.compiler.VirtualFolder.getFiles()
9019    2   1    0 spoon.support.compiler.VirtualFolder.getName()
9020    2   1    0 spoon.support.compiler.VirtualFolder.getParent()
9021    7   4    0 spoon.support.compiler.VirtualFolder.getSubFolders()
9022    2   1    0 spoon.support.compiler.VirtualFolder.isFile()
9023    2   1    0 spoon.support.compiler.VirtualFolder.getPath()
9024    2   1    0 spoon.support.compiler.VirtualFolder.getFileSystemParent()
9025    2   1    0 spoon.support.compiler.VirtualFolder.isArchive()
9026    2   1    0 spoon.support.compiler.VirtualFolder.toFile()
9027    2   1    0 spoon.support.compiler.VirtualFolder.toString()
9028    2   1    0 spoon.support.compiler.FileSystemFile.FileSystemFile(String)
9029    4   3    0 spoon.support.compiler.FileSystemFile.FileSystemFile(File)
9030    6   6    0 spoon.support.compiler.FileSystemFile.getContent()
9031    2   1    0 spoon.support.compiler.FileSystemFile.getName()
9032    5   3    0 spoon.support.compiler.FileSystemFile.getParent()
9033    2   1    0 spoon.support.compiler.FileSystemFile.getFileSystemParent()
9034    2   1    0 spoon.support.compiler.FileSystemFile.isFile()
9035    2   1    0 spoon.support.compiler.FileSystemFile.isJava()
9036    5   3    0 spoon.support.compiler.FileSystemFile.getPath()
9037    2   1    0 spoon.support.compiler.FileSystemFile.toString()
9038    2   1    0 spoon.support.compiler.FileSystemFile.isArchive()
9039    2   1    0 spoon.support.compiler.FileSystemFile.toFile()
9040    2   1    0 spoon.support.compiler.FileSystemFile.isActualFile()
9041    2   1    0 spoon.support.compiler.FileSystemFile.equals(Object)
9042    2   1    0 spoon.support.compiler.FileSystemFile.hashCode()
9043    1   1    1 spoon.support.compiler.SpoonProgress.start(Process)
9044    1   1    1 spoon.support.compiler.SpoonProgress.step(Process,String,int,int)
9045    1   1    1 spoon.support.compiler.SpoonProgress.step(Process,String)
9046    1   1    1 spoon.support.compiler.SpoonProgress.end(Process)
9047    2   1    1 spoon.support.RuntimeProcessingManager.RuntimeProcessingManager(Factory)
9048    7   2    0 spoon.support.RuntimeProcessingManager.addProcessor(Processor)
9049    3   1    0 spoon.support.RuntimeProcessingManager.addProcessor(Processor)
9050    4   2    0 spoon.support.RuntimeProcessingManager.addProcessor(String)
9051    2   1    0 spoon.support.RuntimeProcessingManager.getCurrentProcessor()
9052    2   1    0 spoon.support.RuntimeProcessingManager.getFactory()
9053    4   2    0 spoon.support.RuntimeProcessingManager.getProcessors()
9054    4   2    0 spoon.support.RuntimeProcessingManager.getVisitor()
9055    4   2    0 spoon.support.RuntimeProcessingManager.process(CtElement)
9056    6   3    1 spoon.support.RuntimeProcessingManager.process(CtElement,Processor)
9057    4   2    0 spoon.support.RuntimeProcessingManager.process(CtElement)
9058    6   2    1 spoon.support.RuntimeProcessingManager.process(CtElement,Processor)
9059    3   1    0 spoon.support.RuntimeProcessingManager.setFactory(Factory)
9060    2   1    0 spoon.support.SpoonClassNotFoundException.SpoonClassNotFoundException(String,Throwable)
9061    1   1    0 spoon.support.SpoonClassNotFoundException.SpoonClassNotFoundException()
9062    2   1    0 spoon.support.SpoonClassNotFoundException.SpoonClassNotFoundException(String)
9063    7   1    1 spoon.metamodel.MMMethod.MMMethod(MetamodelProperty,CtMethod)
9064    2   1    1 spoon.metamodel.MMMethod.getActualCtMethod()
9065    2   1    1 spoon.metamodel.MMMethod.getName()
9066    2   1    1 spoon.metamodel.MMMethod.getSignature()
9067    2   1    1 spoon.metamodel.MMMethod.getKind()
9068    5   5    1 spoon.metamodel.MMMethod.getCompatibleMethod(MetamodelConcept)
9069    2   1    1 spoon.metamodel.MMMethod.overrides(CtMethod)
9070    2   1    1 spoon.metamodel.MMMethod.getProperty()
9071    2   1    1 spoon.metamodel.MMMethod.getOwner()
9072    2   1    1 spoon.metamodel.MMMethod.getDeclaredMethods()
9073    4   3    0 spoon.metamodel.MMMethod.addRelatedMethod(CtMethod)
9074    2   1    1 spoon.metamodel.MMMethod.getReturnType()
9075    4   3    1 spoon.metamodel.MMMethod.getValueType()
9076    2   1    0 spoon.metamodel.MMMethod.toString()
9077    2   1    0 spoon.refactoring.CtRenameLocalVariableRefactoring.CtRenameLocalVariableRefactoring()
9078    2   1    0 spoon.refactoring.CtRenameLocalVariableRefactoring.CtConsumer$1.accept(CtReference)
9079    5   1    0 spoon.refactoring.CtRenameLocalVariableRefactoring.refactorNoCheck()
9080    6   6    0 spoon.refactoring.CtRenameLocalVariableRefactoring.QueryDriver.enter(CtElement)
9081    5   3    0 spoon.refactoring.CtRenameLocalVariableRefactoring.QueryDriver.exit(CtElement)
9082    4   3    0 spoon.refactoring.CtRenameLocalVariableRefactoring.QueryDriver.ignoreChildrenOf(CtElement)
9083    2   1    0 spoon.refactoring.CtRenameLocalVariableRefactoring.QueryDriver.isInContextOfLocalClass()
9084   38  23    1 spoon.refactoring.CtRenameLocalVariableRefactoring.Filter$1.matches(CtElement)
9085   53   5    0 spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts()
9086    2   2    1 spoon.refactoring.CtRenameLocalVariableRefactoring.createNameConflictIssue(CtVariable)
9087    2   2    1 spoon.refactoring.CtRenameLocalVariableRefactoring.createNameConflictIssue(CtVariable,CtVariableReference)
9088    1   1    1 spoon.refactoring.CtRenameRefactoring.getTarget()
9089    1   1    1 spoon.refactoring.CtRenameRefactoring.setTarget(T)
9090    1   1    1 spoon.refactoring.CtRenameRefactoring.getNewName()
9091    1   1    1 spoon.refactoring.CtRenameRefactoring.setNewName(String)
9092    1   1    0 spoon.refactoring.Refactoring.Refactoring()
9093    3   1    0 spoon.refactoring.Refactoring.TypeFilter$1.matches(CtTypeReference)
9094    9   2    1 spoon.refactoring.Refactoring.changeTypeName(CtType,String)
9095    2   1    0 spoon.refactoring.Refactoring.TypeFilter$1.matches(CtExecutableReference)
9096    7   2    1 spoon.refactoring.Refactoring.changeMethodName(CtMethod,String)
9097    9   6    0 spoon.refactoring.Refactoring.CtScanner$1.visitCtExecutableReference(T)
9098   20   2    1 spoon.refactoring.Refactoring.copyMethod(CtMethod)
9099    8   6    0 spoon.refactoring.Refactoring.CtScanner$1.visitCtTypeReference(T)
9100    9   6    0 spoon.refactoring.Refactoring.CtScanner$1.visitCtExecutableReference(T)
9101    9   7    0 spoon.refactoring.Refactoring.CtScanner$1.visitCtFieldReference(T)
9102   36   2    1 spoon.refactoring.Refactoring.copyType(CtType)
9103    2   1    1 spoon.refactoring.Refactoring.changeLocalVariableName(CtLocalVariable,String)
9104    2   1    0 spoon.refactoring.AbstractRenameRefactoring.AbstractRenameRefactoring(Pattern)
9105    7   5    0 spoon.refactoring.AbstractRenameRefactoring.refactor()
9106    1   1    0 spoon.refactoring.AbstractRenameRefactoring.refactorNoCheck()
9107    3   1    0 spoon.refactoring.AbstractRenameRefactoring.detectIssues()
9108    1   1    1 spoon.refactoring.AbstractRenameRefactoring.checkNewNameIsValid()
9109    1   1    1 spoon.refactoring.AbstractRenameRefactoring.detectNameConflicts()
9110    2   1    1 spoon.refactoring.AbstractRenameRefactoring.isJavaIdentifier(String)
9111    2   1    0 spoon.refactoring.AbstractRenameRefactoring.getTarget()
9112    3   1    0 spoon.refactoring.AbstractRenameRefactoring.setTarget(T)
9113    2   1    0 spoon.refactoring.AbstractRenameRefactoring.getNewName()
9114    5   4    0 spoon.refactoring.AbstractRenameRefactoring.setNewName(String)
9115    1   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtParameterRemoveRefactoring()
9116    2   1    1 spoon.refactoring.CtParameterRemoveRefactoring.getTarget()
9117    8   3    1 spoon.refactoring.CtParameterRemoveRefactoring.setTarget(CtParameter)
9118    4   2    1 spoon.refactoring.CtParameterRemoveRefactoring.getTargetExecutables()
9119    4   2    1 spoon.refactoring.CtParameterRemoveRefactoring.getTargetInvocations()
9120    5   3    0 spoon.refactoring.CtParameterRemoveRefactoring.refactor()
9121    3   1    1 spoon.refactoring.CtParameterRemoveRefactoring.detectIssues()
9122    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtConsumer$1.accept(CtExecutable)
9123   10   3    1 spoon.refactoring.CtParameterRemoveRefactoring.computeAllExecutables()
9124    4   2    0 spoon.refactoring.CtParameterRemoveRefactoring.CtConsumer$1.accept(CtExecutableReference)
9125   11   2    1 spoon.refactoring.CtParameterRemoveRefactoring.computeAllInvocations()
9126    3   2    0 spoon.refactoring.CtParameterRemoveRefactoring.checkAllExecutables()
9127    4   3    0 spoon.refactoring.CtParameterRemoveRefactoring.CtConsumer$1.accept(CtParameterReference)
9128    7   1    0 spoon.refactoring.CtParameterRemoveRefactoring.checkExecutable(CtExecutable)
9129    3   2    0 spoon.refactoring.CtParameterRemoveRefactoring.checkAllInvocations()
9130    4   2    0 spoon.refactoring.CtParameterRemoveRefactoring.checkInvocation(CtInvocation)
9131    2   1    1 spoon.refactoring.CtParameterRemoveRefactoring.isAllowedParameterUsage(CtParameterReference)
9132    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtVariableRead(T)
9133    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtArrayRead(T)
9134    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtFieldRead(T)
9135    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtParameterReference(T)
9136    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtLiteral(T)
9137    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtNewArray(T)
9138    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtAnnotationFieldAccess(T)
9139    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.CtAbstractVisitor$1.visitCtThisAccess(T)
9140   22   1    1 spoon.refactoring.CtParameterRemoveRefactoring.canRemoveExpression(CtExpression)
9141    5   3    0 spoon.refactoring.CtParameterRemoveRefactoring.isRemovedParamOfRefactoredInvocation(CtParameterReference)
9142    2   2    1 spoon.refactoring.CtParameterRemoveRefactoring.createParameterUsedIssue(CtParameter,CtParameterReference)
9143    2   2    1 spoon.refactoring.CtParameterRemoveRefactoring.createExpressionCannotBeRemovedIssue(CtInvocation,CtExpression)
9144    3   1    0 spoon.refactoring.CtParameterRemoveRefactoring.refactorNoCheck()
9145    4   2    0 spoon.refactoring.CtParameterRemoveRefactoring.removeInvocationArguments()
9146    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.removeInvocationArgument(CtInvocation)
9147    4   2    0 spoon.refactoring.CtParameterRemoveRefactoring.removeMethodParameters()
9148    2   1    0 spoon.refactoring.CtParameterRemoveRefactoring.removeParameter(CtExecutable)
9149    1   1    1 spoon.refactoring.CtRefactoring.refactor()
9150    1   1    0 spoon.refactoring.RefactoringException.RefactoringException()
9151    2   1    0 spoon.refactoring.RefactoringException.RefactoringException(String)
9152    2   1    0 spoon.refactoring.RefactoringException.RefactoringException(Throwable)
9153    2   1    0 spoon.refactoring.RefactoringException.RefactoringException(String,Throwable)
9154    1   1    1 spoon.pattern.internal.SubstitutionRequestProvider.getTemplateValueResolver(Object)
9155    2   1    1 spoon.pattern.internal.matcher.ChainOfMatchersImpl.create(RootNode,Matchers)
9156   10   5    0 spoon.pattern.internal.matcher.ChainOfMatchersImpl.createFromList(Matchers,RootNode,int)
9157    7   5    0 spoon.pattern.internal.matcher.ChainOfMatchersImpl.ChainOfMatchersImpl(RootNode,Matchers)
9158    2   1    0 spoon.pattern.internal.matcher.ChainOfMatchersImpl.matchAllWith(TobeMatched)
9159    1   1    1 spoon.pattern.internal.matcher.Matchers.matchAllWith(TobeMatched)
9160    3   1    0 spoon.pattern.internal.matcher.MatchingScanner.MatchingScanner(ListOfNodes,Match)
9161    3   2    0 spoon.pattern.internal.matcher.MatchingScanner.scan(CtRole,CtElement)
9162   10   6    0 spoon.pattern.internal.matcher.MatchingScanner.scan(CtRole,CtElement)
9163   17   6    0 spoon.pattern.internal.matcher.MatchingScanner.searchMatchInList(CtRole,CtElement,boolean)
9164   14   6    0 spoon.pattern.internal.matcher.MatchingScanner.searchMatchInSet(CtRole,CtElement)
9165    2   1    0 spoon.pattern.internal.matcher.MatchingScanner.scan(CtRole,CtElement)
9166   11  10    1 spoon.pattern.internal.matcher.TobeMatched.create(ImmutableMap,ContainerKind,Object)
9167    4   1    0 spoon.pattern.internal.matcher.TobeMatched.TobeMatched(ImmutableMap,Object)
9168    4   2    1 spoon.pattern.internal.matcher.TobeMatched.TobeMatched(ImmutableMap,Collection,boolean)
9169    4   2    0 spoon.pattern.internal.matcher.TobeMatched.TobeMatched(ImmutableMap,String)
9170    6   2    0 spoon.pattern.internal.matcher.TobeMatched.TobeMatched(ImmutableMap,List,boolean,int)
9171    2   1    1 spoon.pattern.internal.matcher.TobeMatched.getParameters()
9172    2   1    1 spoon.pattern.internal.matcher.TobeMatched.getTargets()
9173   13   9    1 spoon.pattern.internal.matcher.TobeMatched.getMatchedTargets(TobeMatched)
9174    5   4    0 spoon.pattern.internal.matcher.TobeMatched.containsSame(List,Object)
9175    2   1    1 spoon.pattern.internal.matcher.TobeMatched.hasTargets()
9176    4   3    1 spoon.pattern.internal.matcher.TobeMatched.copyAndSetParams(ImmutableMap)
9177   16  10    1 spoon.pattern.internal.matcher.TobeMatched.matchNext(ImmutableMap)
9178    2   2    1 spoon.pattern.internal.matcher.TobeMatched.getMatchedParameters(TobeMatched)
9179    2   1    1 spoon.pattern.internal.matcher.TobeMatched.removeTarget(int)
9180    2   1    0 spoon.pattern.internal.matcher.TobeMatched.removeTarget(ImmutableMap,int)
9181    6   2    0 spoon.pattern.internal.matcher.TobeMatched.toString()
9182    1   1    0 spoon.pattern.internal.ValueConvertorImpl.ValueConvertorImpl()
9183   85  70    0 spoon.pattern.internal.ValueConvertorImpl.getValueAs(Factory,String,Object,T)
9184    4   1    0 spoon.pattern.internal.ValueConvertorImpl.getShortSignatureForJavadoc(CtExecutableReference)
9185    4   3    0 spoon.pattern.internal.ValueConvertorImpl.cloneIfNeeded(T)
9186    3   1    0 spoon.pattern.internal.parameter.ComputedParameterInfo.ComputedParameterInfo(ParameterComputer,ParameterInfo)
9187    2   1    0 spoon.pattern.internal.parameter.ComputedParameterInfo.getPlainName()
9188    2   1    0 spoon.pattern.internal.parameter.ComputedParameterInfo.getWrappedName(String)
9189    2   1    0 spoon.pattern.internal.parameter.ComputedParameterInfo.addValueAs(Object,Object)
9190    2   2    0 spoon.pattern.internal.parameter.ComputedParameterInfo.getEmptyContainer()
9191    4   1    0 spoon.pattern.internal.parameter.ComputedParameterInfo.getValueAs(Factory,T,ImmutableMap)
9192    1   1    1 spoon.pattern.internal.parameter.ParameterComputer.getName()
9193    1   1    1 spoon.pattern.internal.parameter.ParameterComputer.createInputHolder()
9194    1   1    1 spoon.pattern.internal.parameter.ParameterComputer.computeValue(Object,ResultHolder)
9195    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.getName()
9196    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.addValueAs(ImmutableMap,Object)
9197    1   1    0 spoon.pattern.internal.parameter.ParameterInfo.getValueAs(Factory,T,ImmutableMap)
9198    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.isMultiple()
9199    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.getParameterValueType()
9200    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.getMatchingStrategy()
9201    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.isRepeatable()
9202    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.isMandatory(ImmutableMap)
9203    1   1    1 spoon.pattern.internal.parameter.ParameterInfo.isTryNextMatch(ImmutableMap)
9204    2   1    0 spoon.pattern.internal.parameter.SetParameterInfo.SetParameterInfo(AbstractParameterInfo)
9205    2   1    0 spoon.pattern.internal.parameter.SetParameterInfo.getPlainName()
9206    2   1    0 spoon.pattern.internal.parameter.SetParameterInfo.getWrappedName(String)
9207   17  10    0 spoon.pattern.internal.parameter.SetParameterInfo.addValueAs(Object,Object)
9208    2   1    0 spoon.pattern.internal.parameter.SetParameterInfo.getEmptyContainer()
9209    2   1    0 spoon.pattern.internal.parameter.SetParameterInfo.getValue(ImmutableMap)
9210    7   3    0 spoon.pattern.internal.parameter.SetParameterInfo.castTo(Object,T)
9211    2   1    0 spoon.pattern.internal.parameter.ListParameterInfo.ListParameterInfo(ParameterInfo)
9212    3   1    0 spoon.pattern.internal.parameter.ListParameterInfo.ListParameterInfo(int,ParameterInfo)
9213    2   1    0 spoon.pattern.internal.parameter.ListParameterInfo.getPlainName()
9214    4   3    0 spoon.pattern.internal.parameter.ListParameterInfo.getWrappedName(String)
9215   22  10    0 spoon.pattern.internal.parameter.ListParameterInfo.addValueAs(Object,Object)
9216    4   5    0 spoon.pattern.internal.parameter.ListParameterInfo.getExistingValue(Object)
9217    2   1    0 spoon.pattern.internal.parameter.ListParameterInfo.getEmptyContainer()
9218    7   5    0 spoon.pattern.internal.parameter.ListParameterInfo.getValue(ImmutableMap)
9219    7   3    0 spoon.pattern.internal.parameter.ListParameterInfo.castTo(Object,T)
9220    2   1    0 spoon.pattern.internal.parameter.MapParameterInfo.MapParameterInfo(String)
9221    2   1    0 spoon.pattern.internal.parameter.MapParameterInfo.MapParameterInfo(AbstractParameterInfo)
9222    3   1    0 spoon.pattern.internal.parameter.MapParameterInfo.MapParameterInfo(String,AbstractParameterInfo)
9223    2   1    0 spoon.pattern.internal.parameter.MapParameterInfo.getPlainName()
9224    6   4    0 spoon.pattern.internal.parameter.MapParameterInfo.getWrappedName(String)
9225   37  23    0 spoon.pattern.internal.parameter.MapParameterInfo.addValueAs(Object,Object)
9226    3   2    0 spoon.pattern.internal.parameter.MapParameterInfo.getValue(ImmutableMap)
9227    4   2    0 spoon.pattern.internal.parameter.MapParameterInfo.castTo(Object,T)
9228    2   1    0 spoon.pattern.internal.parameter.MapParameterInfo.getEmptyContainer()
9229    2   1    0 spoon.pattern.internal.parameter.SimpleNameOfTypeReferenceParameterComputer.getName()
9230    2   1    0 spoon.pattern.internal.parameter.SimpleNameOfTypeReferenceParameterComputer.createInputHolder()
9231    6   2    0 spoon.pattern.internal.parameter.SimpleNameOfTypeReferenceParameterComputer.computeValue(Object,ResultHolder)
9232    2   1    0 spoon.pattern.internal.ResultHolder.ResultHolder(T)
9233    2   1    1 spoon.pattern.internal.ResultHolder.getRequiredClass()
9234    1   1    1 spoon.pattern.internal.ResultHolder.isMultiple()
9235    1   1    1 spoon.pattern.internal.ResultHolder.addResult(T)
9236    1   1    1 spoon.pattern.internal.ResultHolder.mapEachResult(T)
9237    1   1    1 spoon.pattern.internal.ResultHolder.getResults()
9238    2   1    0 spoon.pattern.internal.ResultHolder.Single.Single(T)
9239    2   1    0 spoon.pattern.internal.ResultHolder.Single.isMultiple()
9240    4   3    0 spoon.pattern.internal.ResultHolder.Single.addResult(T)
9241    2   1    0 spoon.pattern.internal.ResultHolder.Single.getResult()
9242    2   1    0 spoon.pattern.internal.ResultHolder.Single.mapEachResult(T)
9243    2   2    0 spoon.pattern.internal.ResultHolder.Single.getResults()
9244    2   1    0 spoon.pattern.internal.ResultHolder.Multiple.Multiple(T)
9245    2   1    0 spoon.pattern.internal.ResultHolder.Multiple.isMultiple()
9246    2   1    0 spoon.pattern.internal.ResultHolder.Multiple.addResult(T)
9247    2   1    0 spoon.pattern.internal.ResultHolder.Multiple.getResult()
9248    2   1    0 spoon.pattern.internal.ResultHolder.Multiple.getResults()
9249    3   2    0 spoon.pattern.internal.ResultHolder.Multiple.mapEachResult(T)
9250    1   1    0 spoon.pattern.internal.node.InlineNode.generateInlineTargets(DefaultGenerator,T,ImmutableMap)
9251    1   1    0 spoon.pattern.internal.node.SwitchNode.SwitchNode()
9252    5   4    0 spoon.pattern.internal.node.SwitchNode.replaceNode(RootNode,RootNode)
9253    2   1    1 spoon.pattern.internal.node.SwitchNode.addCase(PrimitiveMatcher,RootNode)
9254    5   3    0 spoon.pattern.internal.node.SwitchNode.generateTargets(DefaultGenerator,T,ImmutableMap)
9255    6   4    0 spoon.pattern.internal.node.SwitchNode.forEachParameterInfo(RootNode)
9256   11   7    0 spoon.pattern.internal.node.SwitchNode.matchTargets(TobeMatched,Matchers)
9257    3   1    0 spoon.pattern.internal.node.SwitchNode.CaseNode.CaseNode(PrimitiveMatcher,RootNode)
9258   13  10    0 spoon.pattern.internal.node.SwitchNode.CaseNode.replaceNode(RootNode,RootNode)
9259   11   7    0 spoon.pattern.internal.node.SwitchNode.CaseNode.matchTargets(TobeMatched,Matchers)
9260    2   1    0 spoon.pattern.internal.node.SwitchNode.CaseNode.forEachParameterInfo(RootNode)
9261    3   2    0 spoon.pattern.internal.node.SwitchNode.CaseNode.generateTargets(DefaultGenerator,T,ImmutableMap)
9262    5   4    0 spoon.pattern.internal.node.SwitchNode.CaseNode.isCaseSelected(DefaultGenerator,ImmutableMap)
9263   13   3    0 spoon.pattern.internal.node.SwitchNode.CaseNode.generateInlineTargets(DefaultGenerator,T,ImmutableMap)
9264   25  10    0 spoon.pattern.internal.node.SwitchNode.generateInlineTargets(DefaultGenerator,T,ImmutableMap)
9265    3   1    0 spoon.pattern.internal.node.MapEntryNode.MapEntryNode(RootNode,RootNode)
9266    2   1    0 spoon.pattern.internal.node.MapEntryNode.getKey()
9267    2   1    0 spoon.pattern.internal.node.MapEntryNode.getValue()
9268   10   7    0 spoon.pattern.internal.node.MapEntryNode.replaceNode(RootNode,RootNode)
9269    3   1    0 spoon.pattern.internal.node.MapEntryNode.forEachParameterInfo(RootNode)
9270    3   1    0 spoon.pattern.internal.node.MapEntryNode.Entry.Entry(String,CtElement)
9271    2   1    0 spoon.pattern.internal.node.MapEntryNode.Entry.getKey()
9272    2   1    0 spoon.pattern.internal.node.MapEntryNode.Entry.getValue()
9273    4   1    0 spoon.pattern.internal.node.MapEntryNode.Entry.setValue(CtElement)
9274    5   3    0 spoon.pattern.internal.node.MapEntryNode.generateTargets(DefaultGenerator,T,ImmutableMap)
9275    8   6    0 spoon.pattern.internal.node.MapEntryNode.matchTarget(Object,ImmutableMap)
9276    4   3    0 spoon.pattern.internal.node.MapEntryNode.getMatchingStrategy()
9277    4   3    0 spoon.pattern.internal.node.MapEntryNode.isTryNextMatch(ImmutableMap)
9278    2   1    0 spoon.pattern.internal.node.AbstractNode.toString()
9279    2   1    0 spoon.pattern.internal.node.AbstractNode.isSimplifyGenerated()
9280    2   1    0 spoon.pattern.internal.node.AbstractNode.setSimplifyGenerated(boolean)
9281    1   1    0 spoon.pattern.internal.node.ForEachNode.ForEachNode()
9282   10   7    0 spoon.pattern.internal.node.ForEachNode.replaceNode(RootNode,RootNode)
9283    3   2    0 spoon.pattern.internal.node.ForEachNode.generateTargets(DefaultGenerator,T,ImmutableMap)
9284    2   1    0 spoon.pattern.internal.node.ForEachNode.getMatchingStrategy()
9285   15   7    0 spoon.pattern.internal.node.ForEachNode.matchAllWith(TobeMatched)
9286    3   1    0 spoon.pattern.internal.node.ForEachNode.forEachParameterInfo(RootNode)
9287    2   1    0 spoon.pattern.internal.node.ForEachNode.setNestedModel(RootNode)
9288    2   1    0 spoon.pattern.internal.node.ForEachNode.setIterableParameter(PrimitiveMatcher)
9289    2   1    0 spoon.pattern.internal.node.ForEachNode.setLocalParameter(ParameterInfo)
9290    2   1    0 spoon.pattern.internal.node.ForEachNode.isRepeatable()
9291    2   1    0 spoon.pattern.internal.node.ForEachNode.isMandatory(ImmutableMap)
9292    2   1    0 spoon.pattern.internal.node.ForEachNode.isTryNextMatch(ImmutableMap)
9293    9   1    0 spoon.pattern.internal.node.ForEachNode.generateInlineTargets(DefaultGenerator,T,ImmutableMap)
9294    2   1    0 spoon.pattern.internal.node.ListOfNodes.ListOfNodes(RootNode)
9295    3   2    0 spoon.pattern.internal.node.ListOfNodes.forEachParameterInfo(RootNode)
9296    3   2    0 spoon.pattern.internal.node.ListOfNodes.generateTargets(DefaultGenerator,T,ImmutableMap)
9297    2   1    0 spoon.pattern.internal.node.ListOfNodes.matchTargets(TobeMatched,Matchers)
9298    9   6    0 spoon.pattern.internal.node.ListOfNodes.replaceNode(RootNode,RootNode)
9299    2   1    1 spoon.pattern.internal.node.ListOfNodes.getNodes()
9300    2   1    0 spoon.pattern.internal.node.ConstantNode.ConstantNode(T)
9301    2   1    0 spoon.pattern.internal.node.ConstantNode.getTemplateNode()
9302    2   1    0 spoon.pattern.internal.node.ConstantNode.replaceNode(RootNode,RootNode)
9303    1   1    0 spoon.pattern.internal.node.ConstantNode.forEachParameterInfo(RootNode)
9304    2   1    0 spoon.pattern.internal.node.ConstantNode.generateTargets(DefaultGenerator,U,ImmutableMap)
9305    8  10    0 spoon.pattern.internal.node.ConstantNode.matchTarget(Object,ImmutableMap)
9306    2   1    0 spoon.pattern.internal.node.ConstantNode.toString()
9307    2   1    0 spoon.pattern.internal.node.ConstantNode.getMatchingStrategy()
9308    2   1    0 spoon.pattern.internal.node.ConstantNode.isTryNextMatch(ImmutableMap)
9309    2   1    0 spoon.pattern.internal.node.ParameterNode.ParameterNode(ParameterInfo)
9310    2   1    0 spoon.pattern.internal.node.ParameterNode.replaceNode(RootNode,RootNode)
9311    2   1    0 spoon.pattern.internal.node.ParameterNode.generateTargets(DefaultGenerator,T,ImmutableMap)
9312    2   1    0 spoon.pattern.internal.node.ParameterNode.matchTarget(Object,ImmutableMap)
9313    2   1    0 spoon.pattern.internal.node.ParameterNode.getParameterInfo()
9314    2   1    0 spoon.pattern.internal.node.ParameterNode.isRepeatable()
9315    2   1    0 spoon.pattern.internal.node.ParameterNode.isMandatory(ImmutableMap)
9316    2   1    0 spoon.pattern.internal.node.ParameterNode.isTryNextMatch(ImmutableMap)
9317    2   1    0 spoon.pattern.internal.node.ParameterNode.getMatchingStrategy()
9318    2   1    0 spoon.pattern.internal.node.ParameterNode.forEachParameterInfo(RootNode)
9319    2   1    0 spoon.pattern.internal.node.ParameterNode.toString()
9320   18  11    0 spoon.pattern.internal.node.AbstractRepeatableMatcher.matchTargets(TobeMatched,Matchers)
9321   29  21    0 spoon.pattern.internal.node.AbstractRepeatableMatcher.matchOptionalTargets(TobeMatched,Matchers)
9322    1   1    1 spoon.pattern.internal.node.PrimitiveMatcher.matchTarget(Object,ImmutableMap)
9323    1   1    0 spoon.pattern.internal.ValueConvertor.getValueAs(Factory,String,Object,T)
9324    3   1    0 spoon.pattern.Match.Match(List,ImmutableMap)
9325    2   1    1 spoon.pattern.Match.getMatchingElements()
9326    5   5    1 spoon.pattern.Match.getMatchingElements(T)
9327    2   1    1 spoon.pattern.Match.getMatchingElement()
9328    2   1    1 spoon.pattern.Match.getMatchingElement(T)
9329    9   9    1 spoon.pattern.Match.getMatchingElement(T,boolean)
9330    2   1    1 spoon.pattern.Match.getParameters()
9331    2   1    1 spoon.pattern.Match.getParametersMap()
9332    8   2    0 spoon.pattern.Match.toString()
9333    1   1    1 spoon.pattern.Generator.getFactory()
9334    1   1    0 spoon.pattern.Generator.generate(T,Object)
9335    1   1    0 spoon.pattern.Generator.generate(T,ImmutableMap)
9336    1   1    0 spoon.pattern.Generator.addToType(T,Object,CtType)
9337    1   1    0 spoon.pattern.Generator.generateType(String,Object)
9338    3   1    0 spoon.javadoc.internal.Pair.Pair(A,B)
9339   11  12    0 spoon.javadoc.internal.Pair.equals(Object)
9340    3   3    0 spoon.javadoc.internal.Pair.hashCode()
9341    2   1    0 spoon.javadoc.internal.JavadocBlockTag.Type.Type()
9342    2   2    0 spoon.javadoc.internal.JavadocBlockTag.Type.hasName()
9343    5   4    0 spoon.javadoc.internal.JavadocBlockTag.Type.fromName(String)
9344    4   1    0 spoon.javadoc.internal.JavadocBlockTag.JavadocBlockTag(Type,String)
9345    3   1    0 spoon.javadoc.internal.JavadocBlockTag.JavadocBlockTag(String,String)
9346    4   1    0 spoon.javadoc.internal.JavadocBlockTag.JavadocBlockTag(String,String,String)
9347    2   1    0 spoon.javadoc.internal.JavadocBlockTag.getType()
9348    2   1    0 spoon.javadoc.internal.JavadocBlockTag.getContent()
9349    2   1    0 spoon.javadoc.internal.JavadocBlockTag.getName()
9350    2   1    0 spoon.javadoc.internal.JavadocBlockTag.getTagName()
9351    9   2    1 spoon.javadoc.internal.JavadocBlockTag.toText()
9352   11  10    0 spoon.javadoc.internal.JavadocBlockTag.equals(Object)
9353    5   1    0 spoon.javadoc.internal.JavadocBlockTag.hashCode()
9354    2   1    0 spoon.javadoc.internal.JavadocBlockTag.toString()
9355    5   3    1 spoon.javadoc.internal.JavadocInlineTag.nextWord(String)
9356   10   5    1 spoon.javadoc.internal.JavadocInlineTag.fromText(String)
9357    2   1    0 spoon.javadoc.internal.JavadocInlineTag.Type.Type()
9358    5   4    0 spoon.javadoc.internal.JavadocInlineTag.Type.fromName(String)
9359    2   1    0 spoon.javadoc.internal.JavadocInlineTag.setContent(String)
9360    4   1    0 spoon.javadoc.internal.JavadocInlineTag.JavadocInlineTag(String,Type,String)
9361    2   1    0 spoon.javadoc.internal.JavadocInlineTag.getType()
9362    2   1    0 spoon.javadoc.internal.JavadocInlineTag.getContent()
9363    2   1    0 spoon.javadoc.internal.JavadocInlineTag.getName()
9364    2   1    0 spoon.javadoc.internal.JavadocInlineTag.toText()
9365   11  12    0 spoon.javadoc.internal.JavadocInlineTag.equals(Object)
9366    5   4    0 spoon.javadoc.internal.JavadocInlineTag.hashCode()
9367    2   1    0 spoon.javadoc.internal.JavadocInlineTag.toString()
9368    1   1    1 spoon.javadoc.internal.JavadocDescriptionElement.toText()
9369    6   4    0 spoon.javadoc.internal.JavadocSnippet.JavadocSnippet(String)
9370    2   1    0 spoon.javadoc.internal.JavadocSnippet.toText()
9371    7   6    0 spoon.javadoc.internal.JavadocSnippet.equals(Object)
9372    2   1    0 spoon.javadoc.internal.JavadocSnippet.hashCode()
9373    2   1    0 spoon.javadoc.internal.JavadocSnippet.toString()
9374    2   1    1 spoon.Launcher.main(String[])
9375    8   3    0 spoon.Launcher.run(String[])
9376    6   3    0 spoon.Launcher.setArgs(String[])
9377    3   1    0 spoon.Launcher.printUsage()
9378    3   1    1 spoon.Launcher.Launcher()
9379    5   3    1 spoon.Launcher.Launcher(Factory)
9380    6   2    0 spoon.Launcher.addInputResource(String)
9381    2   1    1 spoon.Launcher.addInputResource(SpoonResource)
9382    2   1    0 spoon.Launcher.addProcessor(String)
9383    2   1    0 spoon.Launcher.addProcessor(T)
9384    2   1    0 spoon.Launcher.addTemplateResource(SpoonResource)
9385    2   1    0 spoon.Launcher.getEnvironment()
9386  172   6    1 spoon.Launcher.defineArgs()
9387    2   1    1 spoon.Launcher.getArguments()
9388   66  23    0 spoon.Launcher.processArguments()
9389    2   1    1 spoon.Launcher.getProcessorTypes()
9390    2   1    1 spoon.Launcher.getProcessors()
9391   16   7    1 spoon.Launcher.parseArgs()
9392   10   2    1 spoon.Launcher.createCompiler(Factory)
9393    4   1    0 spoon.Launcher.createCompiler(Factory,SpoonResource)
9394    5   1    1 spoon.Launcher.createCompiler(Factory,SpoonResource,SpoonResource)
9395    2   1    0 spoon.Launcher.createCompiler()
9396    4   1    1 spoon.Launcher.createCompiler(SpoonResource)
9397    2   1    0 spoon.Launcher.createFactory()
9398    2   1    0 spoon.Launcher.getFactory()
9399    2   1    0 spoon.Launcher.createEnvironment()
9400    4   1    0 spoon.Launcher.createOutputWriter()
9401    2   1    0 spoon.Launcher.createPrettyPrinter()
9402   14   2    1 spoon.Launcher.run()
9403    2   1    0 spoon.Launcher.getVersionMessage()
9404    2   1    0 spoon.Launcher.IOFileFilter$1.accept(File)
9405    2   1    0 spoon.Launcher.IOFileFilter$1.accept(File,String)
9406    2   1    0 spoon.Launcher.IOFileFilter$1.accept(File)
9407    2   1    0 spoon.Launcher.IOFileFilter$1.accept(File,String)
9408    5   1    0 spoon.Launcher.buildModel()
9409    5   1    0 spoon.Launcher.process()
9410   17  10    0 spoon.Launcher.prettyprint()
9411    2   1    0 spoon.Launcher.getModelBuilder()
9412    2   1    0 spoon.Launcher.setSourceOutputDirectory(String)
9413    3   1    0 spoon.Launcher.setSourceOutputDirectory(File)
9414    2   1    0 spoon.Launcher.setOutputFilter(CtType)
9415    5   4    0 spoon.Launcher.AbstractFilter$1.matches(CtType)
9416    7   1    0 spoon.Launcher.setOutputFilter(String)
9417    2   1    0 spoon.Launcher.setBinaryOutputDirectory(String)
9418    2   1    0 spoon.Launcher.setBinaryOutputDirectory(File)
9419    2   1    0 spoon.Launcher.getModel()
9420   11   6    1 spoon.Launcher.parseClass(String)
9421    1   1    0 spoon.compiler.SpoonResourceHelper.SpoonResourceHelper()
9422    2   2    1 spoon.compiler.SpoonResourceHelper.isArchive(File)
9423    2   2    1 spoon.compiler.SpoonResourceHelper.isFile(File)
9424    5   2    1 spoon.compiler.SpoonResourceHelper.resources(String)
9425    4   3    1 spoon.compiler.SpoonResourceHelper.createFile(File)
9426    4   3    1 spoon.compiler.SpoonResourceHelper.createResource(File)
9427   10   8    1 spoon.compiler.SpoonResourceHelper.createFolder(File)
9428    1   1    1 spoon.compiler.Environment.getComplianceLevel()
9429    1   1    1 spoon.compiler.Environment.setComplianceLevel(int)
9430    1   1    1 spoon.compiler.Environment.debugMessage(String)
9431    1   1    1 spoon.compiler.Environment.getDefaultFileGenerator()
9432    1   1    1 spoon.compiler.Environment.getManager()
9433    1   1    1 spoon.compiler.Environment.getProcessorProperties(String)
9434    1   1    1 spoon.compiler.Environment.setProcessorProperties(String,ProcessorProperties)
9435    1   1    1 spoon.compiler.Environment.isAutoImports()
9436    1   1    1 spoon.compiler.Environment.isProcessingStopped()
9437    1   1    1 spoon.compiler.Environment.report(Processor,Level,CtElement,String)
9438    1   1    1 spoon.compiler.Environment.report(Processor,Level,CtElement,String,ProblemFixer)
9439    1   1    1 spoon.compiler.Environment.report(Processor,Level,String)
9440    1   1    1 spoon.compiler.Environment.reportEnd()
9441    1   1    1 spoon.compiler.Environment.reportProgressMessage(String)
9442    1   1    1 spoon.compiler.Environment.setDefaultFileGenerator(CtElement)
9443    1   1    1 spoon.compiler.Environment.setManager(ProcessingManager)
9444    1   1    1 spoon.compiler.Environment.setProcessingStopped(boolean)
9445    1   1    1 spoon.compiler.Environment.getTabulationSize()
9446    1   1    1 spoon.compiler.Environment.setTabulationSize(int)
9447    1   1    1 spoon.compiler.Environment.isUsingTabulations()
9448    1   1    1 spoon.compiler.Environment.useTabulations(boolean)
9449    1   1    1 spoon.compiler.Environment.setAutoImports(boolean)
9450    1   1    1 spoon.compiler.Environment.getErrorCount()
9451    1   1    1 spoon.compiler.Environment.getWarningCount()
9452    1   1    1 spoon.compiler.Environment.getInputClassLoader()
9453    1   1    1 spoon.compiler.Environment.setInputClassLoader(ClassLoader)
9454    1   1    1 spoon.compiler.Environment.setPreserveLineNumbers(boolean)
9455    1   1    1 spoon.compiler.Environment.isPreserveLineNumbers()
9456    1   1    1 spoon.compiler.Environment.getSourceClasspath()
9457    1   1    1 spoon.compiler.Environment.setSourceClasspath(String[])
9458    1   1    1 spoon.compiler.Environment.setNoClasspath(boolean)
9459    1   1    1 spoon.compiler.Environment.getNoClasspath()
9460    1   1    1 spoon.compiler.Environment.isCopyResources()
9461    1   1    1 spoon.compiler.Environment.setCopyResources(boolean)
9462    1   1    1 spoon.compiler.Environment.isCommentsEnabled()
9463    1   1    1 spoon.compiler.Environment.setCommentEnabled(boolean)
9464    1   1    1 spoon.compiler.Environment.getLevel()
9465    1   1    1 spoon.compiler.Environment.setLevel(String)
9466    1   1    1 spoon.compiler.Environment.shouldCompile()
9467    1   1    1 spoon.compiler.Environment.setShouldCompile(boolean)
9468    1   1    1 spoon.compiler.Environment.checksAreSkipped()
9469    1   1    1 spoon.compiler.Environment.disableConsistencyChecks()
9470    1   1    1 spoon.compiler.Environment.setBinaryOutputDirectory(String)
9471    1   1    1 spoon.compiler.Environment.getBinaryOutputDirectory()
9472    1   1    1 spoon.compiler.Environment.setSourceOutputDirectory(File)
9473    1   1    1 spoon.compiler.Environment.getSourceOutputDirectory()
9474    1   1    1 spoon.compiler.Environment.setOutputDestinationHandler(OutputDestinationHandler)
9475    1   1    1 spoon.compiler.Environment.getOutputDestinationHandler()
9476    1   1    1 spoon.compiler.Environment.getModelChangeListener()
9477    1   1    1 spoon.compiler.Environment.setModelChangeListener(FineModelChangeListener)
9478    1   1    1 spoon.compiler.Environment.getEncoding()
9479    1   1    1 spoon.compiler.Environment.getEncodingProvider()
9480    1   1    1 spoon.compiler.Environment.setEncoding(Charset)
9481    1   1    1 spoon.compiler.Environment.setEncodingProvider(EncodingProvider)
9482    1   1    1 spoon.compiler.Environment.setOutputType(OutputType)
9483    1   1    1 spoon.compiler.Environment.getOutputType()
9484    1   1    0 spoon.compiler.Environment.getSpoonProgress()
9485    1   1    0 spoon.compiler.Environment.setSpoonProgress(SpoonProgress)
9486    1   1    1 spoon.compiler.Environment.getCompressionType()
9487    1   1    1 spoon.compiler.Environment.setCompressionType(CompressionType)
9488    1   1    1 spoon.compiler.Environment.createPrettyPrinter()
9489    1   1    1 spoon.compiler.Environment.setPrettyPrinterCreator(PrettyPrinter)
9490    1   1    0 spoon.compiler.InvalidClassPathException.InvalidClassPathException()
9491    2   1    0 spoon.compiler.InvalidClassPathException.InvalidClassPathException(String)
9492    2   1    0 spoon.compiler.InvalidClassPathException.InvalidClassPathException(Throwable)
9493    2   1    0 spoon.compiler.InvalidClassPathException.InvalidClassPathException(String,Exception)
9494    2   1    0 spoon.compiler.ModelBuildingException.ModelBuildingException(String)
9495    2   1    0 spoon.compiler.ModelBuildingException.ModelBuildingException(String,Exception)
9496    2   1    0 spoon.compiler.builder.AnnotationProcessingOptions.AnnotationProcessingOptions()
9497    6   4    0 spoon.compiler.builder.AnnotationProcessingOptions.processors(String)
9498    4   4    0 spoon.compiler.builder.AnnotationProcessingOptions.processors(String)
9499    3   1    0 spoon.compiler.builder.AnnotationProcessingOptions.runProcessors()
9500    3   1    0 spoon.compiler.builder.AnnotationProcessingOptions.compileProcessors()
9501    2   1    0 spoon.compiler.builder.SourceOptions.SourceOptions()
9502    4   4    1 spoon.compiler.builder.SourceOptions.sources(String)
9503    6   4    1 spoon.compiler.builder.SourceOptions.sources(String)
9504   15   8    1 spoon.compiler.builder.SourceOptions.sources(SpoonFile)
9505    2   1    0 spoon.compiler.builder.ComplianceOptions.ComplianceOptions()
9506    6   2    0 spoon.compiler.builder.ComplianceOptions.compliance(int)
9507    1   1    1 spoon.compiler.builder.EncodingProvider.detectEncoding(SpoonFile,SpoonFile[])
9508    2   1    0 spoon.compiler.builder.AdvancedOptions.AdvancedOptions()
9509    3   1    0 spoon.compiler.builder.AdvancedOptions.continueExecution()
9510    3   1    0 spoon.compiler.builder.AdvancedOptions.enableJavadoc()
9511    3   1    0 spoon.compiler.builder.AdvancedOptions.preserveUnusedVars()
9512    2   1    0 spoon.compiler.builder.ClasspathOptions.ClasspathOptions()
9513    6   3    0 spoon.compiler.builder.ClasspathOptions.classpath(String)
9514    4   4    0 spoon.compiler.builder.ClasspathOptions.classpath(String)
9515    6   3    0 spoon.compiler.builder.ClasspathOptions.bootclasspath(String)
9516    4   4    0 spoon.compiler.builder.ClasspathOptions.bootclasspath(String)
9517    4   3    0 spoon.compiler.builder.ClasspathOptions.binaries(String)
9518    8   2    0 spoon.compiler.builder.ClasspathOptions.binaries(File)
9519    6   4    0 spoon.compiler.builder.ClasspathOptions.encoding(String)
9520    2   1    0 spoon.compiler.builder.Options.Options(Class)
9521    2   1    0 spoon.compiler.builder.Options.build()
9522    8   5    0 spoon.compiler.builder.Options.join(String,String[])
9523    4   1    0 spoon.compiler.builder.JDTBuilderImpl.classpathOptions(ClasspathOptions)
9524    4   1    0 spoon.compiler.builder.JDTBuilderImpl.complianceOptions(ComplianceOptions)
9525    4   1    0 spoon.compiler.builder.JDTBuilderImpl.annotationProcessingOptions(AnnotationProcessingOptions)
9526    4   1    0 spoon.compiler.builder.JDTBuilderImpl.advancedOptions(AdvancedOptions)
9527    4   1    0 spoon.compiler.builder.JDTBuilderImpl.sources(SourceOptions)
9528    2   1    0 spoon.compiler.builder.JDTBuilderImpl.build()
9529    3   3    0 spoon.compiler.builder.JDTBuilderImpl.checkSources()
9530    1   1    1 spoon.compiler.builder.JDTBuilder.classpathOptions(ClasspathOptions)
9531    1   1    1 spoon.compiler.builder.JDTBuilder.complianceOptions(ComplianceOptions)
9532    1   1    1 spoon.compiler.builder.JDTBuilder.annotationProcessingOptions(AnnotationProcessingOptions)
9533    1   1    1 spoon.compiler.builder.JDTBuilder.advancedOptions(AdvancedOptions)
9534    1   1    1 spoon.compiler.builder.JDTBuilder.sources(SourceOptions)
9535    1   1    1 spoon.compiler.builder.JDTBuilder.build()
9536    1   1    1 spoon.compiler.SpoonFolder.getFiles()
9537    1   1    1 spoon.compiler.SpoonFolder.getAllFiles()
9538    1   1    1 spoon.compiler.SpoonFolder.getAllJavaFiles()
9539    1   1    1 spoon.compiler.SpoonFolder.getSubFolders()
9540    1   1    1 spoon.compiler.SpoonFolder.addFile(SpoonFile)
9541    1   1    1 spoon.compiler.SpoonFolder.addFolder(SpoonFolder)
9542    1   1    1 spoon.compiler.SpoonResource.getParent()
9543    1   1    1 spoon.compiler.SpoonResource.getName()
9544    1   1    1 spoon.compiler.SpoonResource.isFile()
9545    1   1    1 spoon.compiler.SpoonResource.isArchive()
9546    1   1    1 spoon.compiler.SpoonResource.getPath()
9547    1   1    1 spoon.compiler.SpoonResource.getFileSystemParent()
9548    1   1    1 spoon.compiler.SpoonResource.toFile()
Average Function NCSS:       5.01
Average Function CCN:        2.02
Average Function JVDC:       0.23
Program NCSS:           61,571.00
